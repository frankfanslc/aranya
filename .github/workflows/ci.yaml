name: CI

# yamllint disable-line rule:truthy
on:
  check_run:
    types:
    - rerequested
    - requested_action
  pull_request:
    paths-ignore:
    - docs/**
    - README.md
    branches:
    - master
    - "!deps/**"
  push:
    paths-ignore:
    - docs/**
    - README.md
    branches:
    - master
    tags:
    - v*

env:
  GO111MODULE: "on"

jobs:
  stylecheck:
    if: contains(github.head_ref, 'deps/') == false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Ensure tidy gomod
      run: |
        make vendor
        if ! git diff --exit-code
        then
          echo "go mod not tidy"
          exit 1
        fi

    - name: Install helm
      uses: azure/setup-helm@v1
      with:
        version: latest

    - name: Ensure Generated Files Up to Date
      run: |
        make install.codegen
        make gen.code.all
        make gen.manifests.aranya

        if ! git diff --exit-code
        then
          echo "go mod not tidy"
          exit 1
        fi

    - name: Lint
      run: |
        make lint.all

  unit-tests:
    if: contains(github.head_ref, 'deps/') == false
    needs:
    - stylecheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Test Packages
      run: |
        make test.pkg

    - name: Report Test Coverage
      uses: codecov/codecov-action@v1

  e2e-tests:
    if: contains(github.head_ref, 'deps/') == false
    needs:
    - stylecheck
    # TODO: enable this for windows e2e tests once supported
    strategy:
      fail-fast: false
      matrix:
        kube:
        - v1-14
        - v1-15
        - v1-16
        - v1-17
        - v1-18
        - v1-19
        - v1-20
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Add PATH
      run: |
        mkdir -p "${HOME}/bin"
        echo "${HOME}/bin" >> $GITHUB_PATH

    - name: Install KinD
      env:
        KIND_VERSION: v0.9.0
      run: |
        curl -Lo "${HOME}/bin/kind" \
          https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64
        chmod +x "${HOME}/bin/kind"

    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: latest

    - name: Install helm
      uses: azure/setup-helm@v1
      with:
        version: latest

    - name: Install helm-stack
      run: |
        curl -Lo "${HOME}/bin/helm-stack" \
          https://github.com/arhat-dev/helm-stack/releases/download/v0.1.2/helm-stack.linux.amd64
        chmod +x "${HOME}/bin/helm-stack"

    - name: Setup Local Image Registry
      run: |
        make e2e.image.registry

    - name: Build Test Image
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        IMAGE_REPOS: localhost:5000
        MANIFEST_TAG: e2e
      run: |
        make image.build.aranya.linux.test
        make image.push.aranya.linux.test

    - name: E2E Test
      run: |
        make e2e.${{ matrix.kube }}

    - name: Upload Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: e2e-output-${{ matrix.kube }}
        path: build

    - name: Report e2e Coverage
      uses: codecov/codecov-action@v1

  build-linux-images:
    # yamllint disable-line rule:line-length
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') == true)
    needs:
    - e2e-tests
    - unit-tests
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Fetch history
      run: git fetch --prune --unshallow

    - name: Build and Push Images
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        GITHUB_DOCKER_USERNAME: ${{ github.actor }}
        GITHUB_DOCKER_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
        IMAGE_REPOS: docker.io/arhatdev,ghcr.io/arhat-dev
      run: |
        docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
        docker login ghcr.io/arhat-dev -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

        make image.build.linux.all
        make image.push.linux.all

  # TODO: Add support for windows image build in arhat-dev/dockerfile
  # build-windows-images:
  # yamllint disable-line rule:line-length
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') == true)
  #   needs:
  #   - e2e-tests
  #   - unit-tests
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch:
  #       - amd64
  #       # - arm64
  #       - armv7
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Fetch history
  #     run: git fetch --prune --unshallow

  #   - name: Build and Push Images
  #     env:
  #       DOCKER_CLI_EXPERIMENTAL: enabled
  #       DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #       DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  #       GITHUB_DOCKER_USERNAME: ${{ github.actor }}
  #       GITHUB_DOCKER_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
  #       IMAGE_REPOS: docker.io/arhatdev,ghcr.io/arhat-dev
  #     run: |
  #       docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
  #       docker login ghcr.io/arhat-dev -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

  #       make image.build.aranya.windows.${{ matrix.arch }}
  #       make image.push.aranya.windows.${{ matrix.arch }}

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
    - build-linux-images
    # - build-windows-images
    runs-on: ubuntu-latest

    steps:
    - name: Extract tag name
      id: extract_tag
      run: |
        echo "::set-output name=tag::$(echo ${GITHUB_REF#refs/tags/})"

    - name: Build changelog
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: false
        # yamllint disable rule:line-length
        body: |
          # Release Notes

          ## Features

          - Add foo support #issue-ref
          - Add bar support #issue-ref

          ## Bug fixes

          - Fixed foo #issue-ref
          - Fixed bar #issue-ref #pr-ref

          ## Breaking Changes

          - Foo ...
          - Bar ...

          ## Changes since `${{ steps.build_changelog.outputs.fromTag }}`

          ${{ steps.build_changelog.outputs.changelog }}

          ## Images

          - `docker.io/arhatdev/aranya:${{ steps.extract_tag.outputs.tag }}`
          - `ghcr.io/arhat-dev/aranya:${{ steps.extract_tag.outputs.tag }}`

          ## Helm Charts

          - Have a look at [the chart at ArtifactHub](https://artifacthub.io/packages/helm/arhatdev/aranya)
          - Checkout chart [source code](https://github.com/arhat-dev/aranya/blob/${{ steps.extract_tag.outputs.tag }}/cicd/deploy/charts/aranya)
