// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: host.proto

package abbotgopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostNetworkInterface struct {
	Metadata *NetworkInterface `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// provider of this interface, if this interface was configured
	// in configuration, the provider MUST be `static`
	//
	// when you create a network interface dynamically
	// you should provide a unique provider value to
	// make sure this interface is always managed by
	// you
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*HostNetworkInterface_Unknown
	//	*HostNetworkInterface_Bridge
	//	*HostNetworkInterface_Wireguard
	Config isHostNetworkInterface_Config `protobuf_oneof:"config"`
}

func (m *HostNetworkInterface) Reset()      { *m = HostNetworkInterface{} }
func (*HostNetworkInterface) ProtoMessage() {}
func (*HostNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_85e40b83b4d50a8d, []int{0}
}
func (m *HostNetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkInterface.Merge(m, src)
}
func (m *HostNetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkInterface proto.InternalMessageInfo

type isHostNetworkInterface_Config interface {
	isHostNetworkInterface_Config()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HostNetworkInterface_Unknown struct {
	Unknown *DriverUnknown `protobuf:"bytes,10,opt,name=unknown,proto3,oneof" json:"unknown,omitempty"`
}
type HostNetworkInterface_Bridge struct {
	Bridge *DriverBridge `protobuf:"bytes,11,opt,name=bridge,proto3,oneof" json:"bridge,omitempty"`
}
type HostNetworkInterface_Wireguard struct {
	Wireguard *DriverWireguard `protobuf:"bytes,12,opt,name=wireguard,proto3,oneof" json:"wireguard,omitempty"`
}

func (*HostNetworkInterface_Unknown) isHostNetworkInterface_Config()   {}
func (*HostNetworkInterface_Bridge) isHostNetworkInterface_Config()    {}
func (*HostNetworkInterface_Wireguard) isHostNetworkInterface_Config() {}

func (m *HostNetworkInterface) GetConfig() isHostNetworkInterface_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *HostNetworkInterface) GetMetadata() *NetworkInterface {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *HostNetworkInterface) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *HostNetworkInterface) GetUnknown() *DriverUnknown {
	if x, ok := m.GetConfig().(*HostNetworkInterface_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (m *HostNetworkInterface) GetBridge() *DriverBridge {
	if x, ok := m.GetConfig().(*HostNetworkInterface_Bridge); ok {
		return x.Bridge
	}
	return nil
}

func (m *HostNetworkInterface) GetWireguard() *DriverWireguard {
	if x, ok := m.GetConfig().(*HostNetworkInterface_Wireguard); ok {
		return x.Wireguard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HostNetworkInterface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HostNetworkInterface_Unknown)(nil),
		(*HostNetworkInterface_Bridge)(nil),
		(*HostNetworkInterface_Wireguard)(nil),
	}
}

type HostNetworkConfigEnsureRequest struct {
	Expected []*HostNetworkInterface `protobuf:"bytes,1,rep,name=expected,proto3" json:"expected,omitempty"`
}

func (m *HostNetworkConfigEnsureRequest) Reset()      { *m = HostNetworkConfigEnsureRequest{} }
func (*HostNetworkConfigEnsureRequest) ProtoMessage() {}
func (*HostNetworkConfigEnsureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85e40b83b4d50a8d, []int{1}
}
func (m *HostNetworkConfigEnsureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkConfigEnsureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkConfigEnsureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkConfigEnsureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkConfigEnsureRequest.Merge(m, src)
}
func (m *HostNetworkConfigEnsureRequest) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkConfigEnsureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkConfigEnsureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkConfigEnsureRequest proto.InternalMessageInfo

func (m *HostNetworkConfigEnsureRequest) GetExpected() []*HostNetworkInterface {
	if m != nil {
		return m.Expected
	}
	return nil
}

type HostNetworkConfigQueryRequest struct {
	// filter interfaces from config sources
	//
	// if no provider specified, get all interfaces
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *HostNetworkConfigQueryRequest) Reset()      { *m = HostNetworkConfigQueryRequest{} }
func (*HostNetworkConfigQueryRequest) ProtoMessage() {}
func (*HostNetworkConfigQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85e40b83b4d50a8d, []int{2}
}
func (m *HostNetworkConfigQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkConfigQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkConfigQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkConfigQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkConfigQueryRequest.Merge(m, src)
}
func (m *HostNetworkConfigQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkConfigQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkConfigQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkConfigQueryRequest proto.InternalMessageInfo

func (m *HostNetworkConfigQueryRequest) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

type HostNetworkConfigResponse struct {
	Actual []*HostNetworkInterface `protobuf:"bytes,1,rep,name=actual,proto3" json:"actual,omitempty"`
}

func (m *HostNetworkConfigResponse) Reset()      { *m = HostNetworkConfigResponse{} }
func (*HostNetworkConfigResponse) ProtoMessage() {}
func (*HostNetworkConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85e40b83b4d50a8d, []int{3}
}
func (m *HostNetworkConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkConfigResponse.Merge(m, src)
}
func (m *HostNetworkConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkConfigResponse proto.InternalMessageInfo

func (m *HostNetworkConfigResponse) GetActual() []*HostNetworkInterface {
	if m != nil {
		return m.Actual
	}
	return nil
}

func init() {
	proto.RegisterType((*HostNetworkInterface)(nil), "abbot.HostNetworkInterface")
	proto.RegisterType((*HostNetworkConfigEnsureRequest)(nil), "abbot.HostNetworkConfigEnsureRequest")
	proto.RegisterType((*HostNetworkConfigQueryRequest)(nil), "abbot.HostNetworkConfigQueryRequest")
	proto.RegisterType((*HostNetworkConfigResponse)(nil), "abbot.HostNetworkConfigResponse")
}

func init() { proto.RegisterFile("host.proto", fileDescriptor_85e40b83b4d50a8d) }

var fileDescriptor_85e40b83b4d50a8d = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x6e, 0xd4, 0x40,
	0x14, 0x85, 0x67, 0x82, 0x30, 0xf6, 0x5d, 0x2a, 0x67, 0x15, 0xcc, 0x02, 0xc3, 0xca, 0xd5, 0x36,
	0x31, 0x28, 0x91, 0xa0, 0xa2, 0x59, 0x40, 0x32, 0x0d, 0x82, 0x91, 0x22, 0x04, 0x0d, 0x1a, 0xdb,
	0x37, 0x8e, 0x15, 0xf0, 0x98, 0xf1, 0x78, 0x17, 0x3a, 0x6a, 0x2a, 0x1e, 0x83, 0x47, 0xa1, 0xdc,
	0x32, 0x25, 0xeb, 0x6d, 0x28, 0xf3, 0x08, 0x28, 0xe3, 0xb1, 0x43, 0x08, 0x45, 0x3a, 0xfb, 0xbb,
	0xe7, 0x9c, 0xfb, 0x63, 0x03, 0x1c, 0xc9, 0x5a, 0x47, 0x95, 0x92, 0x5a, 0xfa, 0xd7, 0x45, 0x92,
	0x48, 0x3d, 0x81, 0x8f, 0xa8, 0x45, 0x87, 0x26, 0xe3, 0x4c, 0x15, 0x0b, 0x54, 0xef, 0x9b, 0xf2,
	0xb8, 0x94, 0xcb, 0xd2, 0xd2, 0x6d, 0x4b, 0x13, 0x55, 0x64, 0x39, 0x5a, 0xb8, 0x63, 0xe1, 0xb2,
	0x50, 0x98, 0x37, 0x42, 0x65, 0x1d, 0x0f, 0xbf, 0x6d, 0xc1, 0x38, 0x96, 0xb5, 0x7e, 0x89, 0x7a,
	0x29, 0xd5, 0xf1, 0x8b, 0x52, 0xa3, 0x3a, 0x14, 0x29, 0xfa, 0xfb, 0xe0, 0x9e, 0x75, 0xca, 0x84,
	0x16, 0x01, 0x9d, 0xd2, 0xd9, 0x68, 0xef, 0x56, 0x64, 0x26, 0x88, 0xfe, 0x95, 0xf2, 0x41, 0xe8,
	0x4f, 0xc0, 0xad, 0x94, 0x5c, 0x14, 0x19, 0xaa, 0x60, 0x6b, 0x4a, 0x67, 0x1e, 0x1f, 0xde, 0xfd,
	0x87, 0x70, 0xc3, 0xce, 0x19, 0x80, 0xc9, 0x1b, 0xdb, 0xbc, 0x67, 0x66, 0xb2, 0x83, 0xae, 0x16,
	0x13, 0xde, 0xcb, 0xfc, 0x5d, 0x70, 0xba, 0x1d, 0x82, 0x91, 0x31, 0x6c, 0x5f, 0x30, 0xcc, 0x4d,
	0x29, 0x26, 0xdc, 0x8a, 0xfc, 0x47, 0xe0, 0x0d, 0xdb, 0x05, 0x37, 0x8d, 0x63, 0xe7, 0x82, 0xe3,
	0x4d, 0x5f, 0x8d, 0x09, 0x3f, 0x97, 0xce, 0x5d, 0x70, 0x52, 0x59, 0x1e, 0x16, 0x79, 0xf8, 0x16,
	0xd8, 0x5f, 0xb7, 0x78, 0x6a, 0xe0, 0xf3, 0xb2, 0x6e, 0x14, 0x72, 0xfc, 0xd4, 0x60, 0xad, 0xfd,
	0xc7, 0xe0, 0xe2, 0xe7, 0x0a, 0x53, 0x8d, 0x59, 0x40, 0xa7, 0xd7, 0x66, 0xa3, 0xbd, 0x3b, 0xb6,
	0xc5, 0xff, 0x8e, 0xc8, 0x07, 0x71, 0xf8, 0x04, 0xee, 0x5d, 0x8a, 0x7e, 0xdd, 0xa0, 0xfa, 0xd2,
	0x27, 0xdf, 0x05, 0xaf, 0x3f, 0x55, 0x6d, 0xa2, 0x3d, 0x7e, 0x0e, 0xc2, 0x57, 0x70, 0xfb, 0x92,
	0x9d, 0x63, 0x5d, 0xc9, 0xb2, 0x3e, 0xfb, 0x54, 0x8e, 0x48, 0x75, 0x23, 0x3e, 0x5c, 0x65, 0x24,
	0x2b, 0x9d, 0x1f, 0xac, 0xd6, 0x8c, 0x9c, 0xac, 0x19, 0x39, 0x5d, 0x33, 0xfa, 0xb5, 0x65, 0xf4,
	0x47, 0xcb, 0xe8, 0xcf, 0x96, 0xd1, 0x55, 0xcb, 0xe8, 0xaf, 0x96, 0xd1, 0xdf, 0x2d, 0x23, 0xa7,
	0x2d, 0xa3, 0xdf, 0x37, 0x8c, 0xac, 0x36, 0x8c, 0x9c, 0x6c, 0x18, 0x79, 0x77, 0x5f, 0xa8, 0x23,
	0xa1, 0xa3, 0x0c, 0x17, 0x0f, 0x4c, 0x8f, 0x5d, 0xf3, 0x17, 0x75, 0xcf, 0xb9, 0xac, 0x92, 0xc4,
	0x31, 0x60, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x6a, 0x39, 0xb1, 0xba, 0x02, 0x00,
	0x00,
}

func (this *HostNetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkInterface)
	if !ok {
		that2, ok := that.(HostNetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	if that1.Config == nil {
		if this.Config != nil {
			return false
		}
	} else if this.Config == nil {
		return false
	} else if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *HostNetworkInterface_Unknown) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkInterface_Unknown)
	if !ok {
		that2, ok := that.(HostNetworkInterface_Unknown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Unknown.Equal(that1.Unknown) {
		return false
	}
	return true
}
func (this *HostNetworkInterface_Bridge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkInterface_Bridge)
	if !ok {
		that2, ok := that.(HostNetworkInterface_Bridge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bridge.Equal(that1.Bridge) {
		return false
	}
	return true
}
func (this *HostNetworkInterface_Wireguard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkInterface_Wireguard)
	if !ok {
		that2, ok := that.(HostNetworkInterface_Wireguard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Wireguard.Equal(that1.Wireguard) {
		return false
	}
	return true
}
func (this *HostNetworkConfigEnsureRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkConfigEnsureRequest)
	if !ok {
		that2, ok := that.(HostNetworkConfigEnsureRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Expected) != len(that1.Expected) {
		return false
	}
	for i := range this.Expected {
		if !this.Expected[i].Equal(that1.Expected[i]) {
			return false
		}
	}
	return true
}
func (this *HostNetworkConfigQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkConfigQueryRequest)
	if !ok {
		that2, ok := that.(HostNetworkConfigQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Providers) != len(that1.Providers) {
		return false
	}
	for i := range this.Providers {
		if this.Providers[i] != that1.Providers[i] {
			return false
		}
	}
	return true
}
func (this *HostNetworkConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkConfigResponse)
	if !ok {
		that2, ok := that.(HostNetworkConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actual) != len(that1.Actual) {
		return false
	}
	for i := range this.Actual {
		if !this.Actual[i].Equal(that1.Actual[i]) {
			return false
		}
	}
	return true
}
func (this *HostNetworkInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&abbotgopb.HostNetworkInterface{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostNetworkInterface_Unknown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&abbotgopb.HostNetworkInterface_Unknown{` +
		`Unknown:` + fmt.Sprintf("%#v", this.Unknown) + `}`}, ", ")
	return s
}
func (this *HostNetworkInterface_Bridge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&abbotgopb.HostNetworkInterface_Bridge{` +
		`Bridge:` + fmt.Sprintf("%#v", this.Bridge) + `}`}, ", ")
	return s
}
func (this *HostNetworkInterface_Wireguard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&abbotgopb.HostNetworkInterface_Wireguard{` +
		`Wireguard:` + fmt.Sprintf("%#v", this.Wireguard) + `}`}, ", ")
	return s
}
func (this *HostNetworkConfigEnsureRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&abbotgopb.HostNetworkConfigEnsureRequest{")
	if this.Expected != nil {
		s = append(s, "Expected: "+fmt.Sprintf("%#v", this.Expected)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostNetworkConfigQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&abbotgopb.HostNetworkConfigQueryRequest{")
	s = append(s, "Providers: "+fmt.Sprintf("%#v", this.Providers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostNetworkConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&abbotgopb.HostNetworkConfigResponse{")
	if this.Actual != nil {
		s = append(s, "Actual: "+fmt.Sprintf("%#v", this.Actual)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHost(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HostNetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostNetworkInterface_Unknown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkInterface_Unknown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Unknown != nil {
		{
			size, err := m.Unknown.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HostNetworkInterface_Bridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkInterface_Bridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bridge != nil {
		{
			size, err := m.Bridge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *HostNetworkInterface_Wireguard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkInterface_Wireguard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wireguard != nil {
		{
			size, err := m.Wireguard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *HostNetworkConfigEnsureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkConfigEnsureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkConfigEnsureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expected) > 0 {
		for iNdEx := len(m.Expected) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Expected[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HostNetworkConfigQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkConfigQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkConfigQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintHost(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HostNetworkConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actual) > 0 {
		for iNdEx := len(m.Actual) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actual[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHost(dAtA []byte, offset int, v uint64) int {
	offset -= sovHost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostNetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *HostNetworkInterface_Unknown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unknown != nil {
		l = m.Unknown.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}
func (m *HostNetworkInterface_Bridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bridge != nil {
		l = m.Bridge.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}
func (m *HostNetworkInterface_Wireguard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wireguard != nil {
		l = m.Wireguard.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}
func (m *HostNetworkConfigEnsureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expected) > 0 {
		for _, e := range m.Expected {
			l = e.Size()
			n += 1 + l + sovHost(uint64(l))
		}
	}
	return n
}

func (m *HostNetworkConfigQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovHost(uint64(l))
		}
	}
	return n
}

func (m *HostNetworkConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actual) > 0 {
		for _, e := range m.Actual {
			l = e.Size()
			n += 1 + l + sovHost(uint64(l))
		}
	}
	return n
}

func sovHost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHost(x uint64) (n int) {
	return sovHost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HostNetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkInterface{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "NetworkInterface", "NetworkInterface", 1) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkInterface_Unknown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkInterface_Unknown{`,
		`Unknown:` + strings.Replace(fmt.Sprintf("%v", this.Unknown), "DriverUnknown", "DriverUnknown", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkInterface_Bridge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkInterface_Bridge{`,
		`Bridge:` + strings.Replace(fmt.Sprintf("%v", this.Bridge), "DriverBridge", "DriverBridge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkInterface_Wireguard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkInterface_Wireguard{`,
		`Wireguard:` + strings.Replace(fmt.Sprintf("%v", this.Wireguard), "DriverWireguard", "DriverWireguard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkConfigEnsureRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExpected := "[]*HostNetworkInterface{"
	for _, f := range this.Expected {
		repeatedStringForExpected += strings.Replace(f.String(), "HostNetworkInterface", "HostNetworkInterface", 1) + ","
	}
	repeatedStringForExpected += "}"
	s := strings.Join([]string{`&HostNetworkConfigEnsureRequest{`,
		`Expected:` + repeatedStringForExpected + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkConfigQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkConfigQueryRequest{`,
		`Providers:` + fmt.Sprintf("%v", this.Providers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActual := "[]*HostNetworkInterface{"
	for _, f := range this.Actual {
		repeatedStringForActual += strings.Replace(f.String(), "HostNetworkInterface", "HostNetworkInterface", 1) + ","
	}
	repeatedStringForActual += "}"
	s := strings.Join([]string{`&HostNetworkConfigResponse{`,
		`Actual:` + repeatedStringForActual + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHost(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HostNetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &NetworkInterface{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unknown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverUnknown{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &HostNetworkInterface_Unknown{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverBridge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &HostNetworkInterface_Bridge{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wireguard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverWireguard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &HostNetworkInterface_Wireguard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNetworkConfigEnsureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkConfigEnsureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkConfigEnsureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expected = append(m.Expected, &HostNetworkInterface{})
			if err := m.Expected[len(m.Expected)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNetworkConfigQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkConfigQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkConfigQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNetworkConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actual = append(m.Actual, &HostNetworkInterface{})
			if err := m.Actual[len(m.Actual)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHost = fmt.Errorf("proto: unexpected end of group")
)
