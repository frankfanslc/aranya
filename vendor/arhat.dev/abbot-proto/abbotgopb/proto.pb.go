// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

package abbotgopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestType int32

const (
	_INVALID_REQUEST               RequestType = 0
	REQ_ENSURE_CTR_NETWORK_CONFIG  RequestType = 11
	REQ_QUERY_CTR_NETWORK_CONFIG   RequestType = 12
	REQ_ENSURE_CTR_NETWORK         RequestType = 21
	REQ_RESTORE_CTR_NETWORK        RequestType = 22
	REQ_DELETE_CTR_NETWORK         RequestType = 23
	REQ_QUERY_CTR_NETWORK          RequestType = 24
	REQ_ENSURE_HOST_NETWORK_CONFIG RequestType = 31
	REQ_QUERY_HOST_NETWORK_CONFIG  RequestType = 32
)

var RequestType_name = map[int32]string{
	0:  "_INVALID_REQUEST",
	11: "REQ_ENSURE_CTR_NETWORK_CONFIG",
	12: "REQ_QUERY_CTR_NETWORK_CONFIG",
	21: "REQ_ENSURE_CTR_NETWORK",
	22: "REQ_RESTORE_CTR_NETWORK",
	23: "REQ_DELETE_CTR_NETWORK",
	24: "REQ_QUERY_CTR_NETWORK",
	31: "REQ_ENSURE_HOST_NETWORK_CONFIG",
	32: "REQ_QUERY_HOST_NETWORK_CONFIG",
}

var RequestType_value = map[string]int32{
	"_INVALID_REQUEST":               0,
	"REQ_ENSURE_CTR_NETWORK_CONFIG":  11,
	"REQ_QUERY_CTR_NETWORK_CONFIG":   12,
	"REQ_ENSURE_CTR_NETWORK":         21,
	"REQ_RESTORE_CTR_NETWORK":        22,
	"REQ_DELETE_CTR_NETWORK":         23,
	"REQ_QUERY_CTR_NETWORK":          24,
	"REQ_ENSURE_HOST_NETWORK_CONFIG": 31,
	"REQ_QUERY_HOST_NETWORK_CONFIG":  32,
}

func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}

type ResponseType int32

const (
	_INVALID_RESPONSE            ResponseType = 0
	RESP_DONE                    ResponseType = 1
	RESP_CTR_NETWORK_CONFIG      ResponseType = 11
	RESP_CTR_NETWORK_STATUS      ResponseType = 21
	RESP_CTR_NETWORK_STATUS_LIST ResponseType = 22
	RESP_HOST_NETWORK_CONFIG     ResponseType = 31
)

var ResponseType_name = map[int32]string{
	0:  "_INVALID_RESPONSE",
	1:  "RESP_DONE",
	11: "RESP_CTR_NETWORK_CONFIG",
	21: "RESP_CTR_NETWORK_STATUS",
	22: "RESP_CTR_NETWORK_STATUS_LIST",
	31: "RESP_HOST_NETWORK_CONFIG",
}

var ResponseType_value = map[string]int32{
	"_INVALID_RESPONSE":            0,
	"RESP_DONE":                    1,
	"RESP_CTR_NETWORK_CONFIG":      11,
	"RESP_CTR_NETWORK_STATUS":      21,
	"RESP_CTR_NETWORK_STATUS_LIST": 22,
	"RESP_HOST_NETWORK_CONFIG":     31,
}

func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}

type Request struct {
	Kind RequestType `protobuf:"varint,1,opt,name=kind,proto3,enum=abbot.RequestType" json:"kind,omitempty"`
	Body []byte      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetKind() RequestType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_REQUEST
}

func (m *Request) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	Kind ResponseType `protobuf:"varint,1,opt,name=kind,proto3,enum=abbot.ResponseType" json:"kind,omitempty"`
	Body []byte       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetKind() ResponseType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_RESPONSE
}

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterEnum("abbot.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("abbot.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterType((*Request)(nil), "abbot.Request")
	proto.RegisterType((*Response)(nil), "abbot.Response")
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor_2fcc84b9998d60d8) }

var fileDescriptor_2fcc84b9998d60d8 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x77, 0xab, 0xf2, 0x6f, 0x12, 0xd0, 0x32, 0xe0, 0xd4, 0x40, 0xd9, 0x9a, 0x1c, 0xa0,
	0xaa, 0x84, 0x91, 0xe0, 0x09, 0x4a, 0xb3, 0x14, 0x8b, 0xc8, 0x6e, 0x76, 0xd7, 0x20, 0xb8, 0xac,
	0x62, 0xc5, 0x02, 0x84, 0x54, 0x9b, 0xc6, 0x20, 0xf5, 0xc6, 0x23, 0xf0, 0x06, 0x5c, 0x39, 0xf1,
	0x1c, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0x7d, 0x04, 0x94, 0x35, 0x45, 0x6e, 0xb4, 0xe2,
	0x62, 0x8d, 0xfd, 0xfb, 0xe6, 0x1b, 0xcf, 0xa7, 0x81, 0x4e, 0x79, 0x54, 0x54, 0x45, 0x68, 0x9f,
	0x78, 0x61, 0x9c, 0x65, 0x45, 0xd5, 0x17, 0x70, 0x49, 0xe6, 0x1f, 0x3f, 0xe5, 0xd3, 0x0a, 0xef,
	0xc3, 0xfa, 0x87, 0xf7, 0x87, 0x13, 0x9f, 0x06, 0x74, 0xfb, 0xda, 0x63, 0x0c, 0xad, 0x20, 0xfc,
	0x4b, 0xf5, 0x71, 0x99, 0x4b, 0xcb, 0x11, 0x61, 0x3d, 0x2b, 0x26, 0xc7, 0xfe, 0x5a, 0x40, 0xb7,
	0xbb, 0xd2, 0xd6, 0xfd, 0x7d, 0xb8, 0x2c, 0xf3, 0x69, 0x59, 0x1c, 0x4e, 0x73, 0x7c, 0x70, 0xce,
	0xe7, 0xc6, 0x3f, 0x9f, 0x06, 0xff, 0xdf, 0x68, 0xe7, 0xdb, 0x1a, 0x74, 0x5a, 0x23, 0xf1, 0x26,
	0x30, 0x13, 0xc5, 0x2f, 0x77, 0x87, 0xd1, 0xc0, 0x48, 0x31, 0x4a, 0x85, 0xd2, 0x8c, 0xe0, 0x3d,
	0xb8, 0x2b, 0xc5, 0xc8, 0x88, 0x58, 0xa5, 0x52, 0x98, 0x3d, 0x2d, 0x4d, 0x2c, 0xf4, 0xab, 0x44,
	0xbe, 0x30, 0x7b, 0x49, 0xfc, 0x2c, 0xda, 0x67, 0x1d, 0x0c, 0x60, 0x73, 0x29, 0x19, 0xa5, 0x42,
	0xbe, 0x76, 0x29, 0xba, 0x78, 0x1b, 0x7a, 0x6e, 0x13, 0xe6, 0xe1, 0x1d, 0xd8, 0x58, 0x32, 0x29,
	0x94, 0x4e, 0x56, 0x60, 0xef, 0xac, 0x71, 0x20, 0x86, 0x42, 0x9f, 0x67, 0x1b, 0x78, 0x0b, 0x3c,
	0xe7, 0x58, 0xe6, 0x63, 0x1f, 0x78, 0x6b, 0xde, 0xf3, 0x44, 0xe9, 0xd5, 0x7f, 0xda, 0x3a, 0x5b,
	0xac, 0x69, 0x77, 0x49, 0x82, 0x9d, 0x1f, 0x14, 0xba, 0xed, 0x30, 0xd1, 0x83, 0xeb, 0xad, 0x88,
	0xd4, 0x41, 0x12, 0x2b, 0xc1, 0x08, 0x5e, 0x85, 0x2b, 0xcb, 0x37, 0x33, 0x48, 0x62, 0xc1, 0x68,
	0xb3, 0x91, 0x3a, 0x70, 0x87, 0xe5, 0x82, 0x4a, 0xef, 0xea, 0x54, 0x31, 0xaf, 0x49, 0xd2, 0x09,
	0xcd, 0x30, 0x52, 0x9a, 0xf5, 0x70, 0x13, 0x7c, 0xab, 0x70, 0xee, 0xf4, 0x34, 0x9d, 0xcd, 0x39,
	0x39, 0x99, 0x73, 0x72, 0x3a, 0xe7, 0xf4, 0x4b, 0xcd, 0xe9, 0xf7, 0x9a, 0xd3, 0x9f, 0x35, 0xa7,
	0xb3, 0x9a, 0xd3, 0x5f, 0x35, 0xa7, 0xbf, 0x6b, 0x4e, 0x4e, 0x6b, 0x4e, 0xbf, 0x2e, 0x38, 0x99,
	0x2d, 0x38, 0x39, 0x59, 0x70, 0xf2, 0x66, 0x6b, 0x7c, 0xf4, 0x6e, 0x5c, 0x85, 0x93, 0xfc, 0xf3,
	0x23, 0x7b, 0x40, 0x0f, 0xed, 0xd9, 0x36, 0xf5, 0xdb, 0xa2, 0xcc, 0xb2, 0x8b, 0xf6, 0xc3, 0x93,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xea, 0x50, 0xf8, 0xd6, 0x02, 0x00, 0x00,
}

func (x RequestType) String() string {
	s, ok := RequestType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ResponseType) String() string {
	s, ok := ResponseType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&abbotgopb.Request{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&abbotgopb.Response{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	offset -= sovProto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func sovProto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= ResponseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProto = fmt.Errorf("proto: unexpected end of group")
)
