// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: driver_bridge.proto

package abbotgopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DriverBridge struct {
	Alias      string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	TxQueueLen int32  `protobuf:"varint,2,opt,name=tx_queue_len,json=txQueueLen,proto3" json:"tx_queue_len,omitempty"`
	Promisc    bool   `protobuf:"varint,3,opt,name=promisc,proto3" json:"promisc,omitempty"`
	// bridge options
	Hairpin      bool `protobuf:"varint,11,opt,name=hairpin,proto3" json:"hairpin,omitempty"`
	Guard        bool `protobuf:"varint,12,opt,name=guard,proto3" json:"guard,omitempty"`
	FastLeave    bool `protobuf:"varint,13,opt,name=fastLeave,proto3" json:"fastLeave,omitempty"`
	RootBlock    bool `protobuf:"varint,14,opt,name=root_block,json=rootBlock,proto3" json:"root_block,omitempty"`
	Learning     bool `protobuf:"varint,15,opt,name=learning,proto3" json:"learning,omitempty"`
	Flood        bool `protobuf:"varint,16,opt,name=flood,proto3" json:"flood,omitempty"`
	ProxyArp     bool `protobuf:"varint,17,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	ProxyArpWifi bool `protobuf:"varint,18,opt,name=proxy_arp_wifi,json=proxyArpWifi,proto3" json:"proxy_arp_wifi,omitempty"`
}

func (m *DriverBridge) Reset()      { *m = DriverBridge{} }
func (*DriverBridge) ProtoMessage() {}
func (*DriverBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_9822f4d046d89679, []int{0}
}
func (m *DriverBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverBridge.Merge(m, src)
}
func (m *DriverBridge) XXX_Size() int {
	return m.Size()
}
func (m *DriverBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverBridge.DiscardUnknown(m)
}

var xxx_messageInfo_DriverBridge proto.InternalMessageInfo

func (m *DriverBridge) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *DriverBridge) GetTxQueueLen() int32 {
	if m != nil {
		return m.TxQueueLen
	}
	return 0
}

func (m *DriverBridge) GetPromisc() bool {
	if m != nil {
		return m.Promisc
	}
	return false
}

func (m *DriverBridge) GetHairpin() bool {
	if m != nil {
		return m.Hairpin
	}
	return false
}

func (m *DriverBridge) GetGuard() bool {
	if m != nil {
		return m.Guard
	}
	return false
}

func (m *DriverBridge) GetFastLeave() bool {
	if m != nil {
		return m.FastLeave
	}
	return false
}

func (m *DriverBridge) GetRootBlock() bool {
	if m != nil {
		return m.RootBlock
	}
	return false
}

func (m *DriverBridge) GetLearning() bool {
	if m != nil {
		return m.Learning
	}
	return false
}

func (m *DriverBridge) GetFlood() bool {
	if m != nil {
		return m.Flood
	}
	return false
}

func (m *DriverBridge) GetProxyArp() bool {
	if m != nil {
		return m.ProxyArp
	}
	return false
}

func (m *DriverBridge) GetProxyArpWifi() bool {
	if m != nil {
		return m.ProxyArpWifi
	}
	return false
}

func init() {
	proto.RegisterType((*DriverBridge)(nil), "abbot.DriverBridge")
}

func init() { proto.RegisterFile("driver_bridge.proto", fileDescriptor_9822f4d046d89679) }

var fileDescriptor_9822f4d046d89679 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xbd, 0x4e, 0xeb, 0x30,
	0x14, 0x80, 0xe3, 0x5e, 0xf5, 0xde, 0xd6, 0x37, 0xb7, 0x17, 0x0c, 0x83, 0xc5, 0x8f, 0x89, 0x10,
	0x43, 0x17, 0xca, 0xc0, 0x13, 0x50, 0x31, 0x76, 0xa1, 0x12, 0x42, 0x62, 0x89, 0x9c, 0xc6, 0x49,
	0x2d, 0x42, 0x6c, 0x4e, 0xdd, 0x52, 0x36, 0x1e, 0x81, 0xc7, 0xe0, 0x39, 0x98, 0x18, 0x3b, 0x76,
	0xa4, 0xee, 0xc2, 0xd8, 0x47, 0x40, 0xb1, 0x69, 0xd9, 0xfc, 0x7d, 0xdf, 0xb1, 0xce, 0x70, 0xf0,
	0x4e, 0x0a, 0x72, 0x22, 0x20, 0x4e, 0x40, 0xa6, 0xb9, 0xe8, 0x68, 0x50, 0x46, 0x91, 0x3a, 0x4f,
	0x12, 0x65, 0x8e, 0xdf, 0x6a, 0x38, 0xbc, 0x74, 0xb9, 0xeb, 0x2a, 0xd9, 0xc5, 0x75, 0x5e, 0x48,
	0x3e, 0xa2, 0x28, 0x42, 0xed, 0x66, 0xdf, 0x03, 0x89, 0x70, 0x68, 0xa6, 0xf1, 0xc3, 0x58, 0x8c,
	0x45, 0x5c, 0x88, 0x92, 0xd6, 0x22, 0xd4, 0xae, 0xf7, 0xb1, 0x99, 0x5e, 0x55, 0xaa, 0x27, 0x4a,
	0x42, 0xf1, 0x1f, 0x0d, 0xea, 0x5e, 0x8e, 0x06, 0xf4, 0x57, 0x84, 0xda, 0x8d, 0xfe, 0x1a, 0xab,
	0x32, 0xe4, 0x12, 0xb4, 0x2c, 0xe9, 0x5f, 0x5f, 0xbe, 0xb1, 0xda, 0x95, 0x8f, 0x39, 0xa4, 0x34,
	0x74, 0xde, 0x03, 0x39, 0xc0, 0xcd, 0x8c, 0x8f, 0x4c, 0x4f, 0xf0, 0x89, 0xa0, 0xff, 0x5c, 0xf9,
	0x11, 0xe4, 0x10, 0x63, 0x50, 0xca, 0xc4, 0x49, 0xa1, 0x06, 0x77, 0xb4, 0xe5, 0x73, 0x65, 0xba,
	0x95, 0x20, 0x7b, 0xb8, 0x51, 0x08, 0x0e, 0xa5, 0x2c, 0x73, 0xfa, 0xdf, 0xc5, 0x0d, 0x57, 0xeb,
	0xb2, 0x42, 0xa9, 0x94, 0x6e, 0xf9, 0x75, 0x0e, 0xc8, 0x3e, 0x6e, 0x6a, 0x50, 0xd3, 0xa7, 0x98,
	0x83, 0xa6, 0xdb, 0xfe, 0x8b, 0x13, 0x17, 0xa0, 0xc9, 0x09, 0x6e, 0x6d, 0x62, 0xfc, 0x28, 0x33,
	0x49, 0x89, 0x9b, 0x08, 0xd7, 0x13, 0x37, 0x32, 0x93, 0xdd, 0xeb, 0xd9, 0x82, 0x05, 0xf3, 0x05,
	0x0b, 0x56, 0x0b, 0x86, 0x9e, 0x2d, 0x43, 0xaf, 0x96, 0xa1, 0x77, 0xcb, 0xd0, 0xcc, 0x32, 0xf4,
	0x61, 0x19, 0xfa, 0xb4, 0x2c, 0x58, 0x59, 0x86, 0x5e, 0x96, 0x2c, 0x98, 0x2d, 0x59, 0x30, 0x5f,
	0xb2, 0xe0, 0xf6, 0x88, 0xc3, 0x90, 0x9b, 0x4e, 0x2a, 0x26, 0x67, 0xee, 0x16, 0xa7, 0xee, 0x30,
	0xfe, 0x9d, 0x2b, 0x9d, 0x24, 0xbf, 0x9d, 0x38, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x91, 0xed,
	0x9c, 0x22, 0xc0, 0x01, 0x00, 0x00,
}

func (this *DriverBridge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DriverBridge)
	if !ok {
		that2, ok := that.(DriverBridge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Alias != that1.Alias {
		return false
	}
	if this.TxQueueLen != that1.TxQueueLen {
		return false
	}
	if this.Promisc != that1.Promisc {
		return false
	}
	if this.Hairpin != that1.Hairpin {
		return false
	}
	if this.Guard != that1.Guard {
		return false
	}
	if this.FastLeave != that1.FastLeave {
		return false
	}
	if this.RootBlock != that1.RootBlock {
		return false
	}
	if this.Learning != that1.Learning {
		return false
	}
	if this.Flood != that1.Flood {
		return false
	}
	if this.ProxyArp != that1.ProxyArp {
		return false
	}
	if this.ProxyArpWifi != that1.ProxyArpWifi {
		return false
	}
	return true
}
func (this *DriverBridge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&abbotgopb.DriverBridge{")
	s = append(s, "Alias: "+fmt.Sprintf("%#v", this.Alias)+",\n")
	s = append(s, "TxQueueLen: "+fmt.Sprintf("%#v", this.TxQueueLen)+",\n")
	s = append(s, "Promisc: "+fmt.Sprintf("%#v", this.Promisc)+",\n")
	s = append(s, "Hairpin: "+fmt.Sprintf("%#v", this.Hairpin)+",\n")
	s = append(s, "Guard: "+fmt.Sprintf("%#v", this.Guard)+",\n")
	s = append(s, "FastLeave: "+fmt.Sprintf("%#v", this.FastLeave)+",\n")
	s = append(s, "RootBlock: "+fmt.Sprintf("%#v", this.RootBlock)+",\n")
	s = append(s, "Learning: "+fmt.Sprintf("%#v", this.Learning)+",\n")
	s = append(s, "Flood: "+fmt.Sprintf("%#v", this.Flood)+",\n")
	s = append(s, "ProxyArp: "+fmt.Sprintf("%#v", this.ProxyArp)+",\n")
	s = append(s, "ProxyArpWifi: "+fmt.Sprintf("%#v", this.ProxyArpWifi)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDriverBridge(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DriverBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyArpWifi {
		i--
		if m.ProxyArpWifi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ProxyArp {
		i--
		if m.ProxyArp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Flood {
		i--
		if m.Flood {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Learning {
		i--
		if m.Learning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.RootBlock {
		i--
		if m.RootBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.FastLeave {
		i--
		if m.FastLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Guard {
		i--
		if m.Guard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Hairpin {
		i--
		if m.Hairpin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Promisc {
		i--
		if m.Promisc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TxQueueLen != 0 {
		i = encodeVarintDriverBridge(dAtA, i, uint64(m.TxQueueLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintDriverBridge(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDriverBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovDriverBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DriverBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovDriverBridge(uint64(l))
	}
	if m.TxQueueLen != 0 {
		n += 1 + sovDriverBridge(uint64(m.TxQueueLen))
	}
	if m.Promisc {
		n += 2
	}
	if m.Hairpin {
		n += 2
	}
	if m.Guard {
		n += 2
	}
	if m.FastLeave {
		n += 2
	}
	if m.RootBlock {
		n += 2
	}
	if m.Learning {
		n += 2
	}
	if m.Flood {
		n += 3
	}
	if m.ProxyArp {
		n += 3
	}
	if m.ProxyArpWifi {
		n += 3
	}
	return n
}

func sovDriverBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDriverBridge(x uint64) (n int) {
	return sovDriverBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DriverBridge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DriverBridge{`,
		`Alias:` + fmt.Sprintf("%v", this.Alias) + `,`,
		`TxQueueLen:` + fmt.Sprintf("%v", this.TxQueueLen) + `,`,
		`Promisc:` + fmt.Sprintf("%v", this.Promisc) + `,`,
		`Hairpin:` + fmt.Sprintf("%v", this.Hairpin) + `,`,
		`Guard:` + fmt.Sprintf("%v", this.Guard) + `,`,
		`FastLeave:` + fmt.Sprintf("%v", this.FastLeave) + `,`,
		`RootBlock:` + fmt.Sprintf("%v", this.RootBlock) + `,`,
		`Learning:` + fmt.Sprintf("%v", this.Learning) + `,`,
		`Flood:` + fmt.Sprintf("%v", this.Flood) + `,`,
		`ProxyArp:` + fmt.Sprintf("%v", this.ProxyArp) + `,`,
		`ProxyArpWifi:` + fmt.Sprintf("%v", this.ProxyArpWifi) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDriverBridge(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DriverBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriverBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDriverBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDriverBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxQueueLen", wireType)
			}
			m.TxQueueLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxQueueLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promisc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Promisc = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hairpin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hairpin = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guard = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FastLeave = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootBlock = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Learning = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flood", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flood = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyArp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProxyArp = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyArpWifi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProxyArpWifi = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDriverBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriverBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriverBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDriverBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDriverBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriverBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDriverBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDriverBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDriverBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDriverBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDriverBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDriverBridge = fmt.Errorf("proto: unexpected end of group")
)
