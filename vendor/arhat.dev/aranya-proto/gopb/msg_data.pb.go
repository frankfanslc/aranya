// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_data.proto

package gopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Data_Kind int32

const (
	DATA_OTHER  Data_Kind = 0
	DATA_STDOUT Data_Kind = 1
	DATA_STDERR Data_Kind = 2
	// if the kind is DATA_ERROR, then the data is the error message encoded in protobuf bytes
	DATA_ERROR Data_Kind = 3
)

var Data_Kind_name = map[int32]string{
	0: "DATA_OTHER",
	1: "DATA_STDOUT",
	2: "DATA_STDERR",
	3: "DATA_ERROR",
}

var Data_Kind_value = map[string]int32{
	"DATA_OTHER":  0,
	"DATA_STDOUT": 1,
	"DATA_STDERR": 2,
	"DATA_ERROR":  3,
}

func (Data_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e20a8e0d9745f61c, []int{0, 0}
}

type Data struct {
	// kind of the data
	Kind Data_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.Data_Kind" json:"kind,omitempty"`
	// data
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// data seqence in stream
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_e20a8e0d9745f61c, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKind() Data_Kind {
	if m != nil {
		return m.Kind
	}
	return DATA_OTHER
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterEnum("aranya.Data_Kind", Data_Kind_name, Data_Kind_value)
	proto.RegisterType((*Data)(nil), "aranya.Data")
}

func init() { proto.RegisterFile("msg_data.proto", fileDescriptor_e20a8e0d9745f61c) }

var fileDescriptor_e20a8e0d9745f61c = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2d, 0x4e, 0x8f,
	0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc,
	0xab, 0x4c, 0x54, 0x9a, 0xcb, 0xc8, 0xc5, 0xe2, 0x92, 0x58, 0x92, 0x28, 0xa4, 0xca, 0xc5, 0x92,
	0x9d, 0x99, 0x97, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xa8, 0x07, 0x91, 0xd7, 0x03,
	0xc9, 0xe9, 0x79, 0x67, 0xe6, 0xa5, 0x04, 0x81, 0xa5, 0x85, 0x84, 0xb8, 0x58, 0x40, 0xa6, 0x48,
	0x30, 0x29, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x42, 0x02, 0x5c, 0xcc, 0xc5, 0xa9, 0x85, 0x12,
	0xcc, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x20, 0xa6, 0x92, 0x07, 0x17, 0x0b, 0x48, 0x8f, 0x10, 0x1f,
	0x17, 0x97, 0x8b, 0x63, 0x88, 0x63, 0xbc, 0x7f, 0x88, 0x87, 0x6b, 0x90, 0x00, 0x83, 0x10, 0x3f,
	0x17, 0x37, 0x98, 0x1f, 0x1c, 0xe2, 0xe2, 0x1f, 0x1a, 0x22, 0xc0, 0x88, 0x2c, 0xe0, 0x1a, 0x14,
	0x24, 0xc0, 0x04, 0xd7, 0xe1, 0x1a, 0x14, 0xe4, 0x1f, 0x24, 0xc0, 0xec, 0x14, 0x78, 0xe1, 0xa1,
	0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1,
	0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c,
	0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63,
	0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3a, 0xb1, 0x28, 0x23, 0xb1, 0x44, 0x2f, 0x25, 0xb5, 0x4c,
	0x1f, 0xe2, 0x0f, 0x5d, 0xb0, 0xaf, 0xf5, 0xd3, 0xf3, 0x0b, 0x92, 0x92, 0xd8, 0xc0, 0x6c, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x2d, 0x59, 0x72, 0x13, 0x01, 0x00, 0x00,
}

func (x Data_Kind) String() string {
	s, ok := Data_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gopb.Data{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintMsgData(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMsgData(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintMsgData(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgData(uint64(m.Kind))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsgData(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovMsgData(uint64(m.Seq))
	}
	return n
}

func sovMsgData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgData(x uint64) (n int) {
	return sovMsgData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Data_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgData = fmt.Errorf("proto: unexpected end of group")
)
