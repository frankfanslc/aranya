// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_node.proto

package gopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeCmd_Action int32

const (
	_INVALID_NODE_ACTION NodeCmd_Action = 0
	// issue full info sync request in aranya
	GET_NODE_INFO_ALL NodeCmd_Action = 1
	// issue dynamic info sync request in aranya
	GET_NODE_INFO_DYN NodeCmd_Action = 2
	// start dynamic info sync loop in arhat
	START_NODE_SYNC_LOOP NodeCmd_Action = 3
)

var NodeCmd_Action_name = map[int32]string{
	0: "_INVALID_NODE_ACTION",
	1: "GET_NODE_INFO_ALL",
	2: "GET_NODE_INFO_DYN",
	3: "START_NODE_SYNC_LOOP",
}

var NodeCmd_Action_value = map[string]int32{
	"_INVALID_NODE_ACTION": 0,
	"GET_NODE_INFO_ALL":    1,
	"GET_NODE_INFO_DYN":    2,
	"START_NODE_SYNC_LOOP": 3,
}

func (NodeCmd_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c12429a7304d616c, []int{0, 0}
}

type NodeCmd struct {
	Action NodeCmd_Action `protobuf:"varint,1,opt,name=action,proto3,enum=aranya.NodeCmd_Action" json:"action,omitempty"`
	// Types that are valid to be assigned to Options:
	//	*NodeCmd_SyncOptions
	Options isNodeCmd_Options `protobuf_oneof:"options"`
}

func (m *NodeCmd) Reset()      { *m = NodeCmd{} }
func (*NodeCmd) ProtoMessage() {}
func (*NodeCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c12429a7304d616c, []int{0}
}
func (m *NodeCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCmd.Merge(m, src)
}
func (m *NodeCmd) XXX_Size() int {
	return m.Size()
}
func (m *NodeCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCmd.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCmd proto.InternalMessageInfo

type isNodeCmd_Options interface {
	isNodeCmd_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NodeCmd_SyncOptions struct {
	SyncOptions *SyncOptions `protobuf:"bytes,2,opt,name=sync_options,json=syncOptions,proto3,oneof" json:"sync_options,omitempty"`
}

func (*NodeCmd_SyncOptions) isNodeCmd_Options() {}

func (m *NodeCmd) GetOptions() isNodeCmd_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NodeCmd) GetAction() NodeCmd_Action {
	if m != nil {
		return m.Action
	}
	return _INVALID_NODE_ACTION
}

func (m *NodeCmd) GetSyncOptions() *SyncOptions {
	if x, ok := m.GetOptions().(*NodeCmd_SyncOptions); ok {
		return x.SyncOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeCmd_SyncOptions)(nil),
	}
}

func init() {
	proto.RegisterEnum("aranya.NodeCmd_Action", NodeCmd_Action_name, NodeCmd_Action_value)
	proto.RegisterType((*NodeCmd)(nil), "aranya.NodeCmd")
}

func init() { proto.RegisterFile("cmd_node.proto", fileDescriptor_c12429a7304d616c) }

var fileDescriptor_c12429a7304d616c = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0x4d, 0x89,
	0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc,
	0xab, 0x4c, 0x94, 0x02, 0x8b, 0xe7, 0x66, 0x16, 0x27, 0x43, 0xc4, 0x95, 0x5e, 0x31, 0x72, 0xb1,
	0xfb, 0xe5, 0xa7, 0xa4, 0x3a, 0xe7, 0xa6, 0x08, 0xe9, 0x71, 0xb1, 0x25, 0x26, 0x97, 0x64, 0xe6,
	0xe7, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x89, 0xe9, 0x41, 0x34, 0xe9, 0x41, 0x15, 0xe8,
	0x39, 0x82, 0x65, 0x83, 0xa0, 0xaa, 0x84, 0x2c, 0xb8, 0x78, 0x8a, 0x2b, 0xf3, 0x92, 0xe3, 0xf3,
	0x0b, 0x40, 0xdc, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x61, 0x98, 0xae, 0xe0, 0xca,
	0xbc, 0x64, 0x7f, 0x88, 0x94, 0x07, 0x43, 0x10, 0x77, 0x31, 0x82, 0xab, 0x94, 0xc5, 0xc5, 0x06,
	0x31, 0x4b, 0x48, 0x82, 0x4b, 0x24, 0xde, 0xd3, 0x2f, 0xcc, 0xd1, 0xc7, 0xd3, 0x25, 0xde, 0xcf,
	0xdf, 0xc5, 0x35, 0xde, 0xd1, 0x39, 0xc4, 0xd3, 0xdf, 0x4f, 0x80, 0x41, 0x48, 0x94, 0x4b, 0xd0,
	0xdd, 0x35, 0x04, 0x22, 0xe8, 0xe9, 0xe7, 0xe6, 0x1f, 0xef, 0xe8, 0xe3, 0x23, 0xc0, 0x88, 0x29,
	0xec, 0x12, 0xe9, 0x27, 0xc0, 0x04, 0x32, 0x27, 0x38, 0xc4, 0x31, 0x08, 0x2a, 0x11, 0x1c, 0xe9,
	0xe7, 0x1c, 0xef, 0xe3, 0xef, 0x1f, 0x20, 0xc0, 0xec, 0xc4, 0xc9, 0xc5, 0x0e, 0x75, 0xa0, 0x53,
	0xe0, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48,
	0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xe9, 0xc4, 0xa2, 0x8c, 0xc4, 0x12, 0xbd,
	0x94, 0xd4, 0x32, 0x7d, 0x88, 0xcf, 0x74, 0xc1, 0x41, 0xa7, 0x9f, 0x9e, 0x5f, 0x90, 0x94, 0xc4,
	0x06, 0x66, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x55, 0x5f, 0xfa, 0x92, 0x70, 0x01, 0x00,
	0x00,
}

func (x NodeCmd_Action) String() string {
	s, ok := NodeCmd_Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NodeCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeCmd)
	if !ok {
		that2, ok := that.(NodeCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *NodeCmd_SyncOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeCmd_SyncOptions)
	if !ok {
		that2, ok := that.(NodeCmd_SyncOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncOptions.Equal(that1.SyncOptions) {
		return false
	}
	return true
}
func (this *NodeCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gopb.NodeCmd{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeCmd_SyncOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&gopb.NodeCmd_SyncOptions{` +
		`SyncOptions:` + fmt.Sprintf("%#v", this.SyncOptions) + `}`}, ", ")
	return s
}
func valueToGoStringCmdNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != 0 {
		i = encodeVarintCmdNode(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeCmd_SyncOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeCmd_SyncOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncOptions != nil {
		{
			size, err := m.SyncOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintCmdNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovCmdNode(uint64(m.Action))
	}
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *NodeCmd_SyncOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncOptions != nil {
		l = m.SyncOptions.Size()
		n += 1 + l + sovCmdNode(uint64(l))
	}
	return n
}

func sovCmdNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdNode(x uint64) (n int) {
	return sovCmdNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeCmd{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeCmd_SyncOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeCmd_SyncOptions{`,
		`SyncOptions:` + strings.Replace(fmt.Sprintf("%v", this.SyncOptions), "SyncOptions", "SyncOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= NodeCmd_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &NodeCmd_SyncOptions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdNode = fmt.Errorf("proto: unexpected end of group")
)
