// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_device.proto

// +build !nodev

package gopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceCmd_Action int32

const (
	_INVALID_DEVICE_ACTION DeviceCmd_Action = 0
	LIST_DEVICES           DeviceCmd_Action = 1
	ENSURE_DEVICE          DeviceCmd_Action = 2
	REMOVE_DEVICE          DeviceCmd_Action = 3
)

var DeviceCmd_Action_name = map[int32]string{
	0: "_INVALID_DEVICE_ACTION",
	1: "LIST_DEVICES",
	2: "ENSURE_DEVICE",
	3: "REMOVE_DEVICE",
}

var DeviceCmd_Action_value = map[string]int32{
	"_INVALID_DEVICE_ACTION": 0,
	"LIST_DEVICES":           1,
	"ENSURE_DEVICE":          2,
	"REMOVE_DEVICE":          3,
}

func (DeviceCmd_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{0, 0}
}

type DeviceConnectivity_Mode int32

const (
	DEVICE_CONNECTIVITY_MODE_CLIENT DeviceConnectivity_Mode = 0
	DEVICE_CONNECTIVITY_MODE_SERVER DeviceConnectivity_Mode = 1
)

var DeviceConnectivity_Mode_name = map[int32]string{
	0: "DEVICE_CONNECTIVITY_MODE_CLIENT",
	1: "DEVICE_CONNECTIVITY_MODE_SERVER",
}

var DeviceConnectivity_Mode_value = map[string]int32{
	"DEVICE_CONNECTIVITY_MODE_CLIENT": 0,
	"DEVICE_CONNECTIVITY_MODE_SERVER": 1,
}

func (DeviceConnectivity_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{2, 0}
}

type DeviceMetrics_DeviceMetricsUploadMethod int32

const (
	UPLOAD_WITH_NODE_METRICS       DeviceMetrics_DeviceMetricsUploadMethod = 0
	UPLOAD_WITH_ARHAT_CONNECTIVITY DeviceMetrics_DeviceMetricsUploadMethod = 1
	UPLOAD_WITH_STANDALONE_CLIENT  DeviceMetrics_DeviceMetricsUploadMethod = 2
)

var DeviceMetrics_DeviceMetricsUploadMethod_name = map[int32]string{
	0: "UPLOAD_WITH_NODE_METRICS",
	1: "UPLOAD_WITH_ARHAT_CONNECTIVITY",
	2: "UPLOAD_WITH_STANDALONE_CLIENT",
}

var DeviceMetrics_DeviceMetricsUploadMethod_value = map[string]int32{
	"UPLOAD_WITH_NODE_METRICS":       0,
	"UPLOAD_WITH_ARHAT_CONNECTIVITY": 1,
	"UPLOAD_WITH_STANDALONE_CLIENT":  2,
}

func (DeviceMetrics_DeviceMetricsUploadMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{5, 0}
}

type DeviceCmd struct {
	Action DeviceCmd_Action `protobuf:"varint,1,opt,name=action,proto3,enum=aranya.DeviceCmd_Action" json:"action,omitempty"`
	// Types that are valid to be assigned to Options:
	//	*DeviceCmd_DeviceId
	//	*DeviceCmd_DeviceSpec
	Options isDeviceCmd_Options `protobuf_oneof:"options"`
}

func (m *DeviceCmd) Reset()      { *m = DeviceCmd{} }
func (*DeviceCmd) ProtoMessage() {}
func (*DeviceCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{0}
}
func (m *DeviceCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCmd.Merge(m, src)
}
func (m *DeviceCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCmd proto.InternalMessageInfo

type isDeviceCmd_Options interface {
	isDeviceCmd_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DeviceCmd_DeviceId struct {
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
}
type DeviceCmd_DeviceSpec struct {
	DeviceSpec *Device `protobuf:"bytes,3,opt,name=device_spec,json=deviceSpec,proto3,oneof" json:"device_spec,omitempty"`
}

func (*DeviceCmd_DeviceId) isDeviceCmd_Options()   {}
func (*DeviceCmd_DeviceSpec) isDeviceCmd_Options() {}

func (m *DeviceCmd) GetOptions() isDeviceCmd_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *DeviceCmd) GetAction() DeviceCmd_Action {
	if m != nil {
		return m.Action
	}
	return _INVALID_DEVICE_ACTION
}

func (m *DeviceCmd) GetDeviceId() string {
	if x, ok := m.GetOptions().(*DeviceCmd_DeviceId); ok {
		return x.DeviceId
	}
	return ""
}

func (m *DeviceCmd) GetDeviceSpec() *Device {
	if x, ok := m.GetOptions().(*DeviceCmd_DeviceSpec); ok {
		return x.DeviceSpec
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeviceCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeviceCmd_DeviceId)(nil),
		(*DeviceCmd_DeviceSpec)(nil),
	}
}

type Device struct {
	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Connectivity       *DeviceConnectivity `protobuf:"bytes,2,opt,name=connectivity,proto3" json:"connectivity,omitempty"`
	Operations         []*DeviceOperation  `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	Metrics            []*DeviceMetrics    `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	UploadConnectivity *DeviceConnectivity `protobuf:"bytes,5,opt,name=upload_connectivity,json=uploadConnectivity,proto3" json:"upload_connectivity,omitempty"`
}

func (m *Device) Reset()      { *m = Device{} }
func (*Device) ProtoMessage() {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetConnectivity() *DeviceConnectivity {
	if m != nil {
		return m.Connectivity
	}
	return nil
}

func (m *Device) GetOperations() []*DeviceOperation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *Device) GetMetrics() []*DeviceMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Device) GetUploadConnectivity() *DeviceConnectivity {
	if m != nil {
		return m.UploadConnectivity
	}
	return nil
}

type DeviceConnectivity struct {
	Transport string                       `protobuf:"bytes,1,opt,name=transport,proto3" json:"transport,omitempty"`
	Mode      DeviceConnectivity_Mode      `protobuf:"varint,2,opt,name=mode,proto3,enum=aranya.DeviceConnectivity_Mode" json:"mode,omitempty"`
	Target    string                       `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Params    map[string]string            `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tls       *DeviceConnectivityTLSConfig `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (m *DeviceConnectivity) Reset()      { *m = DeviceConnectivity{} }
func (*DeviceConnectivity) ProtoMessage() {}
func (*DeviceConnectivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{2}
}
func (m *DeviceConnectivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnectivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnectivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnectivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnectivity.Merge(m, src)
}
func (m *DeviceConnectivity) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnectivity) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnectivity.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnectivity proto.InternalMessageInfo

func (m *DeviceConnectivity) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *DeviceConnectivity) GetMode() DeviceConnectivity_Mode {
	if m != nil {
		return m.Mode
	}
	return DEVICE_CONNECTIVITY_MODE_CLIENT
}

func (m *DeviceConnectivity) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DeviceConnectivity) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *DeviceConnectivity) GetTls() *DeviceConnectivityTLSConfig {
	if m != nil {
		return m.Tls
	}
	return nil
}

type DeviceConnectivityTLSConfig struct {
	CaCert []byte `protobuf:"bytes,1,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Cert   []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key    []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeviceConnectivityTLSConfig) Reset()      { *m = DeviceConnectivityTLSConfig{} }
func (*DeviceConnectivityTLSConfig) ProtoMessage() {}
func (*DeviceConnectivityTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{3}
}
func (m *DeviceConnectivityTLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnectivityTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnectivityTLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnectivityTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnectivityTLSConfig.Merge(m, src)
}
func (m *DeviceConnectivityTLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnectivityTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnectivityTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnectivityTLSConfig proto.InternalMessageInfo

func (m *DeviceConnectivityTLSConfig) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *DeviceConnectivityTLSConfig) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *DeviceConnectivityTLSConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeviceOperation struct {
	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransportParams map[string]string `protobuf:"bytes,2,rep,name=transport_params,json=transportParams,proto3" json:"transport_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceOperation) Reset()      { *m = DeviceOperation{} }
func (*DeviceOperation) ProtoMessage() {}
func (*DeviceOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{4}
}
func (m *DeviceOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperation.Merge(m, src)
}
func (m *DeviceOperation) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperation proto.InternalMessageInfo

func (m *DeviceOperation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceOperation) GetTransportParams() map[string]string {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

type DeviceMetrics struct {
	Id              string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransportParams map[string]string                       `protobuf:"bytes,2,rep,name=transport_params,json=transportParams,proto3" json:"transport_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UploadMethod    DeviceMetrics_DeviceMetricsUploadMethod `protobuf:"varint,3,opt,name=upload_method,json=uploadMethod,proto3,enum=aranya.DeviceMetrics_DeviceMetricsUploadMethod" json:"upload_method,omitempty"`
	UploadParams    map[string]string                       `protobuf:"bytes,4,rep,name=upload_params,json=uploadParams,proto3" json:"upload_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceMetrics) Reset()      { *m = DeviceMetrics{} }
func (*DeviceMetrics) ProtoMessage() {}
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{5}
}
func (m *DeviceMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetrics.Merge(m, src)
}
func (m *DeviceMetrics) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetrics proto.InternalMessageInfo

func (m *DeviceMetrics) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceMetrics) GetTransportParams() map[string]string {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

func (m *DeviceMetrics) GetUploadMethod() DeviceMetrics_DeviceMetricsUploadMethod {
	if m != nil {
		return m.UploadMethod
	}
	return UPLOAD_WITH_NODE_METRICS
}

func (m *DeviceMetrics) GetUploadParams() map[string]string {
	if m != nil {
		return m.UploadParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.DeviceCmd_Action", DeviceCmd_Action_name, DeviceCmd_Action_value)
	proto.RegisterEnum("aranya.DeviceConnectivity_Mode", DeviceConnectivity_Mode_name, DeviceConnectivity_Mode_value)
	proto.RegisterEnum("aranya.DeviceMetrics_DeviceMetricsUploadMethod", DeviceMetrics_DeviceMetricsUploadMethod_name, DeviceMetrics_DeviceMetricsUploadMethod_value)
	proto.RegisterType((*DeviceCmd)(nil), "aranya.DeviceCmd")
	proto.RegisterType((*Device)(nil), "aranya.Device")
	proto.RegisterType((*DeviceConnectivity)(nil), "aranya.DeviceConnectivity")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceConnectivity.ParamsEntry")
	proto.RegisterType((*DeviceConnectivityTLSConfig)(nil), "aranya.DeviceConnectivityTLSConfig")
	proto.RegisterType((*DeviceOperation)(nil), "aranya.DeviceOperation")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceOperation.TransportParamsEntry")
	proto.RegisterType((*DeviceMetrics)(nil), "aranya.DeviceMetrics")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetrics.TransportParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetrics.UploadParamsEntry")
}

func init() { proto.RegisterFile("cmd_device.proto", fileDescriptor_9e38e886ce453fd3) }

var fileDescriptor_9e38e886ce453fd3 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0xf6, 0xd8, 0xa9, 0x17, 0xbf, 0xc9, 0xa6, 0xee, 0x50, 0xda, 0x90, 0xb6, 0x6e, 0x70, 0x25,
	0x88, 0x10, 0x24, 0x90, 0x0a, 0xf1, 0x71, 0x28, 0xf2, 0x3a, 0x96, 0x62, 0x91, 0x38, 0xcb, 0xd8,
	0x49, 0x05, 0xaa, 0x64, 0xb9, 0xb6, 0xd9, 0x5a, 0x6c, 0x62, 0xcb, 0xf1, 0x46, 0xca, 0xad, 0x12,
	0x3f, 0x00, 0x7e, 0x03, 0x27, 0x7e, 0x05, 0x67, 0x8e, 0x7b, 0xec, 0x91, 0xcd, 0x5e, 0x38, 0xf6,
	0xc8, 0x11, 0x65, 0xec, 0x04, 0xbb, 0x49, 0x16, 0x2a, 0xf5, 0x36, 0xf3, 0xbc, 0xcf, 0xfb, 0xcc,
	0xfb, 0xa9, 0x01, 0xd1, 0x9d, 0x78, 0xb6, 0xe7, 0xcf, 0x03, 0xd7, 0x6f, 0x45, 0x71, 0x98, 0x84,
	0x98, 0x77, 0x62, 0x67, 0xba, 0x70, 0xe4, 0xbf, 0x11, 0x08, 0x5d, 0x6a, 0x50, 0x27, 0x1e, 0xfe,
	0x04, 0x78, 0xc7, 0x4d, 0x82, 0x70, 0x5a, 0x43, 0x0d, 0xd4, 0xac, 0x76, 0x6a, 0xad, 0x94, 0xd6,
	0xda, 0x50, 0x5a, 0x0a, 0xb5, 0x93, 0x8c, 0x87, 0xef, 0x81, 0x90, 0xea, 0xda, 0x81, 0x57, 0x63,
	0x1b, 0xa8, 0x29, 0xf4, 0x18, 0xf2, 0x56, 0x0a, 0xe9, 0x1e, 0xfe, 0x14, 0xca, 0x99, 0x79, 0x16,
	0xf9, 0x6e, 0x8d, 0x6b, 0xa0, 0x66, 0xb9, 0x53, 0x2d, 0xaa, 0xf6, 0x18, 0x02, 0x29, 0xc9, 0x8c,
	0x7c, 0x57, 0x7e, 0x02, 0x7c, 0xfa, 0x06, 0xae, 0xc3, 0x2d, 0x5b, 0x37, 0xc6, 0x4a, 0x5f, 0xef,
	0xda, 0x5d, 0x6d, 0xac, 0xab, 0x9a, 0xad, 0xa8, 0x96, 0x3e, 0x34, 0x44, 0x06, 0x8b, 0x50, 0xe9,
	0xeb, 0xa6, 0x95, 0xe1, 0xa6, 0x88, 0xf0, 0x0d, 0x38, 0xd4, 0x0c, 0x73, 0x44, 0xb4, 0x0c, 0x13,
	0xd9, 0x15, 0x44, 0xb4, 0xc1, 0x70, 0xbc, 0x81, 0xb8, 0x23, 0x01, 0x0e, 0xc2, 0x68, 0xa5, 0x3e,
	0x93, 0x7f, 0x66, 0x81, 0x4f, 0x23, 0xc0, 0x55, 0x60, 0x03, 0x8f, 0xe6, 0x2c, 0x10, 0x36, 0xf0,
	0xf0, 0x23, 0xa8, 0xb8, 0xe1, 0x74, 0xea, 0xbb, 0x49, 0x30, 0x0f, 0x92, 0x05, 0x4d, 0xac, 0xdc,
	0xa9, 0xbf, 0x52, 0x8d, 0x1c, 0x83, 0x14, 0xf8, 0xf8, 0x73, 0x80, 0x30, 0xf2, 0x63, 0x87, 0x3e,
	0x54, 0xe3, 0x1a, 0x5c, 0xb3, 0xdc, 0xb9, 0x5d, 0xf4, 0x1e, 0xae, 0xed, 0x24, 0x47, 0xc5, 0x6d,
	0x38, 0x98, 0xf8, 0x49, 0x1c, 0xb8, 0xb3, 0x5a, 0x89, 0x7a, 0xbd, 0x53, 0xf4, 0x1a, 0xa4, 0x46,
	0xb2, 0x66, 0xe1, 0x6f, 0xe0, 0xed, 0xb3, 0xe8, 0x34, 0x74, 0x3c, 0xbb, 0x10, 0xf0, 0xb5, 0xff,
	0x0c, 0x18, 0xa7, 0x6e, 0x79, 0x4c, 0xfe, 0x89, 0x03, 0xbc, 0x4d, 0xc5, 0x77, 0x41, 0x48, 0x62,
	0x67, 0x3a, 0x8b, 0xc2, 0x38, 0xc9, 0x8a, 0xf4, 0x2f, 0x80, 0x1f, 0x42, 0x69, 0x12, 0x7a, 0x3e,
	0xad, 0x51, 0xb5, 0x73, 0x7f, 0xff, 0x93, 0xad, 0x41, 0xe8, 0xf9, 0x84, 0x92, 0xf1, 0x2d, 0xe0,
	0x13, 0x27, 0x3e, 0xf1, 0x13, 0x3a, 0x12, 0x02, 0xc9, 0x6e, 0xf8, 0x11, 0xf0, 0x91, 0x13, 0x3b,
	0x93, 0x75, 0xfa, 0xef, 0x5f, 0x21, 0x77, 0x4c, 0x89, 0xda, 0x34, 0x89, 0x17, 0x24, 0xf3, 0xc2,
	0x9f, 0x01, 0x97, 0x9c, 0xce, 0xb2, 0xf4, 0x1f, 0xec, 0x77, 0xb6, 0xfa, 0xa6, 0x1a, 0x4e, 0x7f,
	0x08, 0x4e, 0xc8, 0x8a, 0x5f, 0xff, 0x12, 0xca, 0x39, 0x35, 0x2c, 0x02, 0xf7, 0xa3, 0xbf, 0xc8,
	0x52, 0x5d, 0x1d, 0xf1, 0x4d, 0xb8, 0x36, 0x77, 0x4e, 0xcf, 0xd2, 0x2c, 0x05, 0x92, 0x5e, 0xbe,
	0x62, 0xbf, 0x40, 0xf2, 0x31, 0x94, 0x56, 0x79, 0xe1, 0x07, 0x70, 0x3f, 0x9b, 0x51, 0x75, 0x68,
	0x18, 0x9a, 0x6a, 0xe9, 0x63, 0xdd, 0xfa, 0xce, 0x1e, 0x0c, 0xbb, 0x9a, 0xad, 0xf6, 0x75, 0xcd,
	0xb0, 0x44, 0xe6, 0x4a, 0x92, 0xa9, 0x91, 0xb1, 0x46, 0x44, 0x24, 0x3f, 0x81, 0x3b, 0x57, 0x04,
	0x8c, 0x6f, 0xc3, 0x81, 0xeb, 0xd8, 0xae, 0x9f, 0xf5, 0xa2, 0x42, 0x78, 0xd7, 0x51, 0xfd, 0x38,
	0xc1, 0x18, 0x4a, 0x14, 0x65, 0x29, 0x4a, 0xcf, 0xeb, 0x4c, 0x38, 0x0a, 0xad, 0x8e, 0xf2, 0xef,
	0x08, 0xae, 0xbf, 0x32, 0x81, 0x5b, 0xe3, 0xff, 0x18, 0xc4, 0x4d, 0x7f, 0xed, 0xac, 0x1f, 0x2c,
	0xed, 0xc7, 0x47, 0x7b, 0x86, 0xb8, 0x65, 0xad, 0xf9, 0xf9, 0xae, 0x5c, 0x4f, 0x8a, 0x68, 0xfd,
	0x08, 0x6e, 0xee, 0x22, 0xbe, 0x56, 0xc1, 0x7f, 0x2d, 0xc1, 0x61, 0x61, 0x19, 0xb6, 0xc2, 0x1f,
	0xed, 0x0d, 0xff, 0xc3, 0x9d, 0xdb, 0xf4, 0xff, 0x82, 0xc7, 0x16, 0x1c, 0x66, 0xab, 0x36, 0xf1,
	0x93, 0x67, 0xa1, 0x47, 0xab, 0x5a, 0xed, 0xb4, 0x77, 0x6b, 0x16, 0x6e, 0x23, 0xea, 0x37, 0xa0,
	0x6e, 0xa4, 0x72, 0x96, 0xbb, 0xe1, 0xfe, 0x46, 0xb5, 0x30, 0xf8, 0x1f, 0xec, 0x56, 0x4d, 0x85,
	0xf2, 0x61, 0x66, 0x6a, 0x6f, 0xae, 0xc0, 0xf5, 0xaf, 0xe1, 0xc6, 0xd6, 0x33, 0xaf, 0xd5, 0xa1,
	0xe7, 0x08, 0xde, 0xdd, 0x9b, 0x3e, 0xbe, 0x0b, 0xb5, 0xd1, 0x71, 0x7f, 0xa8, 0x74, 0xed, 0xc7,
	0xba, 0xd5, 0xb3, 0x8d, 0xd5, 0xec, 0x0f, 0x34, 0x8b, 0xe8, 0xaa, 0x29, 0x32, 0x58, 0x06, 0x29,
	0x6f, 0x55, 0x48, 0x4f, 0xb1, 0x0a, 0xcb, 0x22, 0x22, 0xfc, 0x1e, 0xdc, 0xcb, 0x73, 0x4c, 0x4b,
	0x31, 0xba, 0x4a, 0x7f, 0x68, 0x6c, 0x16, 0x8d, 0x3d, 0xfa, 0xf6, 0xfc, 0x42, 0x62, 0x5e, 0x5c,
	0x48, 0xcc, 0xcb, 0x0b, 0x09, 0x3d, 0x5f, 0x4a, 0xe8, 0xb7, 0xa5, 0x84, 0xfe, 0x58, 0x4a, 0xe8,
	0x7c, 0x29, 0xa1, 0x3f, 0x97, 0x12, 0xfa, 0x6b, 0x29, 0x31, 0x2f, 0x97, 0x12, 0xfa, 0xe5, 0x52,
	0x62, 0xce, 0x2f, 0x25, 0xe6, 0xc5, 0xa5, 0xc4, 0x7c, 0x7f, 0xc7, 0x89, 0x9f, 0x39, 0x49, 0xcb,
	0xf3, 0xe7, 0xed, 0xb4, 0xfa, 0x1f, 0xd3, 0xcf, 0xb2, 0x7d, 0x12, 0x46, 0x4f, 0x9f, 0xf2, 0xf4,
	0xfc, 0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x33, 0x3a, 0xdb, 0x4c, 0x07, 0x00, 0x00,
}

func (x DeviceCmd_Action) String() string {
	s, ok := DeviceCmd_Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceConnectivity_Mode) String() string {
	s, ok := DeviceConnectivity_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceMetrics_DeviceMetricsUploadMethod) String() string {
	s, ok := DeviceMetrics_DeviceMetricsUploadMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeviceCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCmd)
	if !ok {
		that2, ok := that.(DeviceCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *DeviceCmd_DeviceId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCmd_DeviceId)
	if !ok {
		that2, ok := that.(DeviceCmd_DeviceId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *DeviceCmd_DeviceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCmd_DeviceSpec)
	if !ok {
		that2, ok := that.(DeviceCmd_DeviceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceSpec.Equal(that1.DeviceSpec) {
		return false
	}
	return true
}
func (this *Device) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Connectivity.Equal(that1.Connectivity) {
		return false
	}
	if len(this.Operations) != len(that1.Operations) {
		return false
	}
	for i := range this.Operations {
		if !this.Operations[i].Equal(that1.Operations[i]) {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if !this.UploadConnectivity.Equal(that1.UploadConnectivity) {
		return false
	}
	return true
}
func (this *DeviceConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnectivity)
	if !ok {
		that2, ok := that.(DeviceConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Transport != that1.Transport {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *DeviceConnectivityTLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnectivityTLSConfig)
	if !ok {
		that2, ok := that.(DeviceConnectivityTLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.CaCert, that1.CaCert) {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *DeviceOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperation)
	if !ok {
		that2, ok := that.(DeviceOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.TransportParams) != len(that1.TransportParams) {
		return false
	}
	for i := range this.TransportParams {
		if this.TransportParams[i] != that1.TransportParams[i] {
			return false
		}
	}
	return true
}
func (this *DeviceMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetrics)
	if !ok {
		that2, ok := that.(DeviceMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.TransportParams) != len(that1.TransportParams) {
		return false
	}
	for i := range this.TransportParams {
		if this.TransportParams[i] != that1.TransportParams[i] {
			return false
		}
	}
	if this.UploadMethod != that1.UploadMethod {
		return false
	}
	if len(this.UploadParams) != len(that1.UploadParams) {
		return false
	}
	for i := range this.UploadParams {
		if this.UploadParams[i] != that1.UploadParams[i] {
			return false
		}
	}
	return true
}
func (this *DeviceCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gopb.DeviceCmd{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceCmd_DeviceId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&gopb.DeviceCmd_DeviceId{` +
		`DeviceId:` + fmt.Sprintf("%#v", this.DeviceId) + `}`}, ", ")
	return s
}
func (this *DeviceCmd_DeviceSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&gopb.DeviceCmd_DeviceSpec{` +
		`DeviceSpec:` + fmt.Sprintf("%#v", this.DeviceSpec) + `}`}, ", ")
	return s
}
func (this *Device) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gopb.Device{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Connectivity != nil {
		s = append(s, "Connectivity: "+fmt.Sprintf("%#v", this.Connectivity)+",\n")
	}
	if this.Operations != nil {
		s = append(s, "Operations: "+fmt.Sprintf("%#v", this.Operations)+",\n")
	}
	if this.Metrics != nil {
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	}
	if this.UploadConnectivity != nil {
		s = append(s, "UploadConnectivity: "+fmt.Sprintf("%#v", this.UploadConnectivity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gopb.DeviceConnectivity{")
	s = append(s, "Transport: "+fmt.Sprintf("%#v", this.Transport)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnectivityTLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gopb.DeviceConnectivityTLSConfig{")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gopb.DeviceOperation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%#v: %#v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	if this.TransportParams != nil {
		s = append(s, "TransportParams: "+mapStringForTransportParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetrics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gopb.DeviceMetrics{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%#v: %#v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	if this.TransportParams != nil {
		s = append(s, "TransportParams: "+mapStringForTransportParams+",\n")
	}
	s = append(s, "UploadMethod: "+fmt.Sprintf("%#v", this.UploadMethod)+",\n")
	keysForUploadParams := make([]string, 0, len(this.UploadParams))
	for k, _ := range this.UploadParams {
		keysForUploadParams = append(keysForUploadParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUploadParams)
	mapStringForUploadParams := "map[string]string{"
	for _, k := range keysForUploadParams {
		mapStringForUploadParams += fmt.Sprintf("%#v: %#v,", k, this.UploadParams[k])
	}
	mapStringForUploadParams += "}"
	if this.UploadParams != nil {
		s = append(s, "UploadParams: "+mapStringForUploadParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeviceCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceCmd_DeviceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCmd_DeviceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DeviceId)
	copy(dAtA[i:], m.DeviceId)
	i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *DeviceCmd_DeviceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCmd_DeviceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceSpec != nil {
		{
			size, err := m.DeviceSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UploadConnectivity != nil {
		{
			size, err := m.UploadConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Connectivity != nil {
		{
			size, err := m.Connectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnectivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mode != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnectivityTLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnectivityTLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnectivityTLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransportParams) > 0 {
		for k := range m.TransportParams {
			v := m.TransportParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UploadParams) > 0 {
		for k := range m.UploadParams {
			v := m.UploadParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UploadMethod != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.UploadMethod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransportParams) > 0 {
		for k := range m.TransportParams {
			v := m.TransportParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovCmdDevice(uint64(m.Action))
	}
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *DeviceCmd_DeviceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	n += 1 + l + sovCmdDevice(uint64(l))
	return n
}
func (m *DeviceCmd_DeviceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceSpec != nil {
		l = m.DeviceSpec.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}
func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.Connectivity != nil {
		l = m.Connectivity.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	if m.UploadConnectivity != nil {
		l = m.UploadConnectivity.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transport)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovCmdDevice(uint64(m.Mode))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceConnectivityTLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.TransportParams) > 0 {
		for k, v := range m.TransportParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.TransportParams) > 0 {
		for k, v := range m.TransportParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	if m.UploadMethod != 0 {
		n += 1 + sovCmdDevice(uint64(m.UploadMethod))
	}
	if len(m.UploadParams) > 0 {
		for k, v := range m.UploadParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCmdDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdDevice(x uint64) (n int) {
	return sovCmdDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCmd{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceCmd_DeviceId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCmd_DeviceId{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceCmd_DeviceSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCmd_DeviceSpec{`,
		`DeviceSpec:` + strings.Replace(fmt.Sprintf("%v", this.DeviceSpec), "Device", "Device", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Device) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOperations := "[]*DeviceOperation{"
	for _, f := range this.Operations {
		repeatedStringForOperations += strings.Replace(f.String(), "DeviceOperation", "DeviceOperation", 1) + ","
	}
	repeatedStringForOperations += "}"
	repeatedStringForMetrics := "[]*DeviceMetrics{"
	for _, f := range this.Metrics {
		repeatedStringForMetrics += strings.Replace(f.String(), "DeviceMetrics", "DeviceMetrics", 1) + ","
	}
	repeatedStringForMetrics += "}"
	s := strings.Join([]string{`&Device{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Connectivity:` + strings.Replace(this.Connectivity.String(), "DeviceConnectivity", "DeviceConnectivity", 1) + `,`,
		`Operations:` + repeatedStringForOperations + `,`,
		`Metrics:` + repeatedStringForMetrics + `,`,
		`UploadConnectivity:` + strings.Replace(this.UploadConnectivity.String(), "DeviceConnectivity", "DeviceConnectivity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceConnectivity{`,
		`Transport:` + fmt.Sprintf("%v", this.Transport) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Tls:` + strings.Replace(this.Tls.String(), "DeviceConnectivityTLSConfig", "DeviceConnectivityTLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnectivityTLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceConnectivityTLSConfig{`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceOperation) String() string {
	if this == nil {
		return "nil"
	}
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%v: %v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	s := strings.Join([]string{`&DeviceOperation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TransportParams:` + mapStringForTransportParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetrics) String() string {
	if this == nil {
		return "nil"
	}
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%v: %v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	keysForUploadParams := make([]string, 0, len(this.UploadParams))
	for k, _ := range this.UploadParams {
		keysForUploadParams = append(keysForUploadParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUploadParams)
	mapStringForUploadParams := "map[string]string{"
	for _, k := range keysForUploadParams {
		mapStringForUploadParams += fmt.Sprintf("%v: %v,", k, this.UploadParams[k])
	}
	mapStringForUploadParams += "}"
	s := strings.Join([]string{`&DeviceMetrics{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TransportParams:` + mapStringForTransportParams + `,`,
		`UploadMethod:` + fmt.Sprintf("%v", this.UploadMethod) + `,`,
		`UploadParams:` + mapStringForUploadParams + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= DeviceCmd_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = &DeviceCmd_DeviceId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Device{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &DeviceCmd_DeviceSpec{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connectivity == nil {
				m.Connectivity = &DeviceConnectivity{}
			}
			if err := m.Connectivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &DeviceOperation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &DeviceMetrics{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadConnectivity == nil {
				m.UploadConnectivity = &DeviceConnectivity{}
			}
			if err := m.UploadConnectivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnectivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnectivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnectivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= DeviceConnectivity_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &DeviceConnectivityTLSConfig{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnectivityTLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnectivityTLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnectivityTLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransportParams == nil {
				m.TransportParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransportParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransportParams == nil {
				m.TransportParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransportParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadMethod", wireType)
			}
			m.UploadMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadMethod |= DeviceMetrics_DeviceMetricsUploadMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadParams == nil {
				m.UploadParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UploadParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdDevice = fmt.Errorf("proto: unexpected end of group")
)
