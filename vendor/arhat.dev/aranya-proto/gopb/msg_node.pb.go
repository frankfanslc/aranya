// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_node.proto

package gopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeConditions_Condition int32

const (
	NODE_CONDITION_UNKNOWN   NodeConditions_Condition = 0
	NODE_CONDITION_HEALTHY   NodeConditions_Condition = 1
	NODE_CONDITION_UNHEALTHY NodeConditions_Condition = 2
)

var NodeConditions_Condition_name = map[int32]string{
	0: "NODE_CONDITION_UNKNOWN",
	1: "NODE_CONDITION_HEALTHY",
	2: "NODE_CONDITION_UNHEALTHY",
}

var NodeConditions_Condition_value = map[string]int32{
	"NODE_CONDITION_UNKNOWN":   0,
	"NODE_CONDITION_HEALTHY":   1,
	"NODE_CONDITION_UNHEALTHY": 2,
}

func (NodeConditions_Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{3, 0}
}

type NodeExtInfo_ExtInfoValueType int32

const (
	NODE_EXT_INFO_TYPE_STRING  NodeExtInfo_ExtInfoValueType = 0
	NODE_EXT_INFO_TYPE_INTEGER NodeExtInfo_ExtInfoValueType = 1
	NODE_EXT_INFO_TYPE_FLOAT   NodeExtInfo_ExtInfoValueType = 2
)

var NodeExtInfo_ExtInfoValueType_name = map[int32]string{
	0: "NODE_EXT_INFO_TYPE_STRING",
	1: "NODE_EXT_INFO_TYPE_INTEGER",
	2: "NODE_EXT_INFO_TYPE_FLOAT",
}

var NodeExtInfo_ExtInfoValueType_value = map[string]int32{
	"NODE_EXT_INFO_TYPE_STRING":  0,
	"NODE_EXT_INFO_TYPE_INTEGER": 1,
	"NODE_EXT_INFO_TYPE_FLOAT":   2,
}

func (NodeExtInfo_ExtInfoValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{4, 0}
}

type NodeExtInfo_ExtInfoOperator int32

const (
	// no matter what previous value is, set to new value
	NODE_EXT_INFO_OPERATOR_SET NodeExtInfo_ExtInfoOperator = 0
	// only valid for {integer, float}
	NODE_EXT_INFO_OPERATOR_ADD NodeExtInfo_ExtInfoOperator = 1
	// only valid for {integer, float}
	NODE_EXT_INFO_OPERATOR_MINUS NodeExtInfo_ExtInfoOperator = 2
)

var NodeExtInfo_ExtInfoOperator_name = map[int32]string{
	0: "NODE_EXT_INFO_OPERATOR_SET",
	1: "NODE_EXT_INFO_OPERATOR_ADD",
	2: "NODE_EXT_INFO_OPERATOR_MINUS",
}

var NodeExtInfo_ExtInfoOperator_value = map[string]int32{
	"NODE_EXT_INFO_OPERATOR_SET":   0,
	"NODE_EXT_INFO_OPERATOR_ADD":   1,
	"NODE_EXT_INFO_OPERATOR_MINUS": 2,
}

func (NodeExtInfo_ExtInfoOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{4, 1}
}

type ContainerRuntimeInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ContainerRuntimeInfo) Reset()      { *m = ContainerRuntimeInfo{} }
func (*ContainerRuntimeInfo) ProtoMessage() {}
func (*ContainerRuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{0}
}
func (m *ContainerRuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRuntimeInfo.Merge(m, src)
}
func (m *ContainerRuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRuntimeInfo proto.InternalMessageInfo

func (m *ContainerRuntimeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerRuntimeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type NodeSystemInfo struct {
	Os            string                `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	OsImage       string                `protobuf:"bytes,2,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
	Arch          string                `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	KernelVersion string                `protobuf:"bytes,4,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	BootId        string                `protobuf:"bytes,11,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	MachineId     string                `protobuf:"bytes,12,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	SystemUuid    string                `protobuf:"bytes,13,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	RuntimeInfo   *ContainerRuntimeInfo `protobuf:"bytes,21,opt,name=runtime_info,json=runtimeInfo,proto3" json:"runtime_info,omitempty"`
}

func (m *NodeSystemInfo) Reset()      { *m = NodeSystemInfo{} }
func (*NodeSystemInfo) ProtoMessage() {}
func (*NodeSystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{1}
}
func (m *NodeSystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeSystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSystemInfo.Merge(m, src)
}
func (m *NodeSystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeSystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSystemInfo proto.InternalMessageInfo

func (m *NodeSystemInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *NodeSystemInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *NodeSystemInfo) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *NodeSystemInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *NodeSystemInfo) GetBootId() string {
	if m != nil {
		return m.BootId
	}
	return ""
}

func (m *NodeSystemInfo) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *NodeSystemInfo) GetSystemUuid() string {
	if m != nil {
		return m.SystemUuid
	}
	return ""
}

func (m *NodeSystemInfo) GetRuntimeInfo() *ContainerRuntimeInfo {
	if m != nil {
		return m.RuntimeInfo
	}
	return nil
}

type NodeResources struct {
	CpuCount     uint64 `protobuf:"varint,1,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	MemoryBytes  uint64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	StorageBytes uint64 `protobuf:"varint,3,opt,name=storage_bytes,json=storageBytes,proto3" json:"storage_bytes,omitempty"`
	PodCount     uint64 `protobuf:"varint,4,opt,name=pod_count,json=podCount,proto3" json:"pod_count,omitempty"` // Deprecated: Do not use.
}

func (m *NodeResources) Reset()      { *m = NodeResources{} }
func (*NodeResources) ProtoMessage() {}
func (*NodeResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{2}
}
func (m *NodeResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResources.Merge(m, src)
}
func (m *NodeResources) XXX_Size() int {
	return m.Size()
}
func (m *NodeResources) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResources.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResources proto.InternalMessageInfo

func (m *NodeResources) GetCpuCount() uint64 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *NodeResources) GetMemoryBytes() uint64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *NodeResources) GetStorageBytes() uint64 {
	if m != nil {
		return m.StorageBytes
	}
	return 0
}

// Deprecated: Do not use.
func (m *NodeResources) GetPodCount() uint64 {
	if m != nil {
		return m.PodCount
	}
	return 0
}

type NodeConditions struct {
	Ready   NodeConditions_Condition `protobuf:"varint,1,opt,name=ready,proto3,enum=aranya.NodeConditions_Condition" json:"ready,omitempty"`
	Memory  NodeConditions_Condition `protobuf:"varint,2,opt,name=memory,proto3,enum=aranya.NodeConditions_Condition" json:"memory,omitempty"`
	Disk    NodeConditions_Condition `protobuf:"varint,3,opt,name=disk,proto3,enum=aranya.NodeConditions_Condition" json:"disk,omitempty"`
	Pid     NodeConditions_Condition `protobuf:"varint,4,opt,name=pid,proto3,enum=aranya.NodeConditions_Condition" json:"pid,omitempty"`
	Network NodeConditions_Condition `protobuf:"varint,5,opt,name=network,proto3,enum=aranya.NodeConditions_Condition" json:"network,omitempty"`
	Pod     NodeConditions_Condition `protobuf:"varint,6,opt,name=pod,proto3,enum=aranya.NodeConditions_Condition" json:"pod,omitempty"`
}

func (m *NodeConditions) Reset()      { *m = NodeConditions{} }
func (*NodeConditions) ProtoMessage() {}
func (*NodeConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{3}
}
func (m *NodeConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConditions.Merge(m, src)
}
func (m *NodeConditions) XXX_Size() int {
	return m.Size()
}
func (m *NodeConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConditions.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConditions proto.InternalMessageInfo

func (m *NodeConditions) GetReady() NodeConditions_Condition {
	if m != nil {
		return m.Ready
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetMemory() NodeConditions_Condition {
	if m != nil {
		return m.Memory
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetDisk() NodeConditions_Condition {
	if m != nil {
		return m.Disk
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetPid() NodeConditions_Condition {
	if m != nil {
		return m.Pid
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetNetwork() NodeConditions_Condition {
	if m != nil {
		return m.Network
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetPod() NodeConditions_Condition {
	if m != nil {
		return m.Pod
	}
	return NODE_CONDITION_UNKNOWN
}

// set extra node information
type NodeExtInfo struct {
	// value is always transmitted in string format
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// type of the value
	ValueType NodeExtInfo_ExtInfoValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=aranya.NodeExtInfo_ExtInfoValueType" json:"value_type,omitempty"`
	// operator
	Operator NodeExtInfo_ExtInfoOperator `protobuf:"varint,4,opt,name=operator,proto3,enum=aranya.NodeExtInfo_ExtInfoOperator" json:"operator,omitempty"`
	ApplyTo  string                      `protobuf:"bytes,5,opt,name=apply_to,json=applyTo,proto3" json:"apply_to,omitempty"`
}

func (m *NodeExtInfo) Reset()      { *m = NodeExtInfo{} }
func (*NodeExtInfo) ProtoMessage() {}
func (*NodeExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{4}
}
func (m *NodeExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExtInfo.Merge(m, src)
}
func (m *NodeExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExtInfo proto.InternalMessageInfo

func (m *NodeExtInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeExtInfo) GetValueType() NodeExtInfo_ExtInfoValueType {
	if m != nil {
		return m.ValueType
	}
	return NODE_EXT_INFO_TYPE_STRING
}

func (m *NodeExtInfo) GetOperator() NodeExtInfo_ExtInfoOperator {
	if m != nil {
		return m.Operator
	}
	return NODE_EXT_INFO_OPERATOR_SET
}

func (m *NodeExtInfo) GetApplyTo() string {
	if m != nil {
		return m.ApplyTo
	}
	return ""
}

type NodeStatus struct {
	SystemInfo *NodeSystemInfo `protobuf:"bytes,1,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty"`
	Capacity   *NodeResources  `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	ExtInfo    []*NodeExtInfo  `protobuf:"bytes,3,rep,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	Conditions *NodeConditions `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *NodeStatus) Reset()      { *m = NodeStatus{} }
func (*NodeStatus) ProtoMessage() {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5478f2830667bf7c, []int{5}
}
func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetSystemInfo() *NodeSystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *NodeStatus) GetCapacity() *NodeResources {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *NodeStatus) GetExtInfo() []*NodeExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func (m *NodeStatus) GetConditions() *NodeConditions {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.NodeConditions_Condition", NodeConditions_Condition_name, NodeConditions_Condition_value)
	proto.RegisterEnum("aranya.NodeExtInfo_ExtInfoValueType", NodeExtInfo_ExtInfoValueType_name, NodeExtInfo_ExtInfoValueType_value)
	proto.RegisterEnum("aranya.NodeExtInfo_ExtInfoOperator", NodeExtInfo_ExtInfoOperator_name, NodeExtInfo_ExtInfoOperator_value)
	proto.RegisterType((*ContainerRuntimeInfo)(nil), "aranya.ContainerRuntimeInfo")
	proto.RegisterType((*NodeSystemInfo)(nil), "aranya.NodeSystemInfo")
	proto.RegisterType((*NodeResources)(nil), "aranya.NodeResources")
	proto.RegisterType((*NodeConditions)(nil), "aranya.NodeConditions")
	proto.RegisterType((*NodeExtInfo)(nil), "aranya.NodeExtInfo")
	proto.RegisterType((*NodeStatus)(nil), "aranya.NodeStatus")
}

func init() { proto.RegisterFile("msg_node.proto", fileDescriptor_5478f2830667bf7c) }

var fileDescriptor_5478f2830667bf7c = []byte{
	// 861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xb7, 0x6c, 0xc7, 0x7f, 0x9e, 0x13, 0xe3, 0x59, 0xda, 0xa2, 0xb6, 0xa9, 0x6a, 0x54, 0x98,
	0xc9, 0x05, 0x77, 0x30, 0x4c, 0x61, 0xb8, 0x74, 0x12, 0x5b, 0x6d, 0x35, 0x14, 0xa9, 0x6c, 0x94,
	0x42, 0xb9, 0x68, 0x36, 0xd2, 0x36, 0xd1, 0x24, 0xd6, 0x6a, 0x76, 0x57, 0xa6, 0xbe, 0xf1, 0x11,
	0x7a, 0xe1, 0x3b, 0x30, 0x7c, 0x09, 0xae, 0x1c, 0x73, 0xec, 0xb1, 0x71, 0x2e, 0x1c, 0xfb, 0x11,
	0x18, 0xad, 0x24, 0xc7, 0x4d, 0x0d, 0xe3, 0x93, 0xf7, 0xbd, 0xf7, 0xfb, 0xe9, 0xf7, 0xf6, 0xb7,
	0xbb, 0xcf, 0xd0, 0x9d, 0x88, 0x23, 0x3f, 0x66, 0x21, 0x1d, 0x24, 0x9c, 0x49, 0x86, 0x1a, 0x84,
	0x93, 0x78, 0x46, 0xcc, 0x31, 0x5c, 0x1b, 0xb1, 0x58, 0x92, 0x28, 0xa6, 0x1c, 0xa7, 0xb1, 0x8c,
	0x26, 0xd4, 0x8e, 0x5f, 0x32, 0x84, 0xa0, 0x1e, 0x93, 0x09, 0xd5, 0xb5, 0xbe, 0xb6, 0xd3, 0xc6,
	0x6a, 0x8d, 0x74, 0x68, 0x4e, 0x29, 0x17, 0x11, 0x8b, 0xf5, 0xaa, 0x4a, 0x97, 0xa1, 0xf9, 0xba,
	0x0a, 0x5d, 0x87, 0x85, 0x74, 0x7f, 0x26, 0x24, 0x9d, 0xa8, 0x0f, 0x74, 0xa1, 0xca, 0x44, 0x41,
	0xaf, 0x32, 0x81, 0x6e, 0x42, 0x8b, 0x09, 0x3f, 0x9a, 0x90, 0x23, 0x5a, 0xb2, 0x99, 0xb0, 0xb3,
	0x30, 0xd3, 0x22, 0x3c, 0x38, 0xd6, 0x6b, 0xb9, 0x56, 0xb6, 0x46, 0x9f, 0x43, 0xf7, 0x84, 0xf2,
	0x98, 0x9e, 0xfa, 0xa5, 0x64, 0x5d, 0x55, 0xb7, 0xf2, 0xec, 0xf3, 0x3c, 0x89, 0x3e, 0x81, 0xe6,
	0x21, 0x63, 0xd2, 0x8f, 0x42, 0xbd, 0xa3, 0xea, 0x8d, 0x2c, 0xb4, 0x43, 0x74, 0x07, 0x60, 0x42,
	0x82, 0xe3, 0x28, 0xa6, 0x59, 0x6d, 0x53, 0xd5, 0xda, 0x45, 0xc6, 0x0e, 0xd1, 0x5d, 0xe8, 0x08,
	0xd5, 0xab, 0x9f, 0xa6, 0x51, 0xa8, 0x6f, 0xa9, 0x3a, 0xe4, 0xa9, 0x83, 0x34, 0x0a, 0xd1, 0x43,
	0xd8, 0xe4, 0xb9, 0x1d, 0x7e, 0x14, 0xbf, 0x64, 0xfa, 0xf5, 0xbe, 0xb6, 0xd3, 0x19, 0x6e, 0x0f,
	0x72, 0xdb, 0x06, 0xab, 0x3c, 0xc3, 0x1d, 0x7e, 0x19, 0x98, 0xbf, 0x6b, 0xb0, 0x95, 0x59, 0x82,
	0xa9, 0x60, 0x29, 0x0f, 0xa8, 0x40, 0xb7, 0xa1, 0x1d, 0x24, 0xa9, 0x1f, 0xb0, 0x34, 0x96, 0xca,
	0x98, 0x3a, 0x6e, 0x05, 0x49, 0x3a, 0xca, 0x62, 0xf4, 0x29, 0x6c, 0x4e, 0xe8, 0x84, 0xf1, 0x99,
	0x7f, 0x38, 0x93, 0x54, 0x28, 0x8b, 0xea, 0xb8, 0x93, 0xe7, 0xf6, 0xb2, 0x14, 0xba, 0x07, 0x5b,
	0x42, 0x32, 0x4e, 0x8e, 0x68, 0x81, 0xa9, 0x29, 0xcc, 0x66, 0x91, 0xcc, 0x41, 0x77, 0xa1, 0x9d,
	0xb0, 0xb0, 0x10, 0xc9, 0x2c, 0xab, 0xef, 0x55, 0x75, 0x0d, 0xb7, 0x12, 0x16, 0x2a, 0x21, 0xf3,
	0xaf, 0x5a, 0x7e, 0x54, 0x23, 0x16, 0x87, 0x91, 0x8c, 0x58, 0x2c, 0xd0, 0x03, 0xd8, 0xe0, 0x94,
	0x84, 0x33, 0xd5, 0x54, 0x77, 0xd8, 0x2f, 0x37, 0xf9, 0x3e, 0x6c, 0xb0, 0x58, 0xe2, 0x1c, 0x8e,
	0xbe, 0x85, 0x46, 0xde, 0x9f, 0xea, 0x76, 0x1d, 0x62, 0x81, 0x47, 0x5f, 0x43, 0x3d, 0x8c, 0xc4,
	0x89, 0xda, 0xc1, 0x3a, 0x3c, 0x85, 0x46, 0x43, 0xa8, 0x25, 0x51, 0xa8, 0x76, 0xb5, 0x0e, 0x29,
	0x03, 0xa3, 0xef, 0xa0, 0x19, 0x53, 0xf9, 0x2b, 0xe3, 0x27, 0xfa, 0xc6, 0x9a, 0xbc, 0x92, 0xa0,
	0xf4, 0x58, 0xa8, 0x37, 0xd6, 0xd6, 0x63, 0xa1, 0x49, 0xa0, 0xbd, 0xc8, 0xa0, 0x5b, 0x70, 0xc3,
	0x71, 0xc7, 0x96, 0x3f, 0x72, 0x9d, 0xb1, 0xed, 0xd9, 0xae, 0xe3, 0x1f, 0x38, 0xdf, 0x3b, 0xee,
	0x4f, 0x4e, 0xaf, 0xb2, 0xa2, 0xf6, 0xc4, 0xda, 0x7d, 0xea, 0x3d, 0x79, 0xd1, 0xd3, 0xd0, 0x36,
	0xe8, 0x1f, 0xf0, 0xca, 0x6a, 0xd5, 0xfc, 0xb3, 0x06, 0x9d, 0xac, 0x09, 0xeb, 0x95, 0x54, 0x2f,
	0xed, 0x1a, 0x6c, 0x4c, 0xc9, 0x69, 0x5a, 0xbe, 0xd5, 0x3c, 0x40, 0x23, 0x00, 0xb5, 0xf0, 0xe5,
	0x2c, 0xa1, 0x85, 0xd1, 0x9f, 0x2d, 0xef, 0xa1, 0xa0, 0x0f, 0x8a, 0xdf, 0xe7, 0x19, 0xd8, 0x9b,
	0x25, 0x14, 0xb7, 0xa7, 0xe5, 0x12, 0x3d, 0x84, 0x16, 0x4b, 0x28, 0x27, 0x92, 0xf1, 0xc2, 0xf6,
	0x7b, 0xff, 0xf3, 0x09, 0xb7, 0x80, 0xe2, 0x05, 0x29, 0x7b, 0xf5, 0x24, 0x49, 0x4e, 0x67, 0xbe,
	0x64, 0xca, 0xff, 0x36, 0x6e, 0xaa, 0xd8, 0x63, 0x26, 0x83, 0xde, 0x55, 0x69, 0x74, 0x07, 0x6e,
	0xaa, 0x8d, 0x5b, 0x3f, 0x7b, 0xbe, 0xed, 0x3c, 0x72, 0x7d, 0xef, 0xc5, 0x33, 0xcb, 0xdf, 0xf7,
	0xb0, 0xed, 0x3c, 0xee, 0x55, 0x90, 0x01, 0xb7, 0x56, 0x94, 0x6d, 0xc7, 0xb3, 0x1e, 0x5b, 0x78,
	0xc9, 0xb7, 0xf7, 0xeb, 0x8f, 0x9e, 0xba, 0xbb, 0x5e, 0xaf, 0x6a, 0x0a, 0xf8, 0xe8, 0x4a, 0xa3,
	0x1f, 0x7e, 0xd0, 0x7d, 0x66, 0xe1, 0x5d, 0xcf, 0xc5, 0xfe, 0xbe, 0xe5, 0xad, 0x12, 0x5c, 0xd4,
	0x77, 0xc7, 0xe3, 0x9e, 0x86, 0xfa, 0xb0, 0xfd, 0x1f, 0xf5, 0x1f, 0x6c, 0xe7, 0x60, 0xbf, 0x57,
	0x35, 0xdf, 0x6a, 0x00, 0x6a, 0x32, 0x4a, 0x22, 0x53, 0x81, 0xbe, 0x59, 0xcc, 0x1d, 0x35, 0x55,
	0x34, 0x35, 0x55, 0x6e, 0x2c, 0x7b, 0x7a, 0x39, 0x42, 0xcb, 0x79, 0xa4, 0x0e, 0xf9, 0x4b, 0x68,
	0x05, 0x24, 0x21, 0x41, 0x24, 0xf3, 0xd7, 0xd6, 0x19, 0x5e, 0x5f, 0x66, 0x2d, 0xa6, 0x0c, 0x5e,
	0xc0, 0xd0, 0x00, 0x5a, 0xf4, 0x95, 0xcc, 0x85, 0x6a, 0xfd, 0xda, 0x4e, 0x67, 0xf8, 0xf1, 0x8a,
	0xc3, 0xc3, 0x4d, 0x5a, 0xdc, 0xa3, 0x07, 0x00, 0xc1, 0xe2, 0x5e, 0xab, 0xe3, 0xbe, 0xd2, 0xda,
	0xe5, 0xad, 0xc7, 0x4b, 0xc8, 0xbd, 0x1f, 0xcf, 0xce, 0x8d, 0xca, 0x9b, 0x73, 0xa3, 0xf2, 0xee,
	0xdc, 0xd0, 0x7e, 0x9b, 0x1b, 0xda, 0x1f, 0x73, 0x43, 0xfb, 0x7b, 0x6e, 0x68, 0x67, 0x73, 0x43,
	0x7b, 0x3b, 0x37, 0xb4, 0x7f, 0xe6, 0x46, 0xe5, 0xdd, 0xdc, 0xd0, 0x5e, 0x5f, 0x18, 0x95, 0xb3,
	0x0b, 0xa3, 0xf2, 0xe6, 0xc2, 0xa8, 0xfc, 0x72, 0x9b, 0xf0, 0x63, 0x22, 0x07, 0x21, 0x9d, 0xde,
	0xcf, 0x25, 0xbe, 0x50, 0x7f, 0x4c, 0xf7, 0x8f, 0x58, 0x72, 0x78, 0xd8, 0x50, 0xeb, 0xaf, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x95, 0x0b, 0xb9, 0xcf, 0xb6, 0x06, 0x00, 0x00,
}

func (x NodeConditions_Condition) String() string {
	s, ok := NodeConditions_Condition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeExtInfo_ExtInfoValueType) String() string {
	s, ok := NodeExtInfo_ExtInfoValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeExtInfo_ExtInfoOperator) String() string {
	s, ok := NodeExtInfo_ExtInfoOperator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ContainerRuntimeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerRuntimeInfo)
	if !ok {
		that2, ok := that.(ContainerRuntimeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *NodeSystemInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSystemInfo)
	if !ok {
		that2, ok := that.(NodeSystemInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.OsImage != that1.OsImage {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	if this.KernelVersion != that1.KernelVersion {
		return false
	}
	if this.BootId != that1.BootId {
		return false
	}
	if this.MachineId != that1.MachineId {
		return false
	}
	if this.SystemUuid != that1.SystemUuid {
		return false
	}
	if !this.RuntimeInfo.Equal(that1.RuntimeInfo) {
		return false
	}
	return true
}
func (this *NodeResources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeResources)
	if !ok {
		that2, ok := that.(NodeResources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuCount != that1.CpuCount {
		return false
	}
	if this.MemoryBytes != that1.MemoryBytes {
		return false
	}
	if this.StorageBytes != that1.StorageBytes {
		return false
	}
	if this.PodCount != that1.PodCount {
		return false
	}
	return true
}
func (this *NodeConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeConditions)
	if !ok {
		that2, ok := that.(NodeConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if this.Pod != that1.Pod {
		return false
	}
	return true
}
func (this *NodeExtInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeExtInfo)
	if !ok {
		that2, ok := that.(NodeExtInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.ApplyTo != that1.ApplyTo {
		return false
	}
	return true
}
func (this *NodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatus)
	if !ok {
		that2, ok := that.(NodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemInfo.Equal(that1.SystemInfo) {
		return false
	}
	if !this.Capacity.Equal(that1.Capacity) {
		return false
	}
	if len(this.ExtInfo) != len(that1.ExtInfo) {
		return false
	}
	for i := range this.ExtInfo {
		if !this.ExtInfo[i].Equal(that1.ExtInfo[i]) {
			return false
		}
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	return true
}
func (this *ContainerRuntimeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gopb.ContainerRuntimeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSystemInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gopb.NodeSystemInfo{")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "OsImage: "+fmt.Sprintf("%#v", this.OsImage)+",\n")
	s = append(s, "Arch: "+fmt.Sprintf("%#v", this.Arch)+",\n")
	s = append(s, "KernelVersion: "+fmt.Sprintf("%#v", this.KernelVersion)+",\n")
	s = append(s, "BootId: "+fmt.Sprintf("%#v", this.BootId)+",\n")
	s = append(s, "MachineId: "+fmt.Sprintf("%#v", this.MachineId)+",\n")
	s = append(s, "SystemUuid: "+fmt.Sprintf("%#v", this.SystemUuid)+",\n")
	if this.RuntimeInfo != nil {
		s = append(s, "RuntimeInfo: "+fmt.Sprintf("%#v", this.RuntimeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeResources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gopb.NodeResources{")
	s = append(s, "CpuCount: "+fmt.Sprintf("%#v", this.CpuCount)+",\n")
	s = append(s, "MemoryBytes: "+fmt.Sprintf("%#v", this.MemoryBytes)+",\n")
	s = append(s, "StorageBytes: "+fmt.Sprintf("%#v", this.StorageBytes)+",\n")
	s = append(s, "PodCount: "+fmt.Sprintf("%#v", this.PodCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&gopb.NodeConditions{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeExtInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gopb.NodeExtInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "ApplyTo: "+fmt.Sprintf("%#v", this.ApplyTo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gopb.NodeStatus{")
	if this.SystemInfo != nil {
		s = append(s, "SystemInfo: "+fmt.Sprintf("%#v", this.SystemInfo)+",\n")
	}
	if this.Capacity != nil {
		s = append(s, "Capacity: "+fmt.Sprintf("%#v", this.Capacity)+",\n")
	}
	if this.ExtInfo != nil {
		s = append(s, "ExtInfo: "+fmt.Sprintf("%#v", this.ExtInfo)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerRuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRuntimeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuntimeInfo != nil {
		{
			size, err := m.RuntimeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SystemUuid) > 0 {
		i -= len(m.SystemUuid)
		copy(dAtA[i:], m.SystemUuid)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.SystemUuid)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MachineId) > 0 {
		i -= len(m.MachineId)
		copy(dAtA[i:], m.MachineId)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.MachineId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BootId) > 0 {
		i -= len(m.BootId)
		copy(dAtA[i:], m.BootId)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.BootId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OsImage) > 0 {
		i -= len(m.OsImage)
		copy(dAtA[i:], m.OsImage)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.OsImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodCount != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.PodCount))
		i--
		dAtA[i] = 0x20
	}
	if m.StorageBytes != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.StorageBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.MemoryBytes != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.MemoryBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuCount != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.CpuCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pod != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Pod))
		i--
		dAtA[i] = 0x30
	}
	if m.Network != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x28
	}
	if m.Pid != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x20
	}
	if m.Disk != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Disk))
		i--
		dAtA[i] = 0x18
	}
	if m.Memory != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x10
	}
	if m.Ready != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Ready))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApplyTo) > 0 {
		i -= len(m.ApplyTo)
		copy(dAtA[i:], m.ApplyTo)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.ApplyTo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Operator != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x20
	}
	if m.ValueType != 0 {
		i = encodeVarintMsgNode(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMsgNode(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conditions != nil {
		{
			size, err := m.Conditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExtInfo) > 0 {
		for iNdEx := len(m.ExtInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Capacity != nil {
		{
			size, err := m.Capacity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SystemInfo != nil {
		{
			size, err := m.SystemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerRuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	return n
}

func (m *NodeSystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.OsImage)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.BootId)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.MachineId)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	l = len(m.SystemUuid)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	if m.RuntimeInfo != nil {
		l = m.RuntimeInfo.Size()
		n += 2 + l + sovMsgNode(uint64(l))
	}
	return n
}

func (m *NodeResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuCount != 0 {
		n += 1 + sovMsgNode(uint64(m.CpuCount))
	}
	if m.MemoryBytes != 0 {
		n += 1 + sovMsgNode(uint64(m.MemoryBytes))
	}
	if m.StorageBytes != 0 {
		n += 1 + sovMsgNode(uint64(m.StorageBytes))
	}
	if m.PodCount != 0 {
		n += 1 + sovMsgNode(uint64(m.PodCount))
	}
	return n
}

func (m *NodeConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready != 0 {
		n += 1 + sovMsgNode(uint64(m.Ready))
	}
	if m.Memory != 0 {
		n += 1 + sovMsgNode(uint64(m.Memory))
	}
	if m.Disk != 0 {
		n += 1 + sovMsgNode(uint64(m.Disk))
	}
	if m.Pid != 0 {
		n += 1 + sovMsgNode(uint64(m.Pid))
	}
	if m.Network != 0 {
		n += 1 + sovMsgNode(uint64(m.Network))
	}
	if m.Pod != 0 {
		n += 1 + sovMsgNode(uint64(m.Pod))
	}
	return n
}

func (m *NodeExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	if m.ValueType != 0 {
		n += 1 + sovMsgNode(uint64(m.ValueType))
	}
	if m.Operator != 0 {
		n += 1 + sovMsgNode(uint64(m.Operator))
	}
	l = len(m.ApplyTo)
	if l > 0 {
		n += 1 + l + sovMsgNode(uint64(l))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemInfo != nil {
		l = m.SystemInfo.Size()
		n += 1 + l + sovMsgNode(uint64(l))
	}
	if m.Capacity != nil {
		l = m.Capacity.Size()
		n += 1 + l + sovMsgNode(uint64(l))
	}
	if len(m.ExtInfo) > 0 {
		for _, e := range m.ExtInfo {
			l = e.Size()
			n += 1 + l + sovMsgNode(uint64(l))
		}
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovMsgNode(uint64(l))
	}
	return n
}

func sovMsgNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgNode(x uint64) (n int) {
	return sovMsgNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerRuntimeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSystemInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSystemInfo{`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`OsImage:` + fmt.Sprintf("%v", this.OsImage) + `,`,
		`Arch:` + fmt.Sprintf("%v", this.Arch) + `,`,
		`KernelVersion:` + fmt.Sprintf("%v", this.KernelVersion) + `,`,
		`BootId:` + fmt.Sprintf("%v", this.BootId) + `,`,
		`MachineId:` + fmt.Sprintf("%v", this.MachineId) + `,`,
		`SystemUuid:` + fmt.Sprintf("%v", this.SystemUuid) + `,`,
		`RuntimeInfo:` + strings.Replace(this.RuntimeInfo.String(), "ContainerRuntimeInfo", "ContainerRuntimeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeResources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeResources{`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`MemoryBytes:` + fmt.Sprintf("%v", this.MemoryBytes) + `,`,
		`StorageBytes:` + fmt.Sprintf("%v", this.StorageBytes) + `,`,
		`PodCount:` + fmt.Sprintf("%v", this.PodCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConditions{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Disk:` + fmt.Sprintf("%v", this.Disk) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeExtInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeExtInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`ApplyTo:` + fmt.Sprintf("%v", this.ApplyTo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExtInfo := "[]*NodeExtInfo{"
	for _, f := range this.ExtInfo {
		repeatedStringForExtInfo += strings.Replace(f.String(), "NodeExtInfo", "NodeExtInfo", 1) + ","
	}
	repeatedStringForExtInfo += "}"
	s := strings.Join([]string{`&NodeStatus{`,
		`SystemInfo:` + strings.Replace(this.SystemInfo.String(), "NodeSystemInfo", "NodeSystemInfo", 1) + `,`,
		`Capacity:` + strings.Replace(this.Capacity.String(), "NodeResources", "NodeResources", 1) + `,`,
		`ExtInfo:` + repeatedStringForExtInfo + `,`,
		`Conditions:` + strings.Replace(this.Conditions.String(), "NodeConditions", "NodeConditions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerRuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeInfo == nil {
				m.RuntimeInfo = &ContainerRuntimeInfo{}
			}
			if err := m.RuntimeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryBytes", wireType)
			}
			m.MemoryBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBytes", wireType)
			}
			m.StorageBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodCount", wireType)
			}
			m.PodCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			m.Ready = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ready |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			m.Pod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pod |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= NodeExtInfo_ExtInfoValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= NodeExtInfo_ExtInfoOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemInfo == nil {
				m.SystemInfo = &NodeSystemInfo{}
			}
			if err := m.SystemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = &NodeResources{}
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtInfo = append(m.ExtInfo, &NodeExtInfo{})
			if err := m.ExtInfo[len(m.ExtInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &NodeConditions{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgNode = fmt.Errorf("proto: unexpected end of group")
)
