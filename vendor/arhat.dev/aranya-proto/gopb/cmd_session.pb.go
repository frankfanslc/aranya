// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_session.proto

package gopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionCmd_Action int32

const (
	_INVALID_SESSION_ACTION SessionCmd_Action = 0
	CLOSE_SESSION           SessionCmd_Action = 1
)

var SessionCmd_Action_name = map[int32]string{
	0: "_INVALID_SESSION_ACTION",
	1: "CLOSE_SESSION",
}

var SessionCmd_Action_value = map[string]int32{
	"_INVALID_SESSION_ACTION": 0,
	"CLOSE_SESSION":           1,
}

func (SessionCmd_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f641e3fb62eff8eb, []int{0, 0}
}

type SessionCmd struct {
	Action SessionCmd_Action `protobuf:"varint,1,opt,name=action,proto3,enum=aranya.SessionCmd_Action" json:"action,omitempty"`
	// Types that are valid to be assigned to Options:
	//	*SessionCmd_SessionId
	Options isSessionCmd_Options `protobuf_oneof:"options"`
}

func (m *SessionCmd) Reset()      { *m = SessionCmd{} }
func (*SessionCmd) ProtoMessage() {}
func (*SessionCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_f641e3fb62eff8eb, []int{0}
}
func (m *SessionCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCmd.Merge(m, src)
}
func (m *SessionCmd) XXX_Size() int {
	return m.Size()
}
func (m *SessionCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCmd.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCmd proto.InternalMessageInfo

type isSessionCmd_Options interface {
	isSessionCmd_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionCmd_SessionId struct {
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}

func (*SessionCmd_SessionId) isSessionCmd_Options() {}

func (m *SessionCmd) GetOptions() isSessionCmd_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *SessionCmd) GetAction() SessionCmd_Action {
	if m != nil {
		return m.Action
	}
	return _INVALID_SESSION_ACTION
}

func (m *SessionCmd) GetSessionId() uint64 {
	if x, ok := m.GetOptions().(*SessionCmd_SessionId); ok {
		return x.SessionId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SessionCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SessionCmd_SessionId)(nil),
	}
}

func init() {
	proto.RegisterEnum("aranya.SessionCmd_Action", SessionCmd_Action_name, SessionCmd_Action_value)
	proto.RegisterType((*SessionCmd)(nil), "aranya.SessionCmd")
}

func init() { proto.RegisterFile("cmd_session.proto", fileDescriptor_f641e3fb62eff8eb) }

var fileDescriptor_f641e3fb62eff8eb = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0x4d, 0x89,
	0x2f, 0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54, 0x5a, 0xca, 0xc8, 0xc5, 0x15, 0x0c, 0x91, 0x71, 0xce, 0x4d,
	0x11, 0x32, 0xe4, 0x62, 0x4b, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x33, 0x92, 0xd4, 0x83, 0xa8, 0xd3, 0x43, 0xa8, 0xd1, 0x73, 0x04, 0x2b, 0x08, 0x82, 0x2a, 0x14,
	0x92, 0xe7, 0xe2, 0x82, 0x1a, 0x1d, 0x9f, 0x99, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0xe2, 0xc1,
	0x10, 0xc4, 0x09, 0x15, 0xf3, 0x4c, 0x51, 0xb2, 0xe0, 0x62, 0x83, 0x68, 0x11, 0x92, 0xe6, 0x12,
	0x8f, 0xf7, 0xf4, 0x0b, 0x73, 0xf4, 0xf1, 0x74, 0x89, 0x0f, 0x76, 0x0d, 0x0e, 0xf6, 0xf4, 0xf7,
	0x8b, 0x77, 0x74, 0x0e, 0xf1, 0xf4, 0xf7, 0x13, 0x60, 0x10, 0x12, 0xe4, 0xe2, 0x75, 0xf6, 0xf1,
	0x0f, 0x76, 0x85, 0xc9, 0x08, 0x30, 0x3a, 0x71, 0x72, 0xb1, 0xe7, 0x17, 0x80, 0x74, 0x16, 0x3b,
	0x05, 0x5e, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f,
	0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x92, 0x4e, 0x2c, 0xca, 0x48, 0x2c, 0xd1,
	0x4b, 0x49, 0x2d, 0xd3, 0x87, 0xf8, 0x43, 0x17, 0xec, 0x7b, 0xfd, 0xf4, 0xfc, 0x82, 0xa4, 0x24,
	0x36, 0x30, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x90, 0x9a, 0x84, 0x4e, 0x1e, 0x01, 0x00,
	0x00,
}

func (x SessionCmd_Action) String() string {
	s, ok := SessionCmd_Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SessionCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionCmd)
	if !ok {
		that2, ok := that.(SessionCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *SessionCmd_SessionId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionCmd_SessionId)
	if !ok {
		that2, ok := that.(SessionCmd_SessionId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *SessionCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gopb.SessionCmd{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionCmd_SessionId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&gopb.SessionCmd_SessionId{` +
		`SessionId:` + fmt.Sprintf("%#v", this.SessionId) + `}`}, ", ")
	return s
}
func valueToGoStringCmdSession(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SessionCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != 0 {
		i = encodeVarintCmdSession(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionCmd_SessionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionCmd_SessionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCmdSession(dAtA, i, uint64(m.SessionId))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintCmdSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovCmdSession(uint64(m.Action))
	}
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *SessionCmd_SessionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCmdSession(uint64(m.SessionId))
	return n
}

func sovCmdSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdSession(x uint64) (n int) {
	return sovCmdSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SessionCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionCmd{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionCmd_SessionId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionCmd_SessionId{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdSession(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SessionCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= SessionCmd_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Options = &SessionCmd_SessionId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdSession
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdSession = fmt.Errorf("proto: unexpected end of group")
)
