// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_peripheral.proto

// +build !noperipheral

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeripheralMetric_ReportMethod int32

const (
	// Report peripheral metrics when collecting node metrics
	REPORT_WITH_NODE_METRICS PeripheralMetric_ReportMethod = 0
	// Report peripheral metrics along with arhat client
	REPORT_WITH_ARHAT_CONNECTIVITY PeripheralMetric_ReportMethod = 1
	// Create a standalone client for metrics uploading
	REPORT_WITH_STANDALONE_CLIENT PeripheralMetric_ReportMethod = 2
)

var PeripheralMetric_ReportMethod_name = map[int32]string{
	0: "REPORT_WITH_NODE_METRICS",
	1: "REPORT_WITH_ARHAT_CONNECTIVITY",
	2: "REPORT_WITH_STANDALONE_CLIENT",
}

var PeripheralMetric_ReportMethod_value = map[string]int32{
	"REPORT_WITH_NODE_METRICS":       0,
	"REPORT_WITH_ARHAT_CONNECTIVITY": 1,
	"REPORT_WITH_STANDALONE_CLIENT":  2,
}

func (PeripheralMetric_ReportMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{1, 0}
}

type PeripheralMetric_ValueType int32

const (
	METRICS_VALUE_TYPE_UNTYPED PeripheralMetric_ValueType = 0
	METRICS_VALUE_TYPE_COUNTER PeripheralMetric_ValueType = 1
	METRICS_VALUE_TYPE_GAUGE   PeripheralMetric_ValueType = 2
)

var PeripheralMetric_ValueType_name = map[int32]string{
	0: "METRICS_VALUE_TYPE_UNTYPED",
	1: "METRICS_VALUE_TYPE_COUNTER",
	2: "METRICS_VALUE_TYPE_GAUGE",
}

var PeripheralMetric_ValueType_value = map[string]int32{
	"METRICS_VALUE_TYPE_UNTYPED": 0,
	"METRICS_VALUE_TYPE_COUNTER": 1,
	"METRICS_VALUE_TYPE_GAUGE":   2,
}

func (PeripheralMetric_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{1, 1}
}

type PeripheralOperation struct {
	// (required) identifier of this operation
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// (optional) params usd for peripheral connectivity when executing this
	// operation
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PeripheralOperation) Reset()      { *m = PeripheralOperation{} }
func (*PeripheralOperation) ProtoMessage() {}
func (*PeripheralOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{0}
}
func (m *PeripheralOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralOperation.Merge(m, src)
}
func (m *PeripheralOperation) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralOperation.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralOperation proto.InternalMessageInfo

func (m *PeripheralOperation) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *PeripheralOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type PeripheralMetric struct {
	// Name of this metric
	Name         string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReportMethod PeripheralMetric_ReportMethod `protobuf:"varint,2,opt,name=report_method,json=reportMethod,proto3,enum=aranya.PeripheralMetric_ReportMethod" json:"report_method,omitempty"`
	ValueType    PeripheralMetric_ValueType    `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=aranya.PeripheralMetric_ValueType" json:"value_type,omitempty"`
	// (required) params for peripheral connector to retrieve metrics
	PeripheralParams map[string]string `protobuf:"bytes,4,rep,name=peripheral_params,json=peripheralParams,proto3" json:"peripheral_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Hex encoded hash of the metrics reporter
	ReporterName string `protobuf:"bytes,5,opt,name=reporter_name,json=reporterName,proto3" json:"reporter_name,omitempty"`
	// (optional) params for metrics_reporter to upload metrics
	ReporterParams map[string]string `protobuf:"bytes,6,rep,name=reporter_params,json=reporterParams,proto3" json:"reporter_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PeripheralMetric) Reset()      { *m = PeripheralMetric{} }
func (*PeripheralMetric) ProtoMessage() {}
func (*PeripheralMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{1}
}
func (m *PeripheralMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralMetric.Merge(m, src)
}
func (m *PeripheralMetric) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralMetric.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralMetric proto.InternalMessageInfo

func (m *PeripheralMetric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeripheralMetric) GetReportMethod() PeripheralMetric_ReportMethod {
	if m != nil {
		return m.ReportMethod
	}
	return REPORT_WITH_NODE_METRICS
}

func (m *PeripheralMetric) GetValueType() PeripheralMetric_ValueType {
	if m != nil {
		return m.ValueType
	}
	return METRICS_VALUE_TYPE_UNTYPED
}

func (m *PeripheralMetric) GetPeripheralParams() map[string]string {
	if m != nil {
		return m.PeripheralParams
	}
	return nil
}

func (m *PeripheralMetric) GetReporterName() string {
	if m != nil {
		return m.ReporterName
	}
	return ""
}

func (m *PeripheralMetric) GetReporterParams() map[string]string {
	if m != nil {
		return m.ReporterParams
	}
	return nil
}

type PeripheralEnsureCmd struct {
	Kind PeripheralType `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.PeripheralType" json:"kind,omitempty"`
	// (required) User defined peripheral name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (required) Connector defines how to connect to the peripheral, operations operate
	// upon this connector
	Connector *Connectivity `protobuf:"bytes,3,opt,name=connector,proto3" json:"connector,omitempty"`
	// (optional) User defined peripheral operations
	Operations []*PeripheralOperation `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
	// (optional) User defined peripheral metrics
	Metrics []*PeripheralMetric `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *PeripheralEnsureCmd) Reset()      { *m = PeripheralEnsureCmd{} }
func (*PeripheralEnsureCmd) ProtoMessage() {}
func (*PeripheralEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{2}
}
func (m *PeripheralEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralEnsureCmd.Merge(m, src)
}
func (m *PeripheralEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralEnsureCmd proto.InternalMessageInfo

func (m *PeripheralEnsureCmd) GetKind() PeripheralType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_PERIPHERAL_TYPE
}

func (m *PeripheralEnsureCmd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeripheralEnsureCmd) GetConnector() *Connectivity {
	if m != nil {
		return m.Connector
	}
	return nil
}

func (m *PeripheralEnsureCmd) GetOperations() []*PeripheralOperation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *PeripheralEnsureCmd) GetMetrics() []*PeripheralMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type PeripheralListCmd struct {
	PeripheralNames []string `protobuf:"bytes,1,rep,name=peripheral_names,json=peripheralNames,proto3" json:"peripheral_names,omitempty"`
}

func (m *PeripheralListCmd) Reset()      { *m = PeripheralListCmd{} }
func (*PeripheralListCmd) ProtoMessage() {}
func (*PeripheralListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{3}
}
func (m *PeripheralListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralListCmd.Merge(m, src)
}
func (m *PeripheralListCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralListCmd proto.InternalMessageInfo

func (m *PeripheralListCmd) GetPeripheralNames() []string {
	if m != nil {
		return m.PeripheralNames
	}
	return nil
}

type PeripheralDeleteCmd struct {
	// delete normal peripherals or metrics reporters
	PeripheralNames []string `protobuf:"bytes,1,rep,name=peripheral_names,json=peripheralNames,proto3" json:"peripheral_names,omitempty"`
}

func (m *PeripheralDeleteCmd) Reset()      { *m = PeripheralDeleteCmd{} }
func (*PeripheralDeleteCmd) ProtoMessage() {}
func (*PeripheralDeleteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{4}
}
func (m *PeripheralDeleteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralDeleteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralDeleteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralDeleteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralDeleteCmd.Merge(m, src)
}
func (m *PeripheralDeleteCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralDeleteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralDeleteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralDeleteCmd proto.InternalMessageInfo

func (m *PeripheralDeleteCmd) GetPeripheralNames() []string {
	if m != nil {
		return m.PeripheralNames
	}
	return nil
}

type PeripheralOperateCmd struct {
	// (required) peripheral id of a normal peripheral
	PeripheralName string `protobuf:"bytes,1,opt,name=peripheral_name,json=peripheralName,proto3" json:"peripheral_name,omitempty"`
	// (required) identifier of this operation
	OperationId string `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// (optional) extra data for this operation
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PeripheralOperateCmd) Reset()      { *m = PeripheralOperateCmd{} }
func (*PeripheralOperateCmd) ProtoMessage() {}
func (*PeripheralOperateCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{5}
}
func (m *PeripheralOperateCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralOperateCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralOperateCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralOperateCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralOperateCmd.Merge(m, src)
}
func (m *PeripheralOperateCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralOperateCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralOperateCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralOperateCmd proto.InternalMessageInfo

func (m *PeripheralOperateCmd) GetPeripheralName() string {
	if m != nil {
		return m.PeripheralName
	}
	return ""
}

func (m *PeripheralOperateCmd) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *PeripheralOperateCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PeripheralMetricsCollectCmd struct {
	PeripheralNames []string `protobuf:"bytes,2,rep,name=peripheral_names,json=peripheralNames,proto3" json:"peripheral_names,omitempty"`
}

func (m *PeripheralMetricsCollectCmd) Reset()      { *m = PeripheralMetricsCollectCmd{} }
func (*PeripheralMetricsCollectCmd) ProtoMessage() {}
func (*PeripheralMetricsCollectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_71268b45114e3072, []int{6}
}
func (m *PeripheralMetricsCollectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralMetricsCollectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralMetricsCollectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralMetricsCollectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralMetricsCollectCmd.Merge(m, src)
}
func (m *PeripheralMetricsCollectCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralMetricsCollectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralMetricsCollectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralMetricsCollectCmd proto.InternalMessageInfo

func (m *PeripheralMetricsCollectCmd) GetPeripheralNames() []string {
	if m != nil {
		return m.PeripheralNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.PeripheralMetric_ReportMethod", PeripheralMetric_ReportMethod_name, PeripheralMetric_ReportMethod_value)
	proto.RegisterEnum("aranya.PeripheralMetric_ValueType", PeripheralMetric_ValueType_name, PeripheralMetric_ValueType_value)
	proto.RegisterType((*PeripheralOperation)(nil), "aranya.PeripheralOperation")
	proto.RegisterMapType((map[string]string)(nil), "aranya.PeripheralOperation.ParamsEntry")
	proto.RegisterType((*PeripheralMetric)(nil), "aranya.PeripheralMetric")
	proto.RegisterMapType((map[string]string)(nil), "aranya.PeripheralMetric.PeripheralParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "aranya.PeripheralMetric.ReporterParamsEntry")
	proto.RegisterType((*PeripheralEnsureCmd)(nil), "aranya.PeripheralEnsureCmd")
	proto.RegisterType((*PeripheralListCmd)(nil), "aranya.PeripheralListCmd")
	proto.RegisterType((*PeripheralDeleteCmd)(nil), "aranya.PeripheralDeleteCmd")
	proto.RegisterType((*PeripheralOperateCmd)(nil), "aranya.PeripheralOperateCmd")
	proto.RegisterType((*PeripheralMetricsCollectCmd)(nil), "aranya.PeripheralMetricsCollectCmd")
}

func init() { proto.RegisterFile("cmd_peripheral.proto", fileDescriptor_71268b45114e3072) }

var fileDescriptor_71268b45114e3072 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x6e, 0xd3, 0x4a,
	0x18, 0xb6, 0x9d, 0xcb, 0x51, 0xfe, 0xe4, 0xa4, 0xee, 0x34, 0xe7, 0xc8, 0x4a, 0xc1, 0x6a, 0x8d,
	0x50, 0x0b, 0x82, 0x20, 0x85, 0x0d, 0x17, 0x09, 0x30, 0x8e, 0xd5, 0x06, 0xa5, 0x4e, 0x34, 0x75,
	0x5a, 0x15, 0x16, 0x96, 0x9b, 0x8c, 0xa8, 0xd5, 0xc4, 0xb6, 0xc6, 0x6e, 0xa4, 0xec, 0x78, 0x04,
	0x1e, 0x83, 0x07, 0xe0, 0x21, 0x58, 0x76, 0xd9, 0x25, 0x4d, 0x37, 0x2c, 0xbb, 0x62, 0xc1, 0x0a,
	0x65, 0xe2, 0x24, 0x6e, 0x2e, 0xa0, 0xae, 0x32, 0xf3, 0xcd, 0xe7, 0xef, 0x9f, 0xf9, 0xfe, 0x4b,
	0xa0, 0xd0, 0xea, 0xb6, 0x2d, 0x9f, 0x50, 0xc7, 0x3f, 0x21, 0xd4, 0xee, 0x94, 0x7c, 0xea, 0x85,
	0x1e, 0x4a, 0xdb, 0xd4, 0x76, 0xfb, 0x76, 0x51, 0x9c, 0x3d, 0x29, 0xa2, 0x96, 0xe7, 0xba, 0xa4,
	0x15, 0x3a, 0x3d, 0x27, 0xec, 0x8f, 0x30, 0xe5, 0x2b, 0x0f, 0x6b, 0x8d, 0x09, 0xb1, 0xee, 0x13,
	0x6a, 0x87, 0x8e, 0xe7, 0xa2, 0x4d, 0xc8, 0x79, 0xe3, 0x8d, 0xe5, 0xb4, 0x25, 0x7e, 0x83, 0xdf,
	0xce, 0xe0, 0xec, 0x04, 0xab, 0xb6, 0xd1, 0x6b, 0x48, 0xfb, 0x36, 0xb5, 0xbb, 0x81, 0x24, 0x6c,
	0x24, 0xb6, 0xb3, 0xe5, 0xad, 0xd2, 0x28, 0x72, 0x69, 0x81, 0x5e, 0xa9, 0xc1, 0x98, 0xba, 0x1b,
	0xd2, 0x3e, 0x8e, 0x3e, 0x2b, 0x3e, 0x87, 0x6c, 0x0c, 0x46, 0x22, 0x24, 0x4e, 0x49, 0x3f, 0x8a,
	0x34, 0x5c, 0xa2, 0x02, 0xa4, 0x7a, 0x76, 0xe7, 0x8c, 0x48, 0x02, 0xc3, 0x46, 0x9b, 0x17, 0xc2,
	0x33, 0x5e, 0xf9, 0x99, 0x02, 0x71, 0x1a, 0x66, 0x8f, 0x84, 0xd4, 0x69, 0x21, 0x04, 0x49, 0xd7,
	0xee, 0x92, 0x48, 0x81, 0xad, 0xd1, 0x3b, 0xf8, 0x97, 0x12, 0xdf, 0xa3, 0xa1, 0xd5, 0x25, 0xe1,
	0x89, 0xd7, 0x66, 0x52, 0xf9, 0xf2, 0xfd, 0xf9, 0xbb, 0x8e, 0x44, 0x4a, 0x98, 0xb1, 0xf7, 0x18,
	0x19, 0xe7, 0x68, 0x6c, 0x87, 0x54, 0x00, 0x76, 0x03, 0x2b, 0xec, 0xfb, 0x44, 0x4a, 0x30, 0x21,
	0x65, 0xa9, 0xd0, 0xc1, 0x90, 0x6a, 0xf6, 0x7d, 0x82, 0x33, 0xbd, 0xf1, 0x12, 0x7d, 0x80, 0xd5,
	0x69, 0x5a, 0xac, 0xc8, 0xbe, 0x24, 0xb3, 0xaf, 0xb4, 0x54, 0x69, 0x0a, 0xc4, 0x5d, 0x8c, 0xe5,
	0x77, 0x04, 0xa3, 0x7b, 0xe3, 0xb7, 0x12, 0x6a, 0x31, 0x23, 0x52, 0xcc, 0x88, 0xdc, 0x18, 0x34,
	0x86, 0x86, 0x34, 0x61, 0x65, 0x42, 0x8a, 0xe2, 0xa7, 0x59, 0xfc, 0x47, 0x7f, 0xb1, 0x84, 0xd0,
	0x78, 0xf4, 0x3c, 0xbd, 0x01, 0x16, 0x35, 0xf8, 0x6f, 0xe1, 0x35, 0x6f, 0x93, 0xd5, 0xa2, 0x0a,
	0x6b, 0x0b, 0x62, 0xdd, 0xaa, 0x30, 0x02, 0xc8, 0xc5, 0x33, 0x88, 0xee, 0x80, 0x84, 0xf5, 0x46,
	0x1d, 0x9b, 0xd6, 0x61, 0xd5, 0xdc, 0xb5, 0x8c, 0x7a, 0x45, 0xb7, 0xf6, 0x74, 0x13, 0x57, 0xb5,
	0x7d, 0x91, 0x43, 0x0a, 0xc8, 0xf1, 0x53, 0x15, 0xef, 0xaa, 0xa6, 0xa5, 0xd5, 0x0d, 0x43, 0xd7,
	0xcc, 0xea, 0x41, 0xd5, 0x3c, 0x12, 0x79, 0xb4, 0x09, 0x77, 0xe3, 0x9c, 0x7d, 0x53, 0x35, 0x2a,
	0x6a, 0xad, 0x6e, 0xe8, 0x96, 0x56, 0xab, 0xea, 0x86, 0x29, 0x0a, 0x8a, 0x03, 0x99, 0x49, 0xb6,
	0x91, 0x0c, 0xc5, 0x28, 0x80, 0x75, 0xa0, 0xd6, 0x9a, 0xba, 0x65, 0x1e, 0x35, 0x74, 0xab, 0x69,
	0x0c, 0x7f, 0x2a, 0x22, 0xb7, 0xe4, 0x5c, 0xab, 0x37, 0x0d, 0x53, 0xc7, 0x22, 0x3f, 0xbc, 0xf1,
	0x82, 0xf3, 0x1d, 0xb5, 0xb9, 0xa3, 0x8b, 0x82, 0xf2, 0xeb, 0x46, 0xbf, 0xea, 0x6e, 0x70, 0x46,
	0x89, 0xd6, 0x6d, 0xa3, 0x87, 0x90, 0x3c, 0x75, 0xdc, 0x51, 0x9f, 0xe6, 0xcb, 0xff, 0xcf, 0xe7,
	0x92, 0x55, 0x22, 0xe3, 0x4c, 0xfa, 0x44, 0x88, 0xf5, 0x49, 0x19, 0x32, 0xd1, 0x74, 0xf0, 0x28,
	0x2b, 0xed, 0x6c, 0xb9, 0x30, 0x16, 0xd1, 0x62, 0x63, 0x03, 0x4f, 0x69, 0xe8, 0x25, 0xc0, 0x64,
	0x1e, 0x8c, 0xab, 0x78, 0xfd, 0x0f, 0x43, 0x00, 0xc7, 0xe8, 0xa8, 0x0c, 0xff, 0x74, 0x59, 0x79,
	0x05, 0x52, 0x8a, 0x7d, 0x29, 0x2d, 0xab, 0x3f, 0x3c, 0x26, 0x2a, 0xaf, 0x60, 0x75, 0x7a, 0x58,
	0x73, 0x82, 0x70, 0xf8, 0xf2, 0x07, 0x10, 0xeb, 0x04, 0x56, 0xf7, 0x81, 0xc4, 0x6f, 0x24, 0xb6,
	0x33, 0x78, 0x65, 0x8a, 0x0f, 0x4b, 0x3f, 0x50, 0xde, 0xc4, 0xbd, 0xab, 0x90, 0x0e, 0x09, 0xc9,
	0x2d, 0x15, 0x7a, 0x50, 0x98, 0x7d, 0x18, 0x93, 0xd8, 0x82, 0x95, 0x19, 0x89, 0xa8, 0x5c, 0xf3,
	0x37, 0x15, 0xe6, 0xe6, 0xaa, 0x30, 0x3f, 0x57, 0x11, 0x24, 0xdb, 0x76, 0x68, 0xb3, 0x2c, 0xe4,
	0x30, 0x5b, 0x2b, 0xbb, 0xb0, 0x3e, 0x6b, 0x4b, 0xa0, 0x79, 0x9d, 0x0e, 0x69, 0x2d, 0xf5, 0x40,
	0x58, 0xf8, 0x82, 0xb7, 0x87, 0xe7, 0x97, 0x32, 0x77, 0x71, 0x29, 0x73, 0xd7, 0x97, 0x32, 0xff,
	0x69, 0x20, 0xf3, 0x5f, 0x06, 0x32, 0xff, 0x6d, 0x20, 0xf3, 0xe7, 0x03, 0x99, 0xff, 0x3e, 0x90,
	0xf9, 0x1f, 0x03, 0x99, 0xbb, 0x1e, 0xc8, 0xfc, 0xe7, 0x2b, 0x99, 0x3b, 0xbf, 0x92, 0xb9, 0x8b,
	0x2b, 0x99, 0x7b, 0xbf, 0x69, 0xd3, 0x13, 0x3b, 0x2c, 0xb5, 0x49, 0xef, 0xc9, 0x28, 0x4b, 0x8f,
	0xd9, 0xdf, 0x47, 0xb4, 0xf9, 0xe8, 0xf9, 0xc7, 0xc7, 0x69, 0x86, 0x3c, 0xfd, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x4e, 0xec, 0xd3, 0xed, 0x96, 0x06, 0x00, 0x00,
}

func (x PeripheralMetric_ReportMethod) String() string {
	s, ok := PeripheralMetric_ReportMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PeripheralMetric_ValueType) String() string {
	s, ok := PeripheralMetric_ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PeripheralOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralOperation)
	if !ok {
		that2, ok := that.(PeripheralOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperationId != that1.OperationId {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralMetric) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralMetric)
	if !ok {
		that2, ok := that.(PeripheralMetric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ReportMethod != that1.ReportMethod {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if len(this.PeripheralParams) != len(that1.PeripheralParams) {
		return false
	}
	for i := range this.PeripheralParams {
		if this.PeripheralParams[i] != that1.PeripheralParams[i] {
			return false
		}
	}
	if this.ReporterName != that1.ReporterName {
		return false
	}
	if len(this.ReporterParams) != len(that1.ReporterParams) {
		return false
	}
	for i := range this.ReporterParams {
		if this.ReporterParams[i] != that1.ReporterParams[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralEnsureCmd)
	if !ok {
		that2, ok := that.(PeripheralEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Connector.Equal(that1.Connector) {
		return false
	}
	if len(this.Operations) != len(that1.Operations) {
		return false
	}
	for i := range this.Operations {
		if !this.Operations[i].Equal(that1.Operations[i]) {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *PeripheralListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralListCmd)
	if !ok {
		that2, ok := that.(PeripheralListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeripheralNames) != len(that1.PeripheralNames) {
		return false
	}
	for i := range this.PeripheralNames {
		if this.PeripheralNames[i] != that1.PeripheralNames[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralDeleteCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralDeleteCmd)
	if !ok {
		that2, ok := that.(PeripheralDeleteCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeripheralNames) != len(that1.PeripheralNames) {
		return false
	}
	for i := range this.PeripheralNames {
		if this.PeripheralNames[i] != that1.PeripheralNames[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralOperateCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralOperateCmd)
	if !ok {
		that2, ok := that.(PeripheralOperateCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PeripheralName != that1.PeripheralName {
		return false
	}
	if this.OperationId != that1.OperationId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *PeripheralMetricsCollectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralMetricsCollectCmd)
	if !ok {
		that2, ok := that.(PeripheralMetricsCollectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeripheralNames) != len(that1.PeripheralNames) {
		return false
	}
	for i := range this.PeripheralNames {
		if this.PeripheralNames[i] != that1.PeripheralNames[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.PeripheralOperation{")
	s = append(s, "OperationId: "+fmt.Sprintf("%#v", this.OperationId)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralMetric) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aranyagopb.PeripheralMetric{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ReportMethod: "+fmt.Sprintf("%#v", this.ReportMethod)+",\n")
	s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	keysForPeripheralParams := make([]string, 0, len(this.PeripheralParams))
	for k, _ := range this.PeripheralParams {
		keysForPeripheralParams = append(keysForPeripheralParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPeripheralParams)
	mapStringForPeripheralParams := "map[string]string{"
	for _, k := range keysForPeripheralParams {
		mapStringForPeripheralParams += fmt.Sprintf("%#v: %#v,", k, this.PeripheralParams[k])
	}
	mapStringForPeripheralParams += "}"
	if this.PeripheralParams != nil {
		s = append(s, "PeripheralParams: "+mapStringForPeripheralParams+",\n")
	}
	s = append(s, "ReporterName: "+fmt.Sprintf("%#v", this.ReporterName)+",\n")
	keysForReporterParams := make([]string, 0, len(this.ReporterParams))
	for k, _ := range this.ReporterParams {
		keysForReporterParams = append(keysForReporterParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReporterParams)
	mapStringForReporterParams := "map[string]string{"
	for _, k := range keysForReporterParams {
		mapStringForReporterParams += fmt.Sprintf("%#v: %#v,", k, this.ReporterParams[k])
	}
	mapStringForReporterParams += "}"
	if this.ReporterParams != nil {
		s = append(s, "ReporterParams: "+mapStringForReporterParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.PeripheralEnsureCmd{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Connector != nil {
		s = append(s, "Connector: "+fmt.Sprintf("%#v", this.Connector)+",\n")
	}
	if this.Operations != nil {
		s = append(s, "Operations: "+fmt.Sprintf("%#v", this.Operations)+",\n")
	}
	if this.Metrics != nil {
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.PeripheralListCmd{")
	s = append(s, "PeripheralNames: "+fmt.Sprintf("%#v", this.PeripheralNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralDeleteCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.PeripheralDeleteCmd{")
	s = append(s, "PeripheralNames: "+fmt.Sprintf("%#v", this.PeripheralNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralOperateCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.PeripheralOperateCmd{")
	s = append(s, "PeripheralName: "+fmt.Sprintf("%#v", this.PeripheralName)+",\n")
	s = append(s, "OperationId: "+fmt.Sprintf("%#v", this.OperationId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralMetricsCollectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.PeripheralMetricsCollectCmd{")
	s = append(s, "PeripheralNames: "+fmt.Sprintf("%#v", this.PeripheralNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdPeripheral(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PeripheralOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReporterParams) > 0 {
		for k := range m.ReporterParams {
			v := m.ReporterParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ReporterName) > 0 {
		i -= len(m.ReporterName)
		copy(dAtA[i:], m.ReporterName)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.ReporterName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PeripheralParams) > 0 {
		for k := range m.PeripheralParams {
			v := m.PeripheralParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ValueType != 0 {
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReportMethod != 0 {
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(m.ReportMethod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdPeripheral(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdPeripheral(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Connector != nil {
		{
			size, err := m.Connector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for iNdEx := len(m.PeripheralNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeripheralNames[iNdEx])
			copy(dAtA[i:], m.PeripheralNames[iNdEx])
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.PeripheralNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralDeleteCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralDeleteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralDeleteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for iNdEx := len(m.PeripheralNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeripheralNames[iNdEx])
			copy(dAtA[i:], m.PeripheralNames[iNdEx])
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.PeripheralNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralOperateCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralOperateCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralOperateCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeripheralName) > 0 {
		i -= len(m.PeripheralName)
		copy(dAtA[i:], m.PeripheralName)
		i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.PeripheralName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralMetricsCollectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralMetricsCollectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralMetricsCollectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for iNdEx := len(m.PeripheralNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeripheralNames[iNdEx])
			copy(dAtA[i:], m.PeripheralNames[iNdEx])
			i = encodeVarintCmdPeripheral(dAtA, i, uint64(len(m.PeripheralNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdPeripheral(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdPeripheral(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PeripheralOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdPeripheral(uint64(len(k))) + 1 + len(v) + sovCmdPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdPeripheral(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PeripheralMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	if m.ReportMethod != 0 {
		n += 1 + sovCmdPeripheral(uint64(m.ReportMethod))
	}
	if m.ValueType != 0 {
		n += 1 + sovCmdPeripheral(uint64(m.ValueType))
	}
	if len(m.PeripheralParams) > 0 {
		for k, v := range m.PeripheralParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdPeripheral(uint64(len(k))) + 1 + len(v) + sovCmdPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdPeripheral(uint64(mapEntrySize))
		}
	}
	l = len(m.ReporterName)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	if len(m.ReporterParams) > 0 {
		for k, v := range m.ReporterParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdPeripheral(uint64(len(k))) + 1 + len(v) + sovCmdPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdPeripheral(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PeripheralEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovCmdPeripheral(uint64(m.Kind))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	if m.Connector != nil {
		l = m.Connector.Size()
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovCmdPeripheral(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCmdPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for _, s := range m.PeripheralNames {
			l = len(s)
			n += 1 + l + sovCmdPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralDeleteCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for _, s := range m.PeripheralNames {
			l = len(s)
			n += 1 + l + sovCmdPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralOperateCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeripheralName)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdPeripheral(uint64(l))
	}
	return n
}

func (m *PeripheralMetricsCollectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeripheralNames) > 0 {
		for _, s := range m.PeripheralNames {
			l = len(s)
			n += 1 + l + sovCmdPeripheral(uint64(l))
		}
	}
	return n
}

func sovCmdPeripheral(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdPeripheral(x uint64) (n int) {
	return sovCmdPeripheral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PeripheralOperation) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&PeripheralOperation{`,
		`OperationId:` + fmt.Sprintf("%v", this.OperationId) + `,`,
		`Params:` + mapStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralMetric) String() string {
	if this == nil {
		return "nil"
	}
	keysForPeripheralParams := make([]string, 0, len(this.PeripheralParams))
	for k, _ := range this.PeripheralParams {
		keysForPeripheralParams = append(keysForPeripheralParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPeripheralParams)
	mapStringForPeripheralParams := "map[string]string{"
	for _, k := range keysForPeripheralParams {
		mapStringForPeripheralParams += fmt.Sprintf("%v: %v,", k, this.PeripheralParams[k])
	}
	mapStringForPeripheralParams += "}"
	keysForReporterParams := make([]string, 0, len(this.ReporterParams))
	for k, _ := range this.ReporterParams {
		keysForReporterParams = append(keysForReporterParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReporterParams)
	mapStringForReporterParams := "map[string]string{"
	for _, k := range keysForReporterParams {
		mapStringForReporterParams += fmt.Sprintf("%v: %v,", k, this.ReporterParams[k])
	}
	mapStringForReporterParams += "}"
	s := strings.Join([]string{`&PeripheralMetric{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ReportMethod:` + fmt.Sprintf("%v", this.ReportMethod) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`PeripheralParams:` + mapStringForPeripheralParams + `,`,
		`ReporterName:` + fmt.Sprintf("%v", this.ReporterName) + `,`,
		`ReporterParams:` + mapStringForReporterParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOperations := "[]*PeripheralOperation{"
	for _, f := range this.Operations {
		repeatedStringForOperations += strings.Replace(f.String(), "PeripheralOperation", "PeripheralOperation", 1) + ","
	}
	repeatedStringForOperations += "}"
	repeatedStringForMetrics := "[]*PeripheralMetric{"
	for _, f := range this.Metrics {
		repeatedStringForMetrics += strings.Replace(f.String(), "PeripheralMetric", "PeripheralMetric", 1) + ","
	}
	repeatedStringForMetrics += "}"
	s := strings.Join([]string{`&PeripheralEnsureCmd{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Connector:` + strings.Replace(fmt.Sprintf("%v", this.Connector), "Connectivity", "Connectivity", 1) + `,`,
		`Operations:` + repeatedStringForOperations + `,`,
		`Metrics:` + repeatedStringForMetrics + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralListCmd{`,
		`PeripheralNames:` + fmt.Sprintf("%v", this.PeripheralNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralDeleteCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralDeleteCmd{`,
		`PeripheralNames:` + fmt.Sprintf("%v", this.PeripheralNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralOperateCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralOperateCmd{`,
		`PeripheralName:` + fmt.Sprintf("%v", this.PeripheralName) + `,`,
		`OperationId:` + fmt.Sprintf("%v", this.OperationId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralMetricsCollectCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralMetricsCollectCmd{`,
		`PeripheralNames:` + fmt.Sprintf("%v", this.PeripheralNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdPeripheral(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PeripheralOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMethod", wireType)
			}
			m.ReportMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportMethod |= PeripheralMetric_ReportMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= PeripheralMetric_ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeripheralParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeripheralParams == nil {
				m.PeripheralParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PeripheralParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReporterParams == nil {
				m.ReporterParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReporterParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= PeripheralType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connector == nil {
				m.Connector = &Connectivity{}
			}
			if err := m.Connector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &PeripheralOperation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &PeripheralMetric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeripheralNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeripheralNames = append(m.PeripheralNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralDeleteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralDeleteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralDeleteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeripheralNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeripheralNames = append(m.PeripheralNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralOperateCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralOperateCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralOperateCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeripheralName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeripheralName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralMetricsCollectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralMetricsCollectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralMetricsCollectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeripheralNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeripheralNames = append(m.PeripheralNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdPeripheral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdPeripheral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdPeripheral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdPeripheral
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdPeripheral
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdPeripheral
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdPeripheral        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdPeripheral          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdPeripheral = fmt.Errorf("proto: unexpected end of group")
)
