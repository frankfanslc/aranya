// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_container_network.proto

// +build !rt_none

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContainerNetworkEnsureCmd struct {
	CidrIpv4 string `protobuf:"bytes,1,opt,name=cidr_ipv4,json=cidrIpv4,proto3" json:"cidr_ipv4,omitempty"`
	CidrIpv6 string `protobuf:"bytes,2,opt,name=cidr_ipv6,json=cidrIpv6,proto3" json:"cidr_ipv6,omitempty"`
}

func (m *ContainerNetworkEnsureCmd) Reset()      { *m = ContainerNetworkEnsureCmd{} }
func (*ContainerNetworkEnsureCmd) ProtoMessage() {}
func (*ContainerNetworkEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_56cb7053e08bef44, []int{0}
}
func (m *ContainerNetworkEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerNetworkEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerNetworkEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerNetworkEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNetworkEnsureCmd.Merge(m, src)
}
func (m *ContainerNetworkEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *ContainerNetworkEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNetworkEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNetworkEnsureCmd proto.InternalMessageInfo

func (m *ContainerNetworkEnsureCmd) GetCidrIpv4() string {
	if m != nil {
		return m.CidrIpv4
	}
	return ""
}

func (m *ContainerNetworkEnsureCmd) GetCidrIpv6() string {
	if m != nil {
		return m.CidrIpv6
	}
	return ""
}

func init() {
	proto.RegisterType((*ContainerNetworkEnsureCmd)(nil), "aranya.ContainerNetworkEnsureCmd")
}

func init() { proto.RegisterFile("cmd_container_network.proto", fileDescriptor_56cb7053e08bef44) }

var fileDescriptor_56cb7053e08bef44 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0x4d, 0x89,
	0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0x8a, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f,
	0xca, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54,
	0x0a, 0xe5, 0x92, 0x74, 0x86, 0x29, 0xf1, 0x83, 0xa8, 0x70, 0xcd, 0x2b, 0x2e, 0x2d, 0x4a, 0x75,
	0xce, 0x4d, 0x11, 0x92, 0xe6, 0xe2, 0x4c, 0xce, 0x4c, 0x29, 0x8a, 0xcf, 0x2c, 0x28, 0x33, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x00, 0x09, 0x78, 0x16, 0x94, 0x99, 0x20, 0x4b, 0x9a,
	0x49, 0x30, 0xa1, 0x48, 0x9a, 0x39, 0x85, 0x5f, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3,
	0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e,
	0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48,
	0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x52,
	0x4c, 0x2c, 0xca, 0x48, 0x2c, 0xd1, 0x4b, 0x49, 0x2d, 0xd3, 0x87, 0x38, 0x4f, 0x17, 0xec, 0x58,
	0x28, 0x27, 0x3d, 0xbf, 0x20, 0x29, 0x89, 0x0d, 0x2c, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xc7, 0x41, 0x00, 0xdd, 0x00, 0x00, 0x00,
}

func (this *ContainerNetworkEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerNetworkEnsureCmd)
	if !ok {
		that2, ok := that.(ContainerNetworkEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CidrIpv4 != that1.CidrIpv4 {
		return false
	}
	if this.CidrIpv6 != that1.CidrIpv6 {
		return false
	}
	return true
}
func (this *ContainerNetworkEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.ContainerNetworkEnsureCmd{")
	s = append(s, "CidrIpv4: "+fmt.Sprintf("%#v", this.CidrIpv4)+",\n")
	s = append(s, "CidrIpv6: "+fmt.Sprintf("%#v", this.CidrIpv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdContainerNetwork(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerNetworkEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerNetworkEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerNetworkEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CidrIpv6) > 0 {
		i -= len(m.CidrIpv6)
		copy(dAtA[i:], m.CidrIpv6)
		i = encodeVarintCmdContainerNetwork(dAtA, i, uint64(len(m.CidrIpv6)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CidrIpv4) > 0 {
		i -= len(m.CidrIpv4)
		copy(dAtA[i:], m.CidrIpv4)
		i = encodeVarintCmdContainerNetwork(dAtA, i, uint64(len(m.CidrIpv4)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdContainerNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdContainerNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerNetworkEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CidrIpv4)
	if l > 0 {
		n += 1 + l + sovCmdContainerNetwork(uint64(l))
	}
	l = len(m.CidrIpv6)
	if l > 0 {
		n += 1 + l + sovCmdContainerNetwork(uint64(l))
	}
	return n
}

func sovCmdContainerNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdContainerNetwork(x uint64) (n int) {
	return sovCmdContainerNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerNetworkEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerNetworkEnsureCmd{`,
		`CidrIpv4:` + fmt.Sprintf("%v", this.CidrIpv4) + `,`,
		`CidrIpv6:` + fmt.Sprintf("%v", this.CidrIpv6) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdContainerNetwork(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerNetworkEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdContainerNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerNetworkEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerNetworkEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrIpv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdContainerNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrIpv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrIpv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdContainerNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrIpv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdContainerNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdContainerNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdContainerNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdContainerNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdContainerNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdContainerNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdContainerNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdContainerNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdContainerNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdContainerNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdContainerNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdContainerNetwork = fmt.Errorf("proto: unexpected end of group")
)
