// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_network_host.proto

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostNetworkInterface struct {
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HardwareAddress string   `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty"`
	IpAddresses     []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (m *HostNetworkInterface) Reset()      { *m = HostNetworkInterface{} }
func (*HostNetworkInterface) ProtoMessage() {}
func (*HostNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdbf80709cae91f6, []int{0}
}
func (m *HostNetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkInterface.Merge(m, src)
}
func (m *HostNetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkInterface proto.InternalMessageInfo

func (m *HostNetworkInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostNetworkInterface) GetHardwareAddress() string {
	if m != nil {
		return m.HardwareAddress
	}
	return ""
}

func (m *HostNetworkInterface) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

type HostNetworkStatusMsg struct {
	Interfaces []*HostNetworkInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *HostNetworkStatusMsg) Reset()      { *m = HostNetworkStatusMsg{} }
func (*HostNetworkStatusMsg) ProtoMessage() {}
func (*HostNetworkStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdbf80709cae91f6, []int{1}
}
func (m *HostNetworkStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNetworkStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNetworkStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNetworkStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNetworkStatusMsg.Merge(m, src)
}
func (m *HostNetworkStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *HostNetworkStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNetworkStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HostNetworkStatusMsg proto.InternalMessageInfo

func (m *HostNetworkStatusMsg) GetInterfaces() []*HostNetworkInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func init() {
	proto.RegisterType((*HostNetworkInterface)(nil), "aranya.HostNetworkInterface")
	proto.RegisterType((*HostNetworkStatusMsg)(nil), "aranya.HostNetworkStatusMsg")
}

func init() { proto.RegisterFile("msg_network_host.proto", fileDescriptor_bdbf80709cae91f6) }

var fileDescriptor_bdbf80709cae91f6 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x2d, 0x4e, 0x8f,
	0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x8e, 0xcf, 0xc8, 0x2f, 0x2e, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54, 0xaa, 0xe0, 0x12, 0xf1, 0xc8,
	0x2f, 0x2e, 0xf1, 0x83, 0xa8, 0xf0, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0x15, 0x12,
	0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85,
	0x34, 0xb9, 0x04, 0x32, 0x12, 0x8b, 0x52, 0xca, 0x13, 0x8b, 0x52, 0xe3, 0x13, 0x53, 0x52, 0x8a,
	0x52, 0x8b, 0x8b, 0x25, 0x98, 0xc0, 0xf2, 0xfc, 0x30, 0x71, 0x47, 0x88, 0xb0, 0x90, 0x22, 0x17,
	0x4f, 0x66, 0x01, 0x4c, 0x51, 0x6a, 0xb1, 0x04, 0xb3, 0x02, 0xb3, 0x06, 0x67, 0x10, 0x77, 0x66,
	0x81, 0x23, 0x4c, 0x48, 0x29, 0x04, 0xc5, 0xe6, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0xdf, 0xe2,
	0x74, 0x21, 0x1b, 0x2e, 0xae, 0x4c, 0x98, 0x33, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d,
	0x64, 0xf4, 0x20, 0xce, 0xd5, 0xc3, 0xe6, 0xd6, 0x20, 0x24, 0xf5, 0x4e, 0xe1, 0x17, 0x1e, 0xca,
	0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f,
	0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17,
	0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x14, 0x13, 0x8b, 0x32, 0x12, 0x4b, 0xf4, 0x52, 0x52, 0xcb, 0xf4,
	0x21, 0x16, 0xe9, 0x82, 0x43, 0x09, 0xca, 0x49, 0xcf, 0x2f, 0x48, 0x4a, 0x62, 0x03, 0x8b, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x66, 0xbf, 0x8e, 0x51, 0x01, 0x00, 0x00,
}

func (this *HostNetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkInterface)
	if !ok {
		that2, ok := that.(HostNetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HardwareAddress != that1.HardwareAddress {
		return false
	}
	if len(this.IpAddresses) != len(that1.IpAddresses) {
		return false
	}
	for i := range this.IpAddresses {
		if this.IpAddresses[i] != that1.IpAddresses[i] {
			return false
		}
	}
	return true
}
func (this *HostNetworkStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostNetworkStatusMsg)
	if !ok {
		that2, ok := that.(HostNetworkStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *HostNetworkInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.HostNetworkInterface{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HardwareAddress: "+fmt.Sprintf("%#v", this.HardwareAddress)+",\n")
	s = append(s, "IpAddresses: "+fmt.Sprintf("%#v", this.IpAddresses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostNetworkStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.HostNetworkStatusMsg{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgNetworkHost(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HostNetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpAddresses) > 0 {
		for iNdEx := len(m.IpAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpAddresses[iNdEx])
			copy(dAtA[i:], m.IpAddresses[iNdEx])
			i = encodeVarintMsgNetworkHost(dAtA, i, uint64(len(m.IpAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HardwareAddress) > 0 {
		i -= len(m.HardwareAddress)
		copy(dAtA[i:], m.HardwareAddress)
		i = encodeVarintMsgNetworkHost(dAtA, i, uint64(len(m.HardwareAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsgNetworkHost(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostNetworkStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNetworkStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNetworkStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgNetworkHost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgNetworkHost(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgNetworkHost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostNetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsgNetworkHost(uint64(l))
	}
	l = len(m.HardwareAddress)
	if l > 0 {
		n += 1 + l + sovMsgNetworkHost(uint64(l))
	}
	if len(m.IpAddresses) > 0 {
		for _, s := range m.IpAddresses {
			l = len(s)
			n += 1 + l + sovMsgNetworkHost(uint64(l))
		}
	}
	return n
}

func (m *HostNetworkStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovMsgNetworkHost(uint64(l))
		}
	}
	return n
}

func sovMsgNetworkHost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgNetworkHost(x uint64) (n int) {
	return sovMsgNetworkHost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HostNetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostNetworkInterface{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HardwareAddress:` + fmt.Sprintf("%v", this.HardwareAddress) + `,`,
		`IpAddresses:` + fmt.Sprintf("%v", this.IpAddresses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostNetworkStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*HostNetworkInterface{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(f.String(), "HostNetworkInterface", "HostNetworkInterface", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&HostNetworkStatusMsg{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgNetworkHost(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HostNetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNetworkHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddresses = append(m.IpAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNetworkHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNetworkStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNetworkHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNetworkStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNetworkStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &HostNetworkInterface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNetworkHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgNetworkHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgNetworkHost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgNetworkHost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNetworkHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgNetworkHost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgNetworkHost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgNetworkHost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgNetworkHost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgNetworkHost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgNetworkHost = fmt.Errorf("proto: unexpected end of group")
)
