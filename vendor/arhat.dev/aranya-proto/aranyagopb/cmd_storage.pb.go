// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_storage.proto

// +build !nostorage

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StorageListCmd struct {
}

func (m *StorageListCmd) Reset()      { *m = StorageListCmd{} }
func (*StorageListCmd) ProtoMessage() {}
func (*StorageListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_afee32c77d5f0ea9, []int{0}
}
func (m *StorageListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageListCmd.Merge(m, src)
}
func (m *StorageListCmd) XXX_Size() int {
	return m.Size()
}
func (m *StorageListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_StorageListCmd proto.InternalMessageInfo

type StorageEnsureCmd struct {
	RemotePath string `protobuf:"bytes,1,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
	LocalPath  string `protobuf:"bytes,2,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
}

func (m *StorageEnsureCmd) Reset()      { *m = StorageEnsureCmd{} }
func (*StorageEnsureCmd) ProtoMessage() {}
func (*StorageEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_afee32c77d5f0ea9, []int{1}
}
func (m *StorageEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageEnsureCmd.Merge(m, src)
}
func (m *StorageEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *StorageEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_StorageEnsureCmd proto.InternalMessageInfo

func (m *StorageEnsureCmd) GetRemotePath() string {
	if m != nil {
		return m.RemotePath
	}
	return ""
}

func (m *StorageEnsureCmd) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

type StorageDeleteCmd struct {
	RemotePath string `protobuf:"bytes,1,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
	LocalPath  string `protobuf:"bytes,2,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
}

func (m *StorageDeleteCmd) Reset()      { *m = StorageDeleteCmd{} }
func (*StorageDeleteCmd) ProtoMessage() {}
func (*StorageDeleteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_afee32c77d5f0ea9, []int{2}
}
func (m *StorageDeleteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageDeleteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageDeleteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageDeleteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageDeleteCmd.Merge(m, src)
}
func (m *StorageDeleteCmd) XXX_Size() int {
	return m.Size()
}
func (m *StorageDeleteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageDeleteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_StorageDeleteCmd proto.InternalMessageInfo

func (m *StorageDeleteCmd) GetRemotePath() string {
	if m != nil {
		return m.RemotePath
	}
	return ""
}

func (m *StorageDeleteCmd) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func init() {
	proto.RegisterType((*StorageListCmd)(nil), "aranya.StorageListCmd")
	proto.RegisterType((*StorageEnsureCmd)(nil), "aranya.StorageEnsureCmd")
	proto.RegisterType((*StorageDeleteCmd)(nil), "aranya.StorageDeleteCmd")
}

func init() { proto.RegisterFile("cmd_storage.proto", fileDescriptor_afee32c77d5f0ea9) }

var fileDescriptor_afee32c77d5f0ea9 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0x4d, 0x89,
	0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54, 0x12, 0xe0, 0xe2, 0x0b, 0x86, 0x48, 0xf8, 0x64, 0x16, 0x97,
	0x38, 0xe7, 0xa6, 0x28, 0x05, 0x71, 0x09, 0x40, 0x45, 0x5c, 0xf3, 0x8a, 0x4b, 0x8b, 0x52, 0x9d,
	0x73, 0x53, 0x84, 0xe4, 0xb9, 0xb8, 0x8b, 0x52, 0x73, 0xf3, 0x4b, 0x52, 0xe3, 0x0b, 0x12, 0x4b,
	0x32, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xb8, 0x20, 0x42, 0x01, 0x89, 0x25, 0x19, 0x42,
	0xb2, 0x5c, 0x5c, 0x39, 0xf9, 0xc9, 0x89, 0x39, 0x10, 0x79, 0x26, 0xb0, 0x3c, 0x27, 0x58, 0x04,
	0x24, 0x8d, 0x64, 0xa6, 0x4b, 0x6a, 0x4e, 0x6a, 0x09, 0x35, 0xcc, 0x74, 0x0a, 0xbf, 0xf0, 0x50,
	0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78,
	0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe,
	0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x98, 0x58, 0x94, 0x91, 0x58, 0xa2, 0x97, 0x92, 0x5a, 0xa6,
	0x0f, 0x09, 0x01, 0x5d, 0x70, 0x78, 0x40, 0x39, 0xe9, 0xf9, 0x05, 0x49, 0x49, 0x6c, 0x60, 0x11,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xda, 0xe0, 0x6a, 0x36, 0x01, 0x00, 0x00,
}

func (this *StorageListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageListCmd)
	if !ok {
		that2, ok := that.(StorageListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StorageEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageEnsureCmd)
	if !ok {
		that2, ok := that.(StorageEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RemotePath != that1.RemotePath {
		return false
	}
	if this.LocalPath != that1.LocalPath {
		return false
	}
	return true
}
func (this *StorageDeleteCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageDeleteCmd)
	if !ok {
		that2, ok := that.(StorageDeleteCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RemotePath != that1.RemotePath {
		return false
	}
	if this.LocalPath != that1.LocalPath {
		return false
	}
	return true
}
func (this *StorageListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.StorageListCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.StorageEnsureCmd{")
	s = append(s, "RemotePath: "+fmt.Sprintf("%#v", this.RemotePath)+",\n")
	s = append(s, "LocalPath: "+fmt.Sprintf("%#v", this.LocalPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageDeleteCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.StorageDeleteCmd{")
	s = append(s, "RemotePath: "+fmt.Sprintf("%#v", this.RemotePath)+",\n")
	s = append(s, "LocalPath: "+fmt.Sprintf("%#v", this.LocalPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdStorage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StorageListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StorageEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintCmdStorage(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemotePath) > 0 {
		i -= len(m.RemotePath)
		copy(dAtA[i:], m.RemotePath)
		i = encodeVarintCmdStorage(dAtA, i, uint64(len(m.RemotePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageDeleteCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageDeleteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageDeleteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintCmdStorage(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemotePath) > 0 {
		i -= len(m.RemotePath)
		copy(dAtA[i:], m.RemotePath)
		i = encodeVarintCmdStorage(dAtA, i, uint64(len(m.RemotePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StorageEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemotePath)
	if l > 0 {
		n += 1 + l + sovCmdStorage(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovCmdStorage(uint64(l))
	}
	return n
}

func (m *StorageDeleteCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemotePath)
	if l > 0 {
		n += 1 + l + sovCmdStorage(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovCmdStorage(uint64(l))
	}
	return n
}

func sovCmdStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdStorage(x uint64) (n int) {
	return sovCmdStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StorageListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageListCmd{`,
		`}`,
	}, "")
	return s
}
func (this *StorageEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageEnsureCmd{`,
		`RemotePath:` + fmt.Sprintf("%v", this.RemotePath) + `,`,
		`LocalPath:` + fmt.Sprintf("%v", this.LocalPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageDeleteCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageDeleteCmd{`,
		`RemotePath:` + fmt.Sprintf("%v", this.RemotePath) + `,`,
		`LocalPath:` + fmt.Sprintf("%v", this.LocalPath) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdStorage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StorageListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCmdStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageDeleteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageDeleteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageDeleteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdStorage = fmt.Errorf("proto: unexpected end of group")
)
