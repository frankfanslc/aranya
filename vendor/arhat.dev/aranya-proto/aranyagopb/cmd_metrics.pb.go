// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_metrics.proto

// +build !nometrics

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetricsTarget int32

const (
	METRICS_TARGET_NODE      MetricsTarget = 0
	METRICS_TARGET_CONTAINER MetricsTarget = 1
)

var MetricsTarget_name = map[int32]string{
	0: "METRICS_TARGET_NODE",
	1: "METRICS_TARGET_CONTAINER",
}

var MetricsTarget_value = map[string]int32{
	"METRICS_TARGET_NODE":      0,
	"METRICS_TARGET_CONTAINER": 1,
}

func (MetricsTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51db41603dd56180, []int{0}
}

type MetricsConfigCmd struct {
	Target    MetricsTarget `protobuf:"varint,1,opt,name=target,proto3,enum=aranya.MetricsTarget" json:"target,omitempty"`
	Collect   []string      `protobuf:"bytes,2,rep,name=collect,proto3" json:"collect,omitempty"`
	ExtraArgs []string      `protobuf:"bytes,3,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
}

func (m *MetricsConfigCmd) Reset()      { *m = MetricsConfigCmd{} }
func (*MetricsConfigCmd) ProtoMessage() {}
func (*MetricsConfigCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_51db41603dd56180, []int{0}
}
func (m *MetricsConfigCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsConfigCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsConfigCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsConfigCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsConfigCmd.Merge(m, src)
}
func (m *MetricsConfigCmd) XXX_Size() int {
	return m.Size()
}
func (m *MetricsConfigCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsConfigCmd.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsConfigCmd proto.InternalMessageInfo

func (m *MetricsConfigCmd) GetTarget() MetricsTarget {
	if m != nil {
		return m.Target
	}
	return METRICS_TARGET_NODE
}

func (m *MetricsConfigCmd) GetCollect() []string {
	if m != nil {
		return m.Collect
	}
	return nil
}

func (m *MetricsConfigCmd) GetExtraArgs() []string {
	if m != nil {
		return m.ExtraArgs
	}
	return nil
}

type MetricsCollectCmd struct {
	Target MetricsTarget `protobuf:"varint,1,opt,name=target,proto3,enum=aranya.MetricsTarget" json:"target,omitempty"`
}

func (m *MetricsCollectCmd) Reset()      { *m = MetricsCollectCmd{} }
func (*MetricsCollectCmd) ProtoMessage() {}
func (*MetricsCollectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_51db41603dd56180, []int{1}
}
func (m *MetricsCollectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsCollectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsCollectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsCollectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsCollectCmd.Merge(m, src)
}
func (m *MetricsCollectCmd) XXX_Size() int {
	return m.Size()
}
func (m *MetricsCollectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsCollectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsCollectCmd proto.InternalMessageInfo

func (m *MetricsCollectCmd) GetTarget() MetricsTarget {
	if m != nil {
		return m.Target
	}
	return METRICS_TARGET_NODE
}

func init() {
	proto.RegisterEnum("aranya.MetricsTarget", MetricsTarget_name, MetricsTarget_value)
	proto.RegisterType((*MetricsConfigCmd)(nil), "aranya.MetricsConfigCmd")
	proto.RegisterType((*MetricsCollectCmd)(nil), "aranya.MetricsCollectCmd")
}

func init() { proto.RegisterFile("cmd_metrics.proto", fileDescriptor_51db41603dd56180) }

var fileDescriptor_51db41603dd56180 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0x4d, 0x89,
	0xcf, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54, 0xaa, 0xe2, 0x12, 0xf0, 0x85, 0x48, 0x38, 0xe7, 0xe7, 0xa5,
	0x65, 0xa6, 0x3b, 0xe7, 0xa6, 0x08, 0xe9, 0x72, 0xb1, 0x95, 0x24, 0x16, 0xa5, 0xa7, 0x96, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x89, 0xea, 0x41, 0x14, 0xeb, 0x41, 0x55, 0x86, 0x80, 0x25,
	0x83, 0xa0, 0x8a, 0x84, 0x24, 0xb8, 0xd8, 0x93, 0xf3, 0x73, 0x72, 0x52, 0x93, 0x4b, 0x24, 0x98,
	0x14, 0x98, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x59, 0x2e, 0xae, 0xd4, 0x8a, 0x92, 0xa2, 0xc4,
	0xf8, 0xc4, 0xa2, 0xf4, 0x62, 0x09, 0x66, 0xb0, 0x24, 0x27, 0x58, 0xc4, 0xb1, 0x28, 0xbd, 0x58,
	0xc9, 0x89, 0x4b, 0x10, 0x6e, 0x37, 0x58, 0x03, 0xe9, 0x96, 0x6b, 0xb9, 0x71, 0xf1, 0xa2, 0x48,
	0x08, 0x89, 0x73, 0x09, 0xfb, 0xba, 0x86, 0x04, 0x79, 0x3a, 0x07, 0xc7, 0x87, 0x38, 0x06, 0xb9,
	0xbb, 0x86, 0xc4, 0xfb, 0xf9, 0xbb, 0xb8, 0x0a, 0x30, 0x08, 0xc9, 0x70, 0x49, 0xa0, 0x49, 0x38,
	0xfb, 0xfb, 0x85, 0x38, 0x7a, 0xfa, 0xb9, 0x06, 0x09, 0x30, 0x3a, 0x85, 0x5f, 0x78, 0x28, 0xc7,
	0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92,
	0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c,
	0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0x52, 0x4c, 0x2c, 0xca, 0x48, 0x2c, 0xd1, 0x4b, 0x49, 0x2d, 0xd3, 0x87,
	0xb8, 0x52, 0x17, 0x1c, 0xba, 0x50, 0x4e, 0x7a, 0x7e, 0x41, 0x52, 0x12, 0x1b, 0x58, 0xc4, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xcc, 0x4d, 0x57, 0x84, 0x01, 0x00, 0x00,
}

func (x MetricsTarget) String() string {
	s, ok := MetricsTarget_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MetricsConfigCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsConfigCmd)
	if !ok {
		that2, ok := that.(MetricsConfigCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Collect) != len(that1.Collect) {
		return false
	}
	for i := range this.Collect {
		if this.Collect[i] != that1.Collect[i] {
			return false
		}
	}
	if len(this.ExtraArgs) != len(that1.ExtraArgs) {
		return false
	}
	for i := range this.ExtraArgs {
		if this.ExtraArgs[i] != that1.ExtraArgs[i] {
			return false
		}
	}
	return true
}
func (this *MetricsCollectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsCollectCmd)
	if !ok {
		that2, ok := that.(MetricsCollectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	return true
}
func (this *MetricsConfigCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.MetricsConfigCmd{")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Collect: "+fmt.Sprintf("%#v", this.Collect)+",\n")
	s = append(s, "ExtraArgs: "+fmt.Sprintf("%#v", this.ExtraArgs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsCollectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.MetricsCollectCmd{")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdMetrics(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MetricsConfigCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsConfigCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsConfigCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraArgs) > 0 {
		for iNdEx := len(m.ExtraArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtraArgs[iNdEx])
			copy(dAtA[i:], m.ExtraArgs[iNdEx])
			i = encodeVarintCmdMetrics(dAtA, i, uint64(len(m.ExtraArgs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Collect) > 0 {
		for iNdEx := len(m.Collect) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Collect[iNdEx])
			copy(dAtA[i:], m.Collect[iNdEx])
			i = encodeVarintCmdMetrics(dAtA, i, uint64(len(m.Collect[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Target != 0 {
		i = encodeVarintCmdMetrics(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetricsCollectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsCollectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsCollectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != 0 {
		i = encodeVarintCmdMetrics(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdMetrics(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdMetrics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetricsConfigCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != 0 {
		n += 1 + sovCmdMetrics(uint64(m.Target))
	}
	if len(m.Collect) > 0 {
		for _, s := range m.Collect {
			l = len(s)
			n += 1 + l + sovCmdMetrics(uint64(l))
		}
	}
	if len(m.ExtraArgs) > 0 {
		for _, s := range m.ExtraArgs {
			l = len(s)
			n += 1 + l + sovCmdMetrics(uint64(l))
		}
	}
	return n
}

func (m *MetricsCollectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != 0 {
		n += 1 + sovCmdMetrics(uint64(m.Target))
	}
	return n
}

func sovCmdMetrics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdMetrics(x uint64) (n int) {
	return sovCmdMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MetricsConfigCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsConfigCmd{`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Collect:` + fmt.Sprintf("%v", this.Collect) + `,`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsCollectCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsCollectCmd{`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdMetrics(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MetricsConfigCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsConfigCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsConfigCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= MetricsTarget(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collect = append(m.Collect, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = append(m.ExtraArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsCollectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsCollectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsCollectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= MetricsTarget(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdMetrics
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdMetrics
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdMetrics
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdMetrics        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdMetrics          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdMetrics = fmt.Errorf("proto: unexpected end of group")
)
