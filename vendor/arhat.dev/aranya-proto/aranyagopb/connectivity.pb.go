// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connectivity.proto

// +build !nodev

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLSConfig struct {
	ServerName         string   `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	InsecureSkipVerify bool     `protobuf:"varint,2,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	MinVersion         uint32   `protobuf:"varint,3,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion         uint32   `protobuf:"varint,4,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	CaCert             []byte   `protobuf:"bytes,5,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Cert               []byte   `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	Key                []byte   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	CipherSuites       []uint32 `protobuf:"varint,8,rep,packed,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	NextProtos         []string `protobuf:"bytes,9,rep,name=next_protos,json=nextProtos,proto3" json:"next_protos,omitempty"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2872c2021a21e8fe, []int{0}
}
func (m *TLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfig.Merge(m, src)
}
func (m *TLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfig proto.InternalMessageInfo

func (m *TLSConfig) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSConfig) GetInsecureSkipVerify() bool {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return false
}

func (m *TLSConfig) GetMinVersion() uint32 {
	if m != nil {
		return m.MinVersion
	}
	return 0
}

func (m *TLSConfig) GetMaxVersion() uint32 {
	if m != nil {
		return m.MaxVersion
	}
	return 0
}

func (m *TLSConfig) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *TLSConfig) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *TLSConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TLSConfig) GetCipherSuites() []uint32 {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TLSConfig) GetNextProtos() []string {
	if m != nil {
		return m.NextProtos
	}
	return nil
}

type Connectivity struct {
	// method name of the connectivity
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// target to connect
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// parameters used when creating this connectivity
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tls    *TLSConfig        `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (m *Connectivity) Reset()      { *m = Connectivity{} }
func (*Connectivity) ProtoMessage() {}
func (*Connectivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_2872c2021a21e8fe, []int{1}
}
func (m *Connectivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Connectivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Connectivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Connectivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connectivity.Merge(m, src)
}
func (m *Connectivity) XXX_Size() int {
	return m.Size()
}
func (m *Connectivity) XXX_DiscardUnknown() {
	xxx_messageInfo_Connectivity.DiscardUnknown(m)
}

var xxx_messageInfo_Connectivity proto.InternalMessageInfo

func (m *Connectivity) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Connectivity) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Connectivity) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Connectivity) GetTls() *TLSConfig {
	if m != nil {
		return m.Tls
	}
	return nil
}

func init() {
	proto.RegisterType((*TLSConfig)(nil), "aranya.TLSConfig")
	proto.RegisterType((*Connectivity)(nil), "aranya.Connectivity")
	proto.RegisterMapType((map[string]string)(nil), "aranya.Connectivity.ParamsEntry")
}

func init() { proto.RegisterFile("connectivity.proto", fileDescriptor_2872c2021a21e8fe) }

var fileDescriptor_2872c2021a21e8fe = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x71, 0xeb, 0x36, 0x2f, 0x89, 0x04, 0xa7, 0x0a, 0x2c, 0x86, 0xc3, 0xb4, 0x8b,
	0x17, 0x0c, 0x2a, 0x4b, 0x61, 0x24, 0x62, 0x43, 0xa8, 0x72, 0x50, 0x91, 0x58, 0xac, 0xab, 0xfb,
	0x9a, 0x9c, 0x52, 0x9f, 0xad, 0xbb, 0x8b, 0x15, 0x6f, 0x7c, 0x04, 0xbe, 0x04, 0x12, 0x1f, 0x85,
	0x31, 0x63, 0x46, 0xe2, 0x2c, 0x8c, 0xfd, 0x08, 0xc8, 0x67, 0x27, 0xca, 0x76, 0xef, 0xf7, 0xfe,
	0x77, 0x7a, 0xf7, 0x7b, 0x40, 0xd3, 0x5c, 0x4a, 0x4c, 0x8d, 0x28, 0x85, 0xa9, 0xa2, 0x42, 0xe5,
	0x26, 0xa7, 0x1e, 0x57, 0x5c, 0x56, 0xfc, 0xfc, 0x57, 0x0f, 0xfa, 0x5f, 0x3f, 0x4f, 0xc6, 0xb9,
	0xbc, 0x17, 0x53, 0xfa, 0x12, 0x06, 0x1a, 0x55, 0x89, 0x2a, 0x91, 0x3c, 0x43, 0x9f, 0x04, 0x24,
	0xec, 0xc7, 0xd0, 0xa2, 0x2f, 0x3c, 0x43, 0xfa, 0x16, 0xce, 0x84, 0xd4, 0x98, 0x2e, 0x14, 0x26,
	0x7a, 0x2e, 0x8a, 0xa4, 0x44, 0x25, 0xee, 0x2b, 0xbf, 0x17, 0x90, 0xf0, 0x34, 0xa6, 0xbb, 0xde,
	0x64, 0x2e, 0x8a, 0x1b, 0xdb, 0x69, 0x9e, 0xcc, 0x84, 0x6c, 0x72, 0x5a, 0xe4, 0xd2, 0x77, 0x03,
	0x12, 0x8e, 0x62, 0xc8, 0x84, 0xbc, 0x69, 0x89, 0x0d, 0xf0, 0xe5, 0x3e, 0x70, 0xd4, 0x05, 0xf8,
	0x72, 0x17, 0x78, 0x0e, 0x27, 0x29, 0x4f, 0x52, 0x54, 0xc6, 0x3f, 0x0e, 0x48, 0x38, 0x8c, 0xbd,
	0x94, 0x8f, 0x51, 0x19, 0x4a, 0xe1, 0xc8, 0x52, 0xcf, 0x52, 0x7b, 0xa6, 0x4f, 0xc0, 0x9d, 0x63,
	0xe5, 0x9f, 0x58, 0xd4, 0x1c, 0xe9, 0x05, 0x8c, 0x52, 0x51, 0xcc, 0x50, 0x25, 0x7a, 0x21, 0x0c,
	0x6a, 0xff, 0x34, 0x70, 0xc3, 0x51, 0x3c, 0x6c, 0xe1, 0xc4, 0xb2, 0x66, 0x08, 0x89, 0x4b, 0x93,
	0x58, 0x39, 0xda, 0xef, 0x07, 0x6e, 0xf3, 0xf1, 0x06, 0x5d, 0x5b, 0x72, 0xbe, 0x26, 0x30, 0x1c,
	0x1f, 0x68, 0xa4, 0xcf, 0xc0, 0xcb, 0xd0, 0xcc, 0xf2, 0xbb, 0xce, 0x52, 0x57, 0x35, 0xdc, 0x70,
	0x35, 0x45, 0x63, 0x9d, 0xf4, 0xe3, 0xae, 0xa2, 0x57, 0xe0, 0x15, 0x5c, 0xf1, 0x4c, 0xfb, 0x6e,
	0xe0, 0x86, 0x83, 0xcb, 0x20, 0x6a, 0x37, 0x10, 0x1d, 0xbe, 0x1a, 0x5d, 0xdb, 0xc8, 0x27, 0x69,
	0x54, 0x15, 0x77, 0x79, 0x7a, 0x01, 0xae, 0x79, 0xd0, 0x56, 0xcc, 0xe0, 0xf2, 0xe9, 0xee, 0xda,
	0x7e, 0x69, 0x71, 0xd3, 0x7d, 0xf1, 0x1e, 0x06, 0x07, 0x77, 0x77, 0x1a, 0xda, 0xd1, 0xac, 0x86,
	0x33, 0x38, 0x2e, 0xf9, 0xc3, 0x02, 0xbb, 0xb1, 0xda, 0xe2, 0x43, 0xef, 0x8a, 0x7c, 0xfc, 0xb6,
	0xda, 0x30, 0x67, 0xbd, 0x61, 0xce, 0xe3, 0x86, 0x91, 0x1f, 0x35, 0x23, 0xbf, 0x6b, 0x46, 0xfe,
	0xd4, 0x8c, 0xac, 0x6a, 0x46, 0xfe, 0xd6, 0x8c, 0xfc, 0xab, 0x99, 0xf3, 0x58, 0x33, 0xf2, 0x73,
	0xcb, 0x9c, 0xd5, 0x96, 0x39, 0xeb, 0x2d, 0x73, 0xbe, 0xbf, 0xe2, 0x6a, 0xc6, 0x4d, 0x74, 0x87,
	0xe5, 0x9b, 0x76, 0xa2, 0xd7, 0xd6, 0x5d, 0x57, 0x4c, 0xf3, 0xe2, 0xf6, 0xd6, 0xb3, 0xe4, 0xdd,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x5f, 0xe1, 0xc9, 0x80, 0x02, 0x00, 0x00,
}

func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.InsecureSkipVerify != that1.InsecureSkipVerify {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if !bytes.Equal(this.CaCert, that1.CaCert) {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if len(this.NextProtos) != len(that1.NextProtos) {
		return false
	}
	for i := range this.NextProtos {
		if this.NextProtos[i] != that1.NextProtos[i] {
			return false
		}
	}
	return true
}
func (this *Connectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Connectivity)
	if !ok {
		that2, ok := that.(Connectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aranyagopb.TLSConfig{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "InsecureSkipVerify: "+fmt.Sprintf("%#v", this.InsecureSkipVerify)+",\n")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "NextProtos: "+fmt.Sprintf("%#v", this.NextProtos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Connectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aranyagopb.Connectivity{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConnectivity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextProtos) > 0 {
		for iNdEx := len(m.NextProtos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NextProtos[iNdEx])
			copy(dAtA[i:], m.NextProtos[iNdEx])
			i = encodeVarintConnectivity(dAtA, i, uint64(len(m.NextProtos[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CipherSuites) > 0 {
		dAtA2 := make([]byte, len(m.CipherSuites)*10)
		var j1 int
		for _, num := range m.CipherSuites {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintConnectivity(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxVersion != 0 {
		i = encodeVarintConnectivity(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinVersion != 0 {
		i = encodeVarintConnectivity(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.InsecureSkipVerify {
		i--
		if m.InsecureSkipVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Connectivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Connectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConnectivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintConnectivity(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConnectivity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConnectivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintConnectivity(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConnectivity(dAtA []byte, offset int, v uint64) int {
	offset -= sovConnectivity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	if m.InsecureSkipVerify {
		n += 2
	}
	if m.MinVersion != 0 {
		n += 1 + sovConnectivity(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovConnectivity(uint64(m.MaxVersion))
	}
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	if len(m.CipherSuites) > 0 {
		l = 0
		for _, e := range m.CipherSuites {
			l += sovConnectivity(uint64(e))
		}
		n += 1 + sovConnectivity(uint64(l)) + l
	}
	if len(m.NextProtos) > 0 {
		for _, s := range m.NextProtos {
			l = len(s)
			n += 1 + l + sovConnectivity(uint64(l))
		}
	}
	return n
}

func (m *Connectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovConnectivity(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConnectivity(uint64(len(k))) + 1 + len(v) + sovConnectivity(uint64(len(v)))
			n += mapEntrySize + 1 + sovConnectivity(uint64(mapEntrySize))
		}
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}

func sovConnectivity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConnectivity(x uint64) (n int) {
	return sovConnectivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`InsecureSkipVerify:` + fmt.Sprintf("%v", this.InsecureSkipVerify) + `,`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`NextProtos:` + fmt.Sprintf("%v", this.NextProtos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Connectivity) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&Connectivity{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Tls:` + strings.Replace(this.Tls.String(), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConnectivity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureSkipVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureSkipVerify = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConnectivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CipherSuites = append(m.CipherSuites, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConnectivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConnectivity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthConnectivity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CipherSuites) == 0 {
					m.CipherSuites = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConnectivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CipherSuites = append(m.CipherSuites, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProtos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProtos = append(m.NextProtos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnectivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connectivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connectivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connectivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConnectivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConnectivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConnectivity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConnectivity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConnectivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthConnectivity
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthConnectivity
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConnectivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthConnectivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &TLSConfig{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnectivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConnectivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConnectivity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConnectivity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConnectivity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConnectivity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConnectivity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConnectivity = fmt.Errorf("proto: unexpected end of group")
)
