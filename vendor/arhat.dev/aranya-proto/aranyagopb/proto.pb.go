// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CmdType int32

const (
	// 0-4: raw data related cmd
	CMD_DATA_UPSTREAM CmdType = 0
	CMD_SESSION_CLOSE CmdType = 5
	CMD_REJECT        CmdType = 6
	// network operations, protobuf bytes of abbot proto
	CMD_NET CmdType = 10
	// 11-19: node operations
	CMD_NODE_INFO_GET CmdType = 11
	CMD_EXEC          CmdType = 12
	CMD_ATTACH        CmdType = 13
	CMD_LOGS          CmdType = 14
	CMD_TTY_RESIZE    CmdType = 15
	CMD_PORT_FORWARD  CmdType = 16
	// 21-29: metrics operations
	CMD_METRICS_CONFIG  CmdType = 21
	CMD_METRICS_COLLECT CmdType = 22
	// 31-39: credentials operations
	CMD_CRED_ENSURE CmdType = 31
	// 41-49: container image / application bundle operations
	CMD_IMAGE_LIST   CmdType = 41
	CMD_IMAGE_ENSURE CmdType = 42
	CMD_IMAGE_DELETE CmdType = 43
	// 51-59: storage operations (remote csi)
	CMD_STORAGE_LIST   CmdType = 51
	CMD_STORAGE_ENSURE CmdType = 52
	CMD_STORAGE_DELETE CmdType = 53
	// 61-69: pod container provision
	CMD_POD_LIST   CmdType = 61
	CMD_POD_ENSURE CmdType = 62
	CMD_POD_DELETE CmdType = 63
	// 71-79: peripheral operations
	CMD_PERIPHERAL_LIST            CmdType = 71
	CMD_PERIPHERAL_ENSURE          CmdType = 72
	CMD_PERIPHERAL_DELETE          CmdType = 73
	CMD_PERIPHERAL_OPERATE         CmdType = 74
	CMD_PERIPHERAL_COLLECT_METRICS CmdType = 75
)

var CmdType_name = map[int32]string{
	0:  "CMD_DATA_UPSTREAM",
	5:  "CMD_SESSION_CLOSE",
	6:  "CMD_REJECT",
	10: "CMD_NET",
	11: "CMD_NODE_INFO_GET",
	12: "CMD_EXEC",
	13: "CMD_ATTACH",
	14: "CMD_LOGS",
	15: "CMD_TTY_RESIZE",
	16: "CMD_PORT_FORWARD",
	21: "CMD_METRICS_CONFIG",
	22: "CMD_METRICS_COLLECT",
	31: "CMD_CRED_ENSURE",
	41: "CMD_IMAGE_LIST",
	42: "CMD_IMAGE_ENSURE",
	43: "CMD_IMAGE_DELETE",
	51: "CMD_STORAGE_LIST",
	52: "CMD_STORAGE_ENSURE",
	53: "CMD_STORAGE_DELETE",
	61: "CMD_POD_LIST",
	62: "CMD_POD_ENSURE",
	63: "CMD_POD_DELETE",
	71: "CMD_PERIPHERAL_LIST",
	72: "CMD_PERIPHERAL_ENSURE",
	73: "CMD_PERIPHERAL_DELETE",
	74: "CMD_PERIPHERAL_OPERATE",
	75: "CMD_PERIPHERAL_COLLECT_METRICS",
}

var CmdType_value = map[string]int32{
	"CMD_DATA_UPSTREAM":              0,
	"CMD_SESSION_CLOSE":              5,
	"CMD_REJECT":                     6,
	"CMD_NET":                        10,
	"CMD_NODE_INFO_GET":              11,
	"CMD_EXEC":                       12,
	"CMD_ATTACH":                     13,
	"CMD_LOGS":                       14,
	"CMD_TTY_RESIZE":                 15,
	"CMD_PORT_FORWARD":               16,
	"CMD_METRICS_CONFIG":             21,
	"CMD_METRICS_COLLECT":            22,
	"CMD_CRED_ENSURE":                31,
	"CMD_IMAGE_LIST":                 41,
	"CMD_IMAGE_ENSURE":               42,
	"CMD_IMAGE_DELETE":               43,
	"CMD_STORAGE_LIST":               51,
	"CMD_STORAGE_ENSURE":             52,
	"CMD_STORAGE_DELETE":             53,
	"CMD_POD_LIST":                   61,
	"CMD_POD_ENSURE":                 62,
	"CMD_POD_DELETE":                 63,
	"CMD_PERIPHERAL_LIST":            71,
	"CMD_PERIPHERAL_ENSURE":          72,
	"CMD_PERIPHERAL_DELETE":          73,
	"CMD_PERIPHERAL_OPERATE":         74,
	"CMD_PERIPHERAL_COLLECT_METRICS": 75,
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}

type MsgType int32

const (
	MSG_DATA         MsgType = 0
	MSG_DATA_DEFAULT MsgType = 0
	MSG_DATA_STDOUT  MsgType = 0
	MSG_DATA_METRICS MsgType = 0
	MSG_DATA_STDERR  MsgType = 1
	MSG_DONE         MsgType = 5
	MSG_STATE        MsgType = 6
	MSG_ERROR        MsgType = 7
	// network msgs, protobuf bytes of abbot proto
	MSG_NET MsgType = 10
	// 11-19: node msgs
	MSG_NODE_STATUS MsgType = 11
	// 31-39: credential msgs
	MSG_CRED_STATUS MsgType = 31
	// 41-49: image msgs
	MSG_IMAGE_STATUS      MsgType = 41
	MSG_IMAGE_STATUS_LIST MsgType = 42
	// 51-59: storage msgs
	MSG_STORAGE_STATUS      MsgType = 51
	MSG_STORAGE_STATUS_LIST MsgType = 52
	// 61-69: pod msgs
	MSG_POD_STATUS      MsgType = 61
	MSG_POD_STATUS_LIST MsgType = 62
	// 71-79: peripheral msgs
	MSG_PERIPHERAL_STATUS           MsgType = 71
	MSG_PERIPHERAL_STATUS_LIST      MsgType = 72
	MSG_PERIPHERAL_OPERATION_RESULT MsgType = 73
)

var MsgType_name = map[int32]string{
	0: "MSG_DATA",
	// Duplicate value: 0: "MSG_DATA_DEFAULT",
	// Duplicate value: 0: "MSG_DATA_STDOUT",
	// Duplicate value: 0: "MSG_DATA_METRICS",
	1:  "MSG_DATA_STDERR",
	5:  "MSG_DONE",
	6:  "MSG_STATE",
	7:  "MSG_ERROR",
	10: "MSG_NET",
	11: "MSG_NODE_STATUS",
	31: "MSG_CRED_STATUS",
	41: "MSG_IMAGE_STATUS",
	42: "MSG_IMAGE_STATUS_LIST",
	51: "MSG_STORAGE_STATUS",
	52: "MSG_STORAGE_STATUS_LIST",
	61: "MSG_POD_STATUS",
	62: "MSG_POD_STATUS_LIST",
	71: "MSG_PERIPHERAL_STATUS",
	72: "MSG_PERIPHERAL_STATUS_LIST",
	73: "MSG_PERIPHERAL_OPERATION_RESULT",
}

var MsgType_value = map[string]int32{
	"MSG_DATA":                        0,
	"MSG_DATA_DEFAULT":                0,
	"MSG_DATA_STDOUT":                 0,
	"MSG_DATA_METRICS":                0,
	"MSG_DATA_STDERR":                 1,
	"MSG_DONE":                        5,
	"MSG_STATE":                       6,
	"MSG_ERROR":                       7,
	"MSG_NET":                         10,
	"MSG_NODE_STATUS":                 11,
	"MSG_CRED_STATUS":                 31,
	"MSG_IMAGE_STATUS":                41,
	"MSG_IMAGE_STATUS_LIST":           42,
	"MSG_STORAGE_STATUS":              51,
	"MSG_STORAGE_STATUS_LIST":         52,
	"MSG_POD_STATUS":                  61,
	"MSG_POD_STATUS_LIST":             62,
	"MSG_PERIPHERAL_STATUS":           71,
	"MSG_PERIPHERAL_STATUS_LIST":      72,
	"MSG_PERIPHERAL_OPERATION_RESULT": 73,
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}

type RejectionReason int32

const (
	_INVALID_REJECTION_REASON       RejectionReason = 0
	REJECTION_INVALID_PROTO         RejectionReason = 1
	REJECTION_ALREADY_CONNECTED     RejectionReason = 2
	REJECTION_INITIAL_CHECK_FAILURE RejectionReason = 3
	REJECTION_INTERNAL_SERVER_ERROR RejectionReason = 4
)

var RejectionReason_name = map[int32]string{
	0: "_INVALID_REJECTION_REASON",
	1: "REJECTION_INVALID_PROTO",
	2: "REJECTION_ALREADY_CONNECTED",
	3: "REJECTION_INITIAL_CHECK_FAILURE",
	4: "REJECTION_INTERNAL_SERVER_ERROR",
}

var RejectionReason_value = map[string]int32{
	"_INVALID_REJECTION_REASON":       0,
	"REJECTION_INVALID_PROTO":         1,
	"REJECTION_ALREADY_CONNECTED":     2,
	"REJECTION_INITIAL_CHECK_FAILURE": 3,
	"REJECTION_INTERNAL_SERVER_ERROR": 4,
}

func (RejectionReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{2}
}

type NodeInfoGetCmd_Kind int32

const (
	NODE_INFO_DYN NodeInfoGetCmd_Kind = 0
	NODE_INFO_ALL NodeInfoGetCmd_Kind = 1
)

var NodeInfoGetCmd_Kind_name = map[int32]string{
	0: "NODE_INFO_DYN",
	1: "NODE_INFO_ALL",
}

var NodeInfoGetCmd_Kind_value = map[string]int32{
	"NODE_INFO_DYN": 0,
	"NODE_INFO_ALL": 1,
}

func (NodeInfoGetCmd_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{3, 0}
}

type ErrorMsg_Kind int32

const (
	// ERR_COMMON means Error happened, but we don't know what to do,
	// report as failure and retry later.
	ERR_COMMON ErrorMsg_Kind = 0
	// ERR_NOT_FOUND means something not found but may be expected by
	// the scheduler, aranya should schedule according task or ignore.
	ERR_NOT_FOUND ErrorMsg_Kind = 1
	// ERR_ALREADY_EXISTS means something expected by the scheduler already
	// exists in agent, agent only report this error when it's sure the
	// existing object is the same with the one expected by the scheduler,
	// otherwise it should report ERR_NOT_FOUND.
	ERR_ALREADY_EXISTS ErrorMsg_Kind = 2
	// ERR_NOT_SUPPORTED means Cmd not supported by the agent,
	// aranya should ignore this error and cancel all future
	// job.
	ERR_NOT_SUPPORTED ErrorMsg_Kind = 3
	// ERR_TIMEOUT only happens in connectivity server,
	// right after the session is timed out
	ERR_TIMEOUT ErrorMsg_Kind = 4
)

var ErrorMsg_Kind_name = map[int32]string{
	0: "ERR_COMMON",
	1: "ERR_NOT_FOUND",
	2: "ERR_ALREADY_EXISTS",
	3: "ERR_NOT_SUPPORTED",
	4: "ERR_TIMEOUT",
}

var ErrorMsg_Kind_value = map[string]int32{
	"ERR_COMMON":         0,
	"ERR_NOT_FOUND":      1,
	"ERR_ALREADY_EXISTS": 2,
	"ERR_NOT_SUPPORTED":  3,
	"ERR_TIMEOUT":        4,
}

func (ErrorMsg_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{11, 0}
}

type StateMsg_Kind int32

const (
	_INVALID_STATE StateMsg_Kind = 0
	STATE_ONLINE   StateMsg_Kind = 1
	STATE_OFFLINE  StateMsg_Kind = 2
)

var StateMsg_Kind_name = map[int32]string{
	0: "_INVALID_STATE",
	1: "STATE_ONLINE",
	2: "STATE_OFFLINE",
}

var StateMsg_Kind_value = map[string]int32{
	"_INVALID_STATE": 0,
	"STATE_ONLINE":   1,
	"STATE_OFFLINE":  2,
}

func (StateMsg_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{12, 0}
}

type Empty struct {
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Cmd struct {
	Kind CmdType `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.CmdType" json:"kind,omitempty"`
	// session id
	Sid uint64 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	// sequence in the session, to ensure ordered data
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	// mark this Cmd is the last piece in the session
	Completed bool `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
	// body of encoded XxxCmd or raw data bytes
	Body []byte `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Cmd) Reset()      { *m = Cmd{} }
func (*Cmd) ProtoMessage() {}
func (*Cmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}
func (m *Cmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cmd.Merge(m, src)
}
func (m *Cmd) XXX_Size() int {
	return m.Size()
}
func (m *Cmd) XXX_DiscardUnknown() {
	xxx_messageInfo_Cmd.DiscardUnknown(m)
}

var xxx_messageInfo_Cmd proto.InternalMessageInfo

func (m *Cmd) GetKind() CmdType {
	if m != nil {
		return m.Kind
	}
	return CMD_DATA_UPSTREAM
}

func (m *Cmd) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Cmd) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Cmd) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Cmd) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Msg struct {
	Kind MsgType `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.MsgType" json:"kind,omitempty"`
	// session id
	Sid uint64 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	// sequence in the session, to ensure ordered data
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	// mark this Msg is the last piece in the session
	Completed bool `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
	// body of encoded XxxMsg or raw data bytes
	Body []byte `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{2}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetKind() MsgType {
	if m != nil {
		return m.Kind
	}
	return MSG_DATA
}

func (m *Msg) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Msg) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Msg) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Msg) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type NodeInfoGetCmd struct {
	Kind NodeInfoGetCmd_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.NodeInfoGetCmd_Kind" json:"kind,omitempty"`
}

func (m *NodeInfoGetCmd) Reset()      { *m = NodeInfoGetCmd{} }
func (*NodeInfoGetCmd) ProtoMessage() {}
func (*NodeInfoGetCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{3}
}
func (m *NodeInfoGetCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfoGetCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfoGetCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfoGetCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoGetCmd.Merge(m, src)
}
func (m *NodeInfoGetCmd) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfoGetCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoGetCmd.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoGetCmd proto.InternalMessageInfo

func (m *NodeInfoGetCmd) GetKind() NodeInfoGetCmd_Kind {
	if m != nil {
		return m.Kind
	}
	return NODE_INFO_DYN
}

type SessionCloseCmd struct {
	Sid uint64 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (m *SessionCloseCmd) Reset()      { *m = SessionCloseCmd{} }
func (*SessionCloseCmd) ProtoMessage() {}
func (*SessionCloseCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{4}
}
func (m *SessionCloseCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCloseCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionCloseCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionCloseCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCloseCmd.Merge(m, src)
}
func (m *SessionCloseCmd) XXX_Size() int {
	return m.Size()
}
func (m *SessionCloseCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCloseCmd.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCloseCmd proto.InternalMessageInfo

func (m *SessionCloseCmd) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

type RejectCmd struct {
	Reason  RejectionReason `protobuf:"varint,1,opt,name=reason,proto3,enum=aranya.RejectionReason" json:"reason,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RejectCmd) Reset()      { *m = RejectCmd{} }
func (*RejectCmd) ProtoMessage() {}
func (*RejectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{5}
}
func (m *RejectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RejectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectCmd.Merge(m, src)
}
func (m *RejectCmd) XXX_Size() int {
	return m.Size()
}
func (m *RejectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RejectCmd proto.InternalMessageInfo

func (m *RejectCmd) GetReason() RejectionReason {
	if m != nil {
		return m.Reason
	}
	return _INVALID_REJECTION_REASON
}

func (m *RejectCmd) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NetworkCmd struct {
	// protobuf bytes of abbot proto
	AbbotRequestBytes []byte `protobuf:"bytes,1,opt,name=abbot_request_bytes,json=abbotRequestBytes,proto3" json:"abbot_request_bytes,omitempty"`
}

func (m *NetworkCmd) Reset()      { *m = NetworkCmd{} }
func (*NetworkCmd) ProtoMessage() {}
func (*NetworkCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{6}
}
func (m *NetworkCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkCmd.Merge(m, src)
}
func (m *NetworkCmd) XXX_Size() int {
	return m.Size()
}
func (m *NetworkCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkCmd.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkCmd proto.InternalMessageInfo

func (m *NetworkCmd) GetAbbotRequestBytes() []byte {
	if m != nil {
		return m.AbbotRequestBytes
	}
	return nil
}

type LogsCmd struct {
	PodUid     string `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container  string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Follow     bool   `protobuf:"varint,3,opt,name=follow,proto3" json:"follow,omitempty"`
	Timestamp  bool   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Since      string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	TailLines  int64  `protobuf:"varint,6,opt,name=tail_lines,json=tailLines,proto3" json:"tail_lines,omitempty"`
	BytesLimit int64  `protobuf:"varint,7,opt,name=bytes_limit,json=bytesLimit,proto3" json:"bytes_limit,omitempty"`
	Previous   bool   `protobuf:"varint,8,opt,name=previous,proto3" json:"previous,omitempty"`
	// host log path
	Path string `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *LogsCmd) Reset()      { *m = LogsCmd{} }
func (*LogsCmd) ProtoMessage() {}
func (*LogsCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{7}
}
func (m *LogsCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogsCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogsCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogsCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsCmd.Merge(m, src)
}
func (m *LogsCmd) XXX_Size() int {
	return m.Size()
}
func (m *LogsCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsCmd.DiscardUnknown(m)
}

var xxx_messageInfo_LogsCmd proto.InternalMessageInfo

func (m *LogsCmd) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *LogsCmd) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *LogsCmd) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *LogsCmd) GetTimestamp() bool {
	if m != nil {
		return m.Timestamp
	}
	return false
}

func (m *LogsCmd) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *LogsCmd) GetTailLines() int64 {
	if m != nil {
		return m.TailLines
	}
	return 0
}

func (m *LogsCmd) GetBytesLimit() int64 {
	if m != nil {
		return m.BytesLimit
	}
	return 0
}

func (m *LogsCmd) GetPrevious() bool {
	if m != nil {
		return m.Previous
	}
	return false
}

func (m *LogsCmd) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Exec/Attach Cmd
type ExecOrAttachCmd struct {
	PodUid    string `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Stdin     bool   `protobuf:"varint,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout    bool   `protobuf:"varint,4,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr    bool   `protobuf:"varint,5,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Tty       bool   `protobuf:"varint,6,opt,name=tty,proto3" json:"tty,omitempty"`
	// command is empty when used for container attach
	Command []string `protobuf:"bytes,7,rep,name=command,proto3" json:"command,omitempty"`
	// environment variables when used with virtual host container image
	// values are resolved by aranya
	Envs map[string]string `protobuf:"bytes,8,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExecOrAttachCmd) Reset()      { *m = ExecOrAttachCmd{} }
func (*ExecOrAttachCmd) ProtoMessage() {}
func (*ExecOrAttachCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{8}
}
func (m *ExecOrAttachCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecOrAttachCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecOrAttachCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecOrAttachCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecOrAttachCmd.Merge(m, src)
}
func (m *ExecOrAttachCmd) XXX_Size() int {
	return m.Size()
}
func (m *ExecOrAttachCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecOrAttachCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ExecOrAttachCmd proto.InternalMessageInfo

func (m *ExecOrAttachCmd) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ExecOrAttachCmd) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ExecOrAttachCmd) GetStdin() bool {
	if m != nil {
		return m.Stdin
	}
	return false
}

func (m *ExecOrAttachCmd) GetStdout() bool {
	if m != nil {
		return m.Stdout
	}
	return false
}

func (m *ExecOrAttachCmd) GetStderr() bool {
	if m != nil {
		return m.Stderr
	}
	return false
}

func (m *ExecOrAttachCmd) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *ExecOrAttachCmd) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ExecOrAttachCmd) GetEnvs() map[string]string {
	if m != nil {
		return m.Envs
	}
	return nil
}

type PortForwardCmd struct {
	PodUid   string `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortForwardCmd) Reset()      { *m = PortForwardCmd{} }
func (*PortForwardCmd) ProtoMessage() {}
func (*PortForwardCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{9}
}
func (m *PortForwardCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortForwardCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortForwardCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortForwardCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortForwardCmd.Merge(m, src)
}
func (m *PortForwardCmd) XXX_Size() int {
	return m.Size()
}
func (m *PortForwardCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PortForwardCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PortForwardCmd proto.InternalMessageInfo

func (m *PortForwardCmd) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *PortForwardCmd) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortForwardCmd) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type TerminalResizeCmd struct {
	Cols uint32 `protobuf:"varint,1,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows uint32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (m *TerminalResizeCmd) Reset()      { *m = TerminalResizeCmd{} }
func (*TerminalResizeCmd) ProtoMessage() {}
func (*TerminalResizeCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{10}
}
func (m *TerminalResizeCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminalResizeCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalResizeCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminalResizeCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalResizeCmd.Merge(m, src)
}
func (m *TerminalResizeCmd) XXX_Size() int {
	return m.Size()
}
func (m *TerminalResizeCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalResizeCmd.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalResizeCmd proto.InternalMessageInfo

func (m *TerminalResizeCmd) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *TerminalResizeCmd) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

// Error infomation
type ErrorMsg struct {
	Kind ErrorMsg_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.ErrorMsg_Kind" json:"kind,omitempty"`
	// Human readable error description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// error code may be used for:
	//  - exit code of command execution
	//  - ...TBD
	Code int64 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ErrorMsg) Reset()      { *m = ErrorMsg{} }
func (*ErrorMsg) ProtoMessage() {}
func (*ErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{11}
}
func (m *ErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMsg.Merge(m, src)
}
func (m *ErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMsg proto.InternalMessageInfo

func (m *ErrorMsg) GetKind() ErrorMsg_Kind {
	if m != nil {
		return m.Kind
	}
	return ERR_COMMON
}

func (m *ErrorMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ErrorMsg) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

// State of agent, online/offline
type StateMsg struct {
	Kind     StateMsg_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.StateMsg_Kind" json:"kind,omitempty"`
	DeviceId string        `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *StateMsg) Reset()      { *m = StateMsg{} }
func (*StateMsg) ProtoMessage() {}
func (*StateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{12}
}
func (m *StateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateMsg.Merge(m, src)
}
func (m *StateMsg) XXX_Size() int {
	return m.Size()
}
func (m *StateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StateMsg proto.InternalMessageInfo

func (m *StateMsg) GetKind() StateMsg_Kind {
	if m != nil {
		return m.Kind
	}
	return _INVALID_STATE
}

func (m *StateMsg) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type NetworkMsg struct {
	// protobuf bytes of abbot proto
	AbbotResponseBytes []byte `protobuf:"bytes,1,opt,name=abbot_response_bytes,json=abbotResponseBytes,proto3" json:"abbot_response_bytes,omitempty"`
}

func (m *NetworkMsg) Reset()      { *m = NetworkMsg{} }
func (*NetworkMsg) ProtoMessage() {}
func (*NetworkMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{13}
}
func (m *NetworkMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMsg.Merge(m, src)
}
func (m *NetworkMsg) XXX_Size() int {
	return m.Size()
}
func (m *NetworkMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMsg proto.InternalMessageInfo

func (m *NetworkMsg) GetAbbotResponseBytes() []byte {
	if m != nil {
		return m.AbbotResponseBytes
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("aranya.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("aranya.RejectionReason", RejectionReason_name, RejectionReason_value)
	proto.RegisterEnum("aranya.NodeInfoGetCmd_Kind", NodeInfoGetCmd_Kind_name, NodeInfoGetCmd_Kind_value)
	proto.RegisterEnum("aranya.ErrorMsg_Kind", ErrorMsg_Kind_name, ErrorMsg_Kind_value)
	proto.RegisterEnum("aranya.StateMsg_Kind", StateMsg_Kind_name, StateMsg_Kind_value)
	proto.RegisterType((*Empty)(nil), "aranya.Empty")
	proto.RegisterType((*Cmd)(nil), "aranya.Cmd")
	proto.RegisterType((*Msg)(nil), "aranya.Msg")
	proto.RegisterType((*NodeInfoGetCmd)(nil), "aranya.NodeInfoGetCmd")
	proto.RegisterType((*SessionCloseCmd)(nil), "aranya.SessionCloseCmd")
	proto.RegisterType((*RejectCmd)(nil), "aranya.RejectCmd")
	proto.RegisterType((*NetworkCmd)(nil), "aranya.NetworkCmd")
	proto.RegisterType((*LogsCmd)(nil), "aranya.LogsCmd")
	proto.RegisterType((*ExecOrAttachCmd)(nil), "aranya.ExecOrAttachCmd")
	proto.RegisterMapType((map[string]string)(nil), "aranya.ExecOrAttachCmd.EnvsEntry")
	proto.RegisterType((*PortForwardCmd)(nil), "aranya.PortForwardCmd")
	proto.RegisterType((*TerminalResizeCmd)(nil), "aranya.TerminalResizeCmd")
	proto.RegisterType((*ErrorMsg)(nil), "aranya.ErrorMsg")
	proto.RegisterType((*StateMsg)(nil), "aranya.StateMsg")
	proto.RegisterType((*NetworkMsg)(nil), "aranya.NetworkMsg")
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor_2fcc84b9998d60d8) }

var fileDescriptor_2fcc84b9998d60d8 = []byte{
	// 1505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x72, 0xe3, 0xc6,
	0x11, 0x26, 0x44, 0x8a, 0x3f, 0x43, 0xfd, 0xcc, 0xce, 0xee, 0x4a, 0xb4, 0x14, 0x53, 0x32, 0xf6,
	0xa2, 0x55, 0x12, 0x39, 0xe5, 0xb5, 0x2b, 0xa9, 0x24, 0x5e, 0x17, 0x4c, 0x0e, 0x29, 0x78, 0x41,
	0x80, 0x35, 0x00, 0xd7, 0x96, 0x2f, 0x28, 0x88, 0x18, 0x6b, 0x91, 0x25, 0x31, 0x5c, 0x00, 0x92,
	0xc2, 0x9c, 0xfc, 0x08, 0xa9, 0xca, 0x4b, 0xa4, 0xf2, 0x04, 0x79, 0x83, 0xe4, 0xb8, 0x27, 0x97,
	0x8f, 0x59, 0xed, 0x25, 0x47, 0x3f, 0x40, 0x0e, 0xa9, 0x1e, 0x0c, 0x28, 0x91, 0x76, 0x7c, 0x49,
	0xf9, 0xc2, 0x9a, 0xfe, 0xfa, 0x67, 0xba, 0xfb, 0xeb, 0x69, 0x02, 0x35, 0x67, 0x89, 0xc8, 0xc4,
	0x89, 0xfc, 0x25, 0xd5, 0x20, 0x09, 0xe2, 0x79, 0xa0, 0xd7, 0xd0, 0x3a, 0x9d, 0xce, 0xb2, 0xb9,
	0xfe, 0xb5, 0x86, 0xca, 0x9d, 0x69, 0x48, 0x1e, 0xa1, 0xca, 0xcb, 0x28, 0x0e, 0x5b, 0xda, 0xa1,
	0x76, 0xb4, 0xf5, 0xc1, 0xf6, 0x49, 0x6e, 0x77, 0xd2, 0x99, 0x86, 0xde, 0x7c, 0xc6, 0x99, 0x54,
	0x12, 0x8c, 0xca, 0x69, 0x14, 0xb6, 0xd6, 0x0e, 0xb5, 0xa3, 0x0a, 0x83, 0xa3, 0x44, 0xf8, 0xab,
	0x56, 0x59, 0x21, 0xfc, 0x15, 0xf9, 0x19, 0x6a, 0x8c, 0xc5, 0x74, 0x36, 0xe1, 0x19, 0x0f, 0x5b,
	0x95, 0x43, 0xed, 0xa8, 0xce, 0x6e, 0x01, 0x42, 0x50, 0xe5, 0x5c, 0x84, 0xf3, 0x56, 0xf3, 0x50,
	0x3b, 0xda, 0x60, 0xf2, 0x2c, 0x53, 0x18, 0xa4, 0x17, 0xff, 0x2b, 0x85, 0x41, 0x7a, 0xf1, 0x93,
	0xa7, 0x20, 0xd0, 0x96, 0x2d, 0x42, 0x6e, 0xc6, 0x5f, 0x89, 0x3e, 0xcf, 0xa0, 0x1f, 0xef, 0x2f,
	0x25, 0xb3, 0x5f, 0x24, 0xb3, 0x6c, 0x75, 0xf2, 0x2c, 0x8a, 0xc3, 0x3c, 0x31, 0xfd, 0x17, 0xa8,
	0x02, 0x12, 0xb9, 0x87, 0x36, 0x6d, 0xa7, 0x4b, 0x7d, 0xd3, 0xee, 0x39, 0x7e, 0xf7, 0xcc, 0xc6,
	0xa5, 0x65, 0xc8, 0xb0, 0x2c, 0xac, 0xe9, 0x8f, 0xd0, 0xb6, 0xcb, 0xd3, 0x34, 0x12, 0x71, 0x67,
	0x22, 0x52, 0x0e, 0x37, 0xaa, 0xca, 0xb4, 0x45, 0x65, 0xfa, 0x73, 0xd4, 0x60, 0xfc, 0x0f, 0x7c,
	0xac, 0x12, 0xaa, 0x26, 0x3c, 0x48, 0x45, 0xac, 0x52, 0xda, 0x2d, 0x52, 0xca, 0x4d, 0x22, 0x11,
	0x33, 0xa9, 0x66, 0xca, 0x8c, 0xb4, 0x50, 0x6d, 0xca, 0xd3, 0x34, 0xb8, 0xe0, 0xb2, 0x5b, 0x0d,
	0x56, 0x88, 0xfa, 0xef, 0x11, 0xb2, 0x79, 0x76, 0x2d, 0x92, 0x97, 0x10, 0xf8, 0x04, 0xdd, 0x0f,
	0xce, 0xcf, 0x45, 0xe6, 0x27, 0xfc, 0xd5, 0x25, 0x4f, 0x33, 0xff, 0x7c, 0x9e, 0xf1, 0x54, 0xde,
	0xb2, 0xc1, 0xee, 0x49, 0x15, 0xcb, 0x35, 0x9f, 0x82, 0x42, 0xff, 0x8f, 0x86, 0x6a, 0x96, 0xb8,
	0x48, 0xc1, 0x77, 0x17, 0xd5, 0x66, 0x22, 0xf4, 0x2f, 0x55, 0xde, 0x0d, 0x56, 0x9d, 0x89, 0x70,
	0x14, 0x85, 0x39, 0x05, 0x71, 0x16, 0x44, 0x31, 0x4f, 0xd4, 0xf5, 0xb7, 0x00, 0xd9, 0x41, 0xd5,
	0xaf, 0xc4, 0x64, 0x22, 0xae, 0x25, 0x6b, 0x75, 0xa6, 0x24, 0xf0, 0xca, 0xa2, 0x29, 0x4f, 0xb3,
	0x60, 0x3a, 0x2b, 0x88, 0x5b, 0x00, 0xe4, 0x01, 0x5a, 0x4f, 0xa3, 0x78, 0xcc, 0x5b, 0xeb, 0x32,
	0x5e, 0x2e, 0x90, 0x77, 0x11, 0xca, 0x82, 0x68, 0xe2, 0x4f, 0xa2, 0x98, 0xa7, 0xad, 0xea, 0xa1,
	0x76, 0x54, 0x66, 0x0d, 0x40, 0x2c, 0x00, 0xc8, 0x01, 0x6a, 0xca, 0x7a, 0xfc, 0x49, 0x34, 0x8d,
	0xb2, 0x56, 0x4d, 0xea, 0x91, 0x84, 0x2c, 0x40, 0xc8, 0x1e, 0xaa, 0xcf, 0x12, 0x7e, 0x15, 0x89,
	0xcb, 0xb4, 0x55, 0x97, 0x57, 0x2e, 0x64, 0x18, 0x95, 0x59, 0x90, 0xbd, 0x68, 0x35, 0xe4, 0x85,
	0xf2, 0xac, 0xff, 0x6d, 0x0d, 0x6d, 0xd3, 0x3f, 0xf2, 0xb1, 0x93, 0x18, 0x59, 0x16, 0x8c, 0x5f,
	0xfc, 0x1f, 0x6d, 0x80, 0x82, 0xb2, 0x30, 0x8a, 0x55, 0x17, 0x72, 0x01, 0x9a, 0x93, 0x66, 0xa1,
	0xb8, 0xcc, 0x54, 0x07, 0x94, 0xa4, 0x70, 0x9e, 0x24, 0xb2, 0xfe, 0x1c, 0xe7, 0x49, 0x02, 0x73,
	0x93, 0x65, 0x73, 0x59, 0x79, 0x9d, 0xc1, 0x11, 0x98, 0x1f, 0x8b, 0xe9, 0x34, 0x88, 0xc3, 0x56,
	0xed, 0xb0, 0x0c, 0xcc, 0x2b, 0x91, 0x7c, 0x84, 0x2a, 0x3c, 0xbe, 0x82, 0x42, 0xcb, 0x47, 0xcd,
	0x0f, 0xde, 0x2b, 0x46, 0x68, 0xa5, 0x9e, 0x13, 0x1a, 0x5f, 0xa5, 0x34, 0xce, 0x92, 0x39, 0x93,
	0xe6, 0x7b, 0xbf, 0x46, 0x8d, 0x05, 0x04, 0xf7, 0xbd, 0xe4, 0x73, 0x55, 0x28, 0x1c, 0xa1, 0x8e,
	0xab, 0x60, 0x72, 0x59, 0xcc, 0x59, 0x2e, 0xfc, 0x76, 0xed, 0x37, 0x9a, 0x7e, 0x86, 0xb6, 0x86,
	0x22, 0xc9, 0x7a, 0x22, 0xb9, 0x0e, 0x92, 0xf0, 0x47, 0x5b, 0x05, 0xbd, 0x16, 0x49, 0x26, 0x63,
	0xac, 0x33, 0x79, 0xce, 0xb9, 0x11, 0x99, 0x18, 0x8b, 0x89, 0xec, 0x51, 0x83, 0x2d, 0x64, 0xfd,
	0x77, 0xe8, 0x9e, 0xc7, 0x93, 0x69, 0x14, 0x07, 0x13, 0xc6, 0xd3, 0xe8, 0x4f, 0xf2, 0x0d, 0x11,
	0x54, 0x19, 0x8b, 0x49, 0x3e, 0xbc, 0x9b, 0x4c, 0x9e, 0x01, 0x4b, 0xc4, 0x75, 0x2a, 0x03, 0x6f,
	0x32, 0x79, 0xd6, 0xbf, 0xd1, 0x50, 0x9d, 0x26, 0x89, 0x48, 0x60, 0xef, 0x3c, 0x5e, 0x7a, 0xea,
	0x0f, 0x17, 0x4d, 0x51, 0xfa, 0x3b, 0x8f, 0x9c, 0x1c, 0xa2, 0x66, 0xc8, 0xd3, 0x71, 0x12, 0xcd,
	0xe0, 0xc1, 0xa9, 0x7a, 0xef, 0x42, 0x79, 0x06, 0x21, 0x97, 0xe9, 0x96, 0x99, 0x3c, 0xeb, 0x91,
	0x5a, 0x0d, 0x5b, 0x08, 0x51, 0xc6, 0xfc, 0x8e, 0x33, 0x18, 0x38, 0x6a, 0x2f, 0x80, 0x6c, 0x3b,
	0x9e, 0xdf, 0x73, 0x46, 0x76, 0x17, 0x6b, 0x64, 0x07, 0x11, 0x80, 0x0c, 0x8b, 0x51, 0xa3, 0x7b,
	0xe6, 0xd3, 0x2f, 0x4c, 0xd7, 0x73, 0xf1, 0x1a, 0x79, 0x88, 0xee, 0x15, 0xa6, 0xee, 0x68, 0x38,
	0x74, 0x98, 0x47, 0xbb, 0xb8, 0x4c, 0xb6, 0x51, 0x13, 0x60, 0xcf, 0x1c, 0x50, 0x67, 0xe4, 0xe1,
	0x8a, 0xfe, 0x17, 0x0d, 0xd5, 0xdd, 0x2c, 0xc8, 0xf8, 0x8f, 0x14, 0x56, 0xe8, 0xef, 0x16, 0xb6,
	0x8f, 0x1a, 0x21, 0xbf, 0x8a, 0xc6, 0xdc, 0x57, 0xcb, 0xb5, 0xc1, 0xea, 0x39, 0x60, 0x86, 0xfa,
	0x27, 0x2a, 0x7f, 0x82, 0xb6, 0x7c, 0xd3, 0x7e, 0x6e, 0x58, 0x66, 0xd7, 0x77, 0x3d, 0xc3, 0xa3,
	0xb8, 0x44, 0x30, 0xda, 0x90, 0x47, 0xdf, 0xb1, 0x2d, 0xd3, 0xa6, 0x58, 0x83, 0xaa, 0x14, 0xd2,
	0xeb, 0x49, 0x68, 0x4d, 0x7f, 0xba, 0x58, 0x38, 0x90, 0xd6, 0xaf, 0xd0, 0x83, 0x62, 0xe1, 0xa4,
	0x33, 0x11, 0xa7, 0x7c, 0x69, 0xe3, 0x10, 0xb5, 0x71, 0x72, 0x95, 0x5c, 0x39, 0xc7, 0xdf, 0x54,
	0x50, 0x4d, 0xfd, 0x13, 0x41, 0x27, 0x3a, 0x83, 0xae, 0xdf, 0x35, 0x3c, 0xc3, 0x1f, 0x0d, 0x5d,
	0x8f, 0x51, 0x63, 0x80, 0x4b, 0x05, 0xec, 0x52, 0xd7, 0x35, 0x1d, 0xdb, 0xef, 0x58, 0x8e, 0x4b,
	0xf1, 0x3a, 0xb4, 0x1c, 0x60, 0x46, 0x3f, 0xa3, 0x1d, 0x0f, 0x57, 0x49, 0x13, 0xd5, 0x40, 0xb6,
	0xa9, 0x87, 0x51, 0xe1, 0x73, 0xbb, 0x9b, 0xfb, 0xd4, 0xc3, 0x4d, 0xb2, 0x81, 0xea, 0x00, 0xd3,
	0x2f, 0x68, 0x07, 0x6f, 0x14, 0x11, 0x0c, 0xcf, 0x33, 0x3a, 0xa7, 0x78, 0xb3, 0xd0, 0x5a, 0x4e,
	0xdf, 0xc5, 0x5b, 0xd0, 0x12, 0x90, 0x3c, 0xef, 0xcc, 0x67, 0xd4, 0x35, 0xbf, 0xa4, 0x78, 0x9b,
	0x3c, 0x40, 0x18, 0x30, 0x20, 0xc9, 0xef, 0x39, 0xec, 0x73, 0x83, 0x75, 0x31, 0x06, 0x66, 0x01,
	0x1d, 0x50, 0x8f, 0x99, 0x1d, 0xd7, 0xef, 0x38, 0x76, 0xcf, 0xec, 0xe3, 0x87, 0x64, 0x17, 0xdd,
	0x5f, 0xc6, 0x2d, 0x0b, 0x52, 0xdd, 0x21, 0xf7, 0xd1, 0x36, 0x28, 0x3a, 0x8c, 0x76, 0x7d, 0x6a,
	0xbb, 0x23, 0x46, 0xf1, 0x41, 0x71, 0x9f, 0x39, 0x30, 0xfa, 0xd4, 0xb7, 0x4c, 0xd7, 0xc3, 0x8f,
	0x8b, 0xfb, 0x72, 0x4c, 0x59, 0x1e, 0x2f, 0xa3, 0x5d, 0x6a, 0x51, 0x8f, 0xe2, 0x9f, 0x17, 0xa8,
	0xeb, 0x39, 0x6c, 0x11, 0xe1, 0x49, 0x91, 0x5b, 0x81, 0xaa, 0x18, 0x1f, 0xae, 0xe2, 0x2a, 0xca,
	0x47, 0x40, 0x7a, 0x5e, 0x61, 0x37, 0x8f, 0xf0, 0x71, 0x91, 0x17, 0x20, 0xca, 0xfb, 0xe9, 0x5d,
	0x4c, 0x79, 0x7e, 0x52, 0x54, 0x3b, 0xa4, 0xcc, 0x1c, 0x9e, 0x52, 0x66, 0x58, 0x79, 0x80, 0x3e,
	0x79, 0x07, 0x3d, 0x5c, 0x51, 0xa8, 0x38, 0xa7, 0x3f, 0xa0, 0x52, 0xe1, 0x4c, 0xb2, 0x87, 0x76,
	0x56, 0x54, 0xce, 0x90, 0x32, 0x98, 0xcc, 0xcf, 0x88, 0x8e, 0xda, 0x2b, 0x3a, 0xd5, 0xdb, 0xa2,
	0xd7, 0xf8, 0xd9, 0xf1, 0x3f, 0xca, 0xa8, 0xa6, 0xbe, 0x2f, 0x80, 0xd8, 0x81, 0xdb, 0x97, 0x83,
	0x85, 0x4b, 0xd0, 0xa8, 0x42, 0xf2, 0xbb, 0xb4, 0x67, 0x8c, 0x2c, 0x0f, 0x97, 0x80, 0x93, 0x05,
	0xea, 0x7a, 0x5d, 0x78, 0x73, 0xcb, 0xa6, 0x45, 0xe8, 0xef, 0x99, 0x52, 0xc6, 0xb0, 0xb6, 0xb8,
	0xc3, 0xb1, 0x61, 0x38, 0x37, 0x51, 0x03, 0xa4, 0xfc, 0x29, 0x55, 0x0b, 0x91, 0x32, 0xe6, 0x30,
	0x5c, 0x83, 0x51, 0x05, 0x31, 0x1f, 0x55, 0x15, 0x4d, 0x8e, 0x2a, 0xd8, 0x8f, 0x5c, 0xdc, 0x2c,
	0x40, 0x39, 0x21, 0x0a, 0x3c, 0x28, 0xb2, 0xc9, 0x79, 0x57, 0xe8, 0x63, 0xe8, 0xe1, 0x2a, 0x9a,
	0x77, 0xfe, 0x18, 0x48, 0xce, 0xb3, 0xc8, 0x49, 0x56, 0x2e, 0x4f, 0xc8, 0x3e, 0xda, 0xfd, 0x3e,
	0x9e, 0x3b, 0x7d, 0x08, 0xdc, 0x82, 0x12, 0xb8, 0x55, 0x0e, 0x1f, 0x03, 0xb7, 0xcb, 0x58, 0x6e,
	0xfc, 0xb4, 0xb8, 0xfc, 0x0e, 0x13, 0xca, 0xa7, 0x4f, 0xda, 0x68, 0xef, 0x07, 0x55, 0xb9, 0xeb,
	0x29, 0x79, 0x84, 0x0e, 0x56, 0xf4, 0x39, 0xc1, 0xf0, 0xc6, 0x19, 0x75, 0x81, 0x15, 0x73, 0x6f,
	0x0d, 0x6b, 0xc7, 0x7f, 0xd7, 0xd0, 0xf6, 0xca, 0x97, 0x10, 0x79, 0x17, 0xbd, 0xb3, 0xd8, 0x57,
	0xf9, 0x06, 0xc8, 0xdd, 0x0c, 0x57, 0xae, 0xdf, 0x7d, 0xb4, 0x7b, 0x8b, 0x16, 0x76, 0x43, 0xe6,
	0x78, 0x0e, 0xd6, 0xc8, 0x01, 0xda, 0xbf, 0x55, 0x16, 0xeb, 0xb8, 0xe3, 0xd8, 0x36, 0xed, 0xc0,
	0xea, 0x5d, 0x83, 0xcc, 0xee, 0x7a, 0x9b, 0x9e, 0x09, 0x13, 0x76, 0x4a, 0x3b, 0xcf, 0xfc, 0x9e,
	0x61, 0x5a, 0x30, 0xba, 0xe5, 0x55, 0x23, 0x8f, 0x32, 0x1b, 0x4a, 0xa4, 0xec, 0x39, 0x65, 0x8a,
	0xe8, 0xca, 0xa7, 0x9f, 0xbf, 0x7e, 0xd3, 0x2e, 0x7d, 0xfb, 0xa6, 0x5d, 0xfa, 0xee, 0x4d, 0x5b,
	0xfb, 0xfa, 0xa6, 0xad, 0xfd, 0xf5, 0xa6, 0xad, 0xfd, 0xf3, 0xa6, 0xad, 0xbd, 0xbe, 0x69, 0x6b,
	0xff, 0xba, 0x69, 0x6b, 0xff, 0xbe, 0x69, 0x97, 0xbe, 0xbb, 0x69, 0x6b, 0x7f, 0x7e, 0xdb, 0x2e,
	0xbd, 0x7e, 0xdb, 0x2e, 0x7d, 0xfb, 0xb6, 0x5d, 0xfa, 0xf2, 0xbd, 0x20, 0x79, 0x11, 0x64, 0x27,
	0x21, 0xbf, 0x7a, 0x3f, 0xdf, 0xeb, 0xbf, 0x94, 0x7f, 0x8d, 0x4a, 0xb8, 0x10, 0xb3, 0xf3, 0xf3,
	0xaa, 0x44, 0x9e, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xe0, 0xa0, 0x27, 0x02, 0x0c, 0x00,
	0x00,
}

func (x CmdType) String() string {
	s, ok := CmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MsgType) String() string {
	s, ok := MsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejectionReason) String() string {
	s, ok := RejectionReason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeInfoGetCmd_Kind) String() string {
	s, ok := NodeInfoGetCmd_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ErrorMsg_Kind) String() string {
	s, ok := ErrorMsg_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StateMsg_Kind) String() string {
	s, ok := StateMsg_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Cmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd)
	if !ok {
		that2, ok := that.(Cmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Sid != that1.Sid {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg)
	if !ok {
		that2, ok := that.(Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Sid != that1.Sid {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *NodeInfoGetCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInfoGetCmd)
	if !ok {
		that2, ok := that.(NodeInfoGetCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *SessionCloseCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionCloseCmd)
	if !ok {
		that2, ok := that.(SessionCloseCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sid != that1.Sid {
		return false
	}
	return true
}
func (this *RejectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RejectCmd)
	if !ok {
		that2, ok := that.(RejectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *NetworkCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkCmd)
	if !ok {
		that2, ok := that.(NetworkCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AbbotRequestBytes, that1.AbbotRequestBytes) {
		return false
	}
	return true
}
func (this *LogsCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogsCmd)
	if !ok {
		that2, ok := that.(LogsCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	if this.Follow != that1.Follow {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	if this.TailLines != that1.TailLines {
		return false
	}
	if this.BytesLimit != that1.BytesLimit {
		return false
	}
	if this.Previous != that1.Previous {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *ExecOrAttachCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecOrAttachCmd)
	if !ok {
		that2, ok := that.(ExecOrAttachCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	if this.Stdin != that1.Stdin {
		return false
	}
	if this.Stdout != that1.Stdout {
		return false
	}
	if this.Stderr != that1.Stderr {
		return false
	}
	if this.Tty != that1.Tty {
		return false
	}
	if len(this.Command) != len(that1.Command) {
		return false
	}
	for i := range this.Command {
		if this.Command[i] != that1.Command[i] {
			return false
		}
	}
	if len(this.Envs) != len(that1.Envs) {
		return false
	}
	for i := range this.Envs {
		if this.Envs[i] != that1.Envs[i] {
			return false
		}
	}
	return true
}
func (this *PortForwardCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortForwardCmd)
	if !ok {
		that2, ok := that.(PortForwardCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *TerminalResizeCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TerminalResizeCmd)
	if !ok {
		that2, ok := that.(TerminalResizeCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	return true
}
func (this *ErrorMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorMsg)
	if !ok {
		that2, ok := that.(ErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *StateMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StateMsg)
	if !ok {
		that2, ok := that.(StateMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *NetworkMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkMsg)
	if !ok {
		that2, ok := that.(NetworkMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AbbotResponseBytes, that1.AbbotResponseBytes) {
		return false
	}
	return true
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.Cmd{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Sid: "+fmt.Sprintf("%#v", this.Sid)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.Msg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Sid: "+fmt.Sprintf("%#v", this.Sid)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInfoGetCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.NodeInfoGetCmd{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionCloseCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.SessionCloseCmd{")
	s = append(s, "Sid: "+fmt.Sprintf("%#v", this.Sid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RejectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.RejectCmd{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.NetworkCmd{")
	s = append(s, "AbbotRequestBytes: "+fmt.Sprintf("%#v", this.AbbotRequestBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogsCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aranyagopb.LogsCmd{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "Follow: "+fmt.Sprintf("%#v", this.Follow)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "TailLines: "+fmt.Sprintf("%#v", this.TailLines)+",\n")
	s = append(s, "BytesLimit: "+fmt.Sprintf("%#v", this.BytesLimit)+",\n")
	s = append(s, "Previous: "+fmt.Sprintf("%#v", this.Previous)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecOrAttachCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&aranyagopb.ExecOrAttachCmd{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "Stdin: "+fmt.Sprintf("%#v", this.Stdin)+",\n")
	s = append(s, "Stdout: "+fmt.Sprintf("%#v", this.Stdout)+",\n")
	s = append(s, "Stderr: "+fmt.Sprintf("%#v", this.Stderr)+",\n")
	s = append(s, "Tty: "+fmt.Sprintf("%#v", this.Tty)+",\n")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	keysForEnvs := make([]string, 0, len(this.Envs))
	for k, _ := range this.Envs {
		keysForEnvs = append(keysForEnvs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvs)
	mapStringForEnvs := "map[string]string{"
	for _, k := range keysForEnvs {
		mapStringForEnvs += fmt.Sprintf("%#v: %#v,", k, this.Envs[k])
	}
	mapStringForEnvs += "}"
	if this.Envs != nil {
		s = append(s, "Envs: "+mapStringForEnvs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortForwardCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.PortForwardCmd{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TerminalResizeCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.TerminalResizeCmd{")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.ErrorMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StateMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.StateMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.NetworkMsg{")
	s = append(s, "AbbotResponseBytes: "+fmt.Sprintf("%#v", this.AbbotResponseBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Cmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Seq != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Seq != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfoGetCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoGetCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfoGetCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionCloseCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCloseCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionCloseCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RejectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RejectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reason != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbbotRequestBytes) > 0 {
		i -= len(m.AbbotRequestBytes)
		copy(dAtA[i:], m.AbbotRequestBytes)
		i = encodeVarintProto(dAtA, i, uint64(len(m.AbbotRequestBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogsCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogsCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogsCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Previous {
		i--
		if m.Previous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.BytesLimit != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.BytesLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.TailLines != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.TailLines))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Since) > 0 {
		i -= len(m.Since)
		copy(dAtA[i:], m.Since)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Since)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp {
		i--
		if m.Timestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Follow {
		i--
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProto(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecOrAttachCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecOrAttachCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecOrAttachCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Envs) > 0 {
		for k := range m.Envs {
			v := m.Envs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProto(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProto(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProto(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintProto(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Tty {
		i--
		if m.Tty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Stderr {
		i--
		if m.Stderr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Stdout {
		i--
		if m.Stdout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Stdin {
		i--
		if m.Stdin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProto(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PortForwardCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortForwardCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortForwardCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProto(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminalResizeCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalResizeCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalResizeCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rows != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x10
	}
	if m.Cols != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Cols))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintProto(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbbotResponseBytes) > 0 {
		i -= len(m.AbbotResponseBytes)
		copy(dAtA[i:], m.AbbotResponseBytes)
		i = encodeVarintProto(dAtA, i, uint64(len(m.AbbotResponseBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	offset -= sovProto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Cmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	if m.Sid != 0 {
		n += 1 + sovProto(uint64(m.Sid))
	}
	if m.Seq != 0 {
		n += 1 + sovProto(uint64(m.Seq))
	}
	if m.Completed {
		n += 2
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	if m.Sid != 0 {
		n += 1 + sovProto(uint64(m.Sid))
	}
	if m.Seq != 0 {
		n += 1 + sovProto(uint64(m.Seq))
	}
	if m.Completed {
		n += 2
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *NodeInfoGetCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	return n
}

func (m *SessionCloseCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovProto(uint64(m.Sid))
	}
	return n
}

func (m *RejectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovProto(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *NetworkCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AbbotRequestBytes)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *LogsCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Follow {
		n += 2
	}
	if m.Timestamp {
		n += 2
	}
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.TailLines != 0 {
		n += 1 + sovProto(uint64(m.TailLines))
	}
	if m.BytesLimit != 0 {
		n += 1 + sovProto(uint64(m.BytesLimit))
	}
	if m.Previous {
		n += 2
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *ExecOrAttachCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Stdin {
		n += 2
	}
	if m.Stdout {
		n += 2
	}
	if m.Stderr {
		n += 2
	}
	if m.Tty {
		n += 2
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovProto(uint64(l))
		}
	}
	if len(m.Envs) > 0 {
		for k, v := range m.Envs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProto(uint64(len(k))) + 1 + len(v) + sovProto(uint64(len(v)))
			n += mapEntrySize + 1 + sovProto(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PortForwardCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovProto(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *TerminalResizeCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cols != 0 {
		n += 1 + sovProto(uint64(m.Cols))
	}
	if m.Rows != 0 {
		n += 1 + sovProto(uint64(m.Rows))
	}
	return n
}

func (m *ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovProto(uint64(m.Code))
	}
	return n
}

func (m *StateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovProto(uint64(m.Kind))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *NetworkMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AbbotResponseBytes)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func sovProto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Cmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Sid:` + fmt.Sprintf("%v", this.Sid) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Sid:` + fmt.Sprintf("%v", this.Sid) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInfoGetCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInfoGetCmd{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionCloseCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionCloseCmd{`,
		`Sid:` + fmt.Sprintf("%v", this.Sid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RejectCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RejectCmd{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkCmd{`,
		`AbbotRequestBytes:` + fmt.Sprintf("%v", this.AbbotRequestBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogsCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogsCmd{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Follow:` + fmt.Sprintf("%v", this.Follow) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`TailLines:` + fmt.Sprintf("%v", this.TailLines) + `,`,
		`BytesLimit:` + fmt.Sprintf("%v", this.BytesLimit) + `,`,
		`Previous:` + fmt.Sprintf("%v", this.Previous) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecOrAttachCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForEnvs := make([]string, 0, len(this.Envs))
	for k, _ := range this.Envs {
		keysForEnvs = append(keysForEnvs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvs)
	mapStringForEnvs := "map[string]string{"
	for _, k := range keysForEnvs {
		mapStringForEnvs += fmt.Sprintf("%v: %v,", k, this.Envs[k])
	}
	mapStringForEnvs += "}"
	s := strings.Join([]string{`&ExecOrAttachCmd{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Stdin:` + fmt.Sprintf("%v", this.Stdin) + `,`,
		`Stdout:` + fmt.Sprintf("%v", this.Stdout) + `,`,
		`Stderr:` + fmt.Sprintf("%v", this.Stderr) + `,`,
		`Tty:` + fmt.Sprintf("%v", this.Tty) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Envs:` + mapStringForEnvs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortForwardCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortForwardCmd{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TerminalResizeCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TerminalResizeCmd{`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StateMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StateMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkMsg{`,
		`AbbotResponseBytes:` + fmt.Sprintf("%v", this.AbbotResponseBytes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoGetCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoGetCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoGetCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= NodeInfoGetCmd_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCloseCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCloseCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCloseCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= RejectionReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbbotRequestBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbbotRequestBytes = append(m.AbbotRequestBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.AbbotRequestBytes == nil {
				m.AbbotRequestBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogsCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogsCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogsCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailLines", wireType)
			}
			m.TailLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TailLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesLimit", wireType)
			}
			m.BytesLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Previous = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecOrAttachCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecOrAttachCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecOrAttachCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stdin = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stdout = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stderr = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tty = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envs == nil {
				m.Envs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProto
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProto
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProto
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProto
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProto
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProto
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProto
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProto(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProto
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Envs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortForwardCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortForwardCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortForwardCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminalResizeCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalResizeCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalResizeCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= ErrorMsg_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= StateMsg_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbbotResponseBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbbotResponseBytes = append(m.AbbotResponseBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.AbbotResponseBytes == nil {
				m.AbbotResponseBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProto = fmt.Errorf("proto: unexpected end of group")
)
