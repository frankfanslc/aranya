// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_error.proto

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Error_Kind int32

const (
	ERR_COMMON         Error_Kind = 0
	ERR_NOT_FOUND      Error_Kind = 1
	ERR_ALREADY_EXISTS Error_Kind = 2
	// work not supported, aranya should ignore this error
	// and cancel future work
	ERR_NOT_SUPPORTED Error_Kind = 3
	// ErrTimeout only happen in connectivity server,
	// right after the session is timed out
	ERR_TIMEOUT Error_Kind = 4
)

var Error_Kind_name = map[int32]string{
	0: "ERR_COMMON",
	1: "ERR_NOT_FOUND",
	2: "ERR_ALREADY_EXISTS",
	3: "ERR_NOT_SUPPORTED",
	4: "ERR_TIMEOUT",
}

var Error_Kind_value = map[string]int32{
	"ERR_COMMON":         0,
	"ERR_NOT_FOUND":      1,
	"ERR_ALREADY_EXISTS": 2,
	"ERR_NOT_SUPPORTED":  3,
	"ERR_TIMEOUT":        4,
}

func (Error_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f57d38b2311dbe58, []int{0, 0}
}

type Error struct {
	Kind        Error_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.Error_Kind" json:"kind,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// error code may be used for:
	//      - exit code of command execution
	//      - TBD
	Code int64 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_f57d38b2311dbe58, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetKind() Error_Kind {
	if m != nil {
		return m.Kind
	}
	return ERR_COMMON
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Error) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("aranya.Error_Kind", Error_Kind_name, Error_Kind_value)
	proto.RegisterType((*Error)(nil), "aranya.Error")
}

func init() { proto.RegisterFile("msg_error.proto", fileDescriptor_f57d38b2311dbe58) }

var fileDescriptor_f57d38b2311dbe58 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4e, 0xf2, 0x50,
	0x10, 0x86, 0xcf, 0x40, 0x3f, 0x92, 0x6f, 0x88, 0x50, 0x26, 0xd1, 0xb0, 0x9a, 0x54, 0x16, 0x86,
	0x8d, 0x35, 0xd1, 0x2b, 0x40, 0xa9, 0x09, 0x51, 0x28, 0x39, 0x94, 0xf8, 0xb3, 0x69, 0x0a, 0x6d,
	0xb0, 0x31, 0xb6, 0xe4, 0x40, 0x4c, 0xdc, 0x79, 0x09, 0x5e, 0x86, 0x97, 0xe2, 0xb2, 0x4b, 0x96,
	0x72, 0xd8, 0xb8, 0xe4, 0x12, 0x4c, 0x8b, 0x26, 0xee, 0xe6, 0x7d, 0xde, 0x27, 0x93, 0xcc, 0x60,
	0xfd, 0x69, 0x31, 0xf3, 0x23, 0xa5, 0x52, 0x65, 0xcf, 0x55, 0xba, 0x4c, 0xa9, 0x12, 0xa8, 0x20,
	0x79, 0x09, 0x5a, 0x19, 0xe0, 0x3f, 0x27, 0xe7, 0x74, 0x84, 0xc6, 0x63, 0x9c, 0x84, 0x4d, 0xb0,
	0xa0, 0x5d, 0x3b, 0x25, 0x7b, 0x27, 0xd8, 0x45, 0x69, 0x5f, 0xc5, 0x49, 0x28, 0x8b, 0x9e, 0x2c,
	0xac, 0x86, 0xd1, 0x62, 0xaa, 0xe2, 0xf9, 0x32, 0x4e, 0x93, 0x66, 0xc9, 0x82, 0xf6, 0x7f, 0xf9,
	0x17, 0x11, 0xa1, 0x31, 0x4d, 0xc3, 0xa8, 0x59, 0xb6, 0xa0, 0x5d, 0x96, 0xc5, 0xdc, 0x8a, 0xd1,
	0xc8, 0x77, 0x50, 0x0d, 0xd1, 0x91, 0xd2, 0xbf, 0x70, 0xfb, 0x7d, 0x77, 0x60, 0x0a, 0x6a, 0xe0,
	0x5e, 0x9e, 0x07, 0xae, 0xe7, 0x5f, 0xba, 0xe3, 0x41, 0xd7, 0x04, 0x3a, 0x40, 0xca, 0x51, 0xe7,
	0x5a, 0x3a, 0x9d, 0xee, 0x9d, 0xef, 0xdc, 0xf6, 0x46, 0xde, 0xc8, 0x2c, 0xd1, 0x3e, 0x36, 0x7e,
	0xd5, 0xd1, 0x78, 0x38, 0x74, 0xa5, 0xe7, 0x74, 0xcd, 0x32, 0xd5, 0xb1, 0x9a, 0x63, 0xaf, 0xd7,
	0x77, 0xdc, 0xb1, 0x67, 0x1a, 0xe7, 0x37, 0xd9, 0x9a, 0xc5, 0x6a, 0xcd, 0x62, 0xbb, 0x66, 0x78,
	0xd5, 0x0c, 0xef, 0x9a, 0xe1, 0x43, 0x33, 0x64, 0x9a, 0xe1, 0x53, 0x33, 0x7c, 0x69, 0x16, 0x5b,
	0xcd, 0xf0, 0xb6, 0x61, 0x91, 0x6d, 0x58, 0xac, 0x36, 0x2c, 0xee, 0x0f, 0x03, 0xf5, 0x10, 0x2c,
	0xed, 0x30, 0x7a, 0x3e, 0xd9, 0x5d, 0x7e, 0x5c, 0x3c, 0xea, 0x27, 0xcc, 0xd2, 0xf9, 0x64, 0x52,
	0x29, 0xc8, 0xd9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x4e, 0xc0, 0x4f, 0x4d, 0x01, 0x00,
	0x00,
}

func (x Error_Kind) String() string {
	s, ok := Error_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.Error{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgError(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintMsgError(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMsgError(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintMsgError(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgError(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgError(uint64(m.Kind))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsgError(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovMsgError(uint64(m.Code))
	}
	return n
}

func sovMsgError(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgError(x uint64) (n int) {
	return sovMsgError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgError(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Error_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgError = fmt.Errorf("proto: unexpected end of group")
)
