// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_device.proto

// +build !nodev

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceState int32

const (
	DEVICE_STATE_UNKNOWN   DeviceState = 0
	DEVICE_STATE_CREATED   DeviceState = 1
	DEVICE_STATE_CONNECTED DeviceState = 2
	DEVICE_STATE_ERRORED   DeviceState = 3
	DEVICE_STATE_REMOVED   DeviceState = 4
)

var DeviceState_name = map[int32]string{
	0: "DEVICE_STATE_UNKNOWN",
	1: "DEVICE_STATE_CREATED",
	2: "DEVICE_STATE_CONNECTED",
	3: "DEVICE_STATE_ERRORED",
	4: "DEVICE_STATE_REMOVED",
}

var DeviceState_value = map[string]int32{
	"DEVICE_STATE_UNKNOWN":   0,
	"DEVICE_STATE_CREATED":   1,
	"DEVICE_STATE_CONNECTED": 2,
	"DEVICE_STATE_ERRORED":   3,
	"DEVICE_STATE_REMOVED":   4,
}

func (DeviceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0fd5ffbd6aabb0be, []int{0}
}

type DeviceStatusMsg struct {
	Kind             DeviceType  `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.DeviceType" json:"kind,omitempty"`
	ConnectorHashHex string      `protobuf:"bytes,2,opt,name=connector_hash_hex,json=connectorHashHex,proto3" json:"connector_hash_hex,omitempty"`
	State            DeviceState `protobuf:"varint,3,opt,name=state,proto3,enum=aranya.DeviceState" json:"state,omitempty"`
	// Human readable description for this state
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DeviceStatusMsg) Reset()      { *m = DeviceStatusMsg{} }
func (*DeviceStatusMsg) ProtoMessage() {}
func (*DeviceStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd5ffbd6aabb0be, []int{0}
}
func (m *DeviceStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatusMsg.Merge(m, src)
}
func (m *DeviceStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatusMsg proto.InternalMessageInfo

func (m *DeviceStatusMsg) GetKind() DeviceType {
	if m != nil {
		return m.Kind
	}
	return DEVICE_TYPE_UNSPECIFIED
}

func (m *DeviceStatusMsg) GetConnectorHashHex() string {
	if m != nil {
		return m.ConnectorHashHex
	}
	return ""
}

func (m *DeviceStatusMsg) GetState() DeviceState {
	if m != nil {
		return m.State
	}
	return DEVICE_STATE_UNKNOWN
}

func (m *DeviceStatusMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeviceStatusListMsg struct {
	Devices []*DeviceStatusMsg `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (m *DeviceStatusListMsg) Reset()      { *m = DeviceStatusListMsg{} }
func (*DeviceStatusListMsg) ProtoMessage() {}
func (*DeviceStatusListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd5ffbd6aabb0be, []int{1}
}
func (m *DeviceStatusListMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceStatusListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceStatusListMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceStatusListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatusListMsg.Merge(m, src)
}
func (m *DeviceStatusListMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceStatusListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatusListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatusListMsg proto.InternalMessageInfo

func (m *DeviceStatusListMsg) GetDevices() []*DeviceStatusMsg {
	if m != nil {
		return m.Devices
	}
	return nil
}

type DeviceOperationResultMsg struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *DeviceOperationResultMsg) Reset()      { *m = DeviceOperationResultMsg{} }
func (*DeviceOperationResultMsg) ProtoMessage() {}
func (*DeviceOperationResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd5ffbd6aabb0be, []int{2}
}
func (m *DeviceOperationResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperationResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperationResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperationResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperationResultMsg.Merge(m, src)
}
func (m *DeviceOperationResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperationResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperationResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperationResultMsg proto.InternalMessageInfo

func (m *DeviceOperationResultMsg) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.DeviceState", DeviceState_name, DeviceState_value)
	proto.RegisterType((*DeviceStatusMsg)(nil), "aranya.DeviceStatusMsg")
	proto.RegisterType((*DeviceStatusListMsg)(nil), "aranya.DeviceStatusListMsg")
	proto.RegisterType((*DeviceOperationResultMsg)(nil), "aranya.DeviceOperationResultMsg")
}

func init() { proto.RegisterFile("msg_device.proto", fileDescriptor_0fd5ffbd6aabb0be) }

var fileDescriptor_0fd5ffbd6aabb0be = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x40, 0xe3, 0x6d, 0xd8, 0x15, 0xde, 0x15, 0x44, 0x5e, 0x04, 0xd6, 0x1e, 0xac, 0xd2, 0x03,
	0x2a, 0x08, 0x82, 0x58, 0xbe, 0xa0, 0x34, 0x96, 0x8a, 0xa0, 0x89, 0xe4, 0x86, 0x56, 0xe2, 0x12,
	0xb9, 0x8d, 0x95, 0x44, 0xd0, 0x24, 0x8a, 0xdd, 0xaa, 0xbd, 0xf1, 0x09, 0xf0, 0x17, 0x1c, 0xf8,
	0x10, 0x8e, 0x3d, 0xf6, 0x48, 0xd3, 0x0b, 0xc7, 0x7e, 0x02, 0xaa, 0x43, 0x57, 0xad, 0x72, 0xf3,
	0xcc, 0x9b, 0x79, 0x9e, 0xb1, 0x0c, 0xad, 0xa9, 0x8c, 0x82, 0x50, 0xcc, 0x93, 0x89, 0xb0, 0xf3,
	0x22, 0x53, 0x19, 0x3a, 0xe7, 0x05, 0x4f, 0x97, 0xfc, 0xe6, 0xea, 0x38, 0xdb, 0xfa, 0x05, 0xe0,
	0x43, 0x47, 0x27, 0x06, 0x8a, 0xab, 0x99, 0xec, 0xcb, 0x08, 0x3d, 0x83, 0xe6, 0x97, 0x24, 0x0d,
	0x31, 0x68, 0x82, 0xf6, 0x83, 0x5b, 0x64, 0x57, 0x8d, 0x76, 0x55, 0xe6, 0x2f, 0x73, 0xc1, 0x34,
	0x47, 0x2f, 0x21, 0x9a, 0x64, 0x69, 0x2a, 0x26, 0x2a, 0x2b, 0x82, 0x98, 0xcb, 0x38, 0x88, 0xc5,
	0x02, 0x9f, 0x35, 0x41, 0xfb, 0x3e, 0xb3, 0xee, 0x48, 0x8f, 0xcb, 0xb8, 0x27, 0x16, 0xe8, 0x39,
	0xbc, 0x27, 0x15, 0x57, 0x02, 0x37, 0xb4, 0xf6, 0xfa, 0x54, 0xbb, 0xbf, 0x5d, 0xb0, 0xaa, 0x02,
	0x61, 0x78, 0x31, 0x15, 0x52, 0xf2, 0x48, 0x60, 0x53, 0xdb, 0x0e, 0x61, 0xab, 0x07, 0xaf, 0x8f,
	0xa7, 0xfd, 0x98, 0x48, 0xb5, 0x9f, 0xf8, 0x0d, 0xbc, 0xa8, 0xb6, 0x92, 0x18, 0x34, 0x1b, 0xed,
	0xcb, 0xdb, 0x27, 0x75, 0xbb, 0xde, 0x8d, 0x1d, 0xea, 0x5a, 0x36, 0xc4, 0x15, 0xf3, 0x72, 0x51,
	0x70, 0x95, 0x64, 0x29, 0x13, 0x72, 0xf6, 0x55, 0xeb, 0x10, 0x34, 0x43, 0xae, 0xb8, 0x76, 0x5d,
	0x31, 0x7d, 0x7e, 0xf1, 0x03, 0xc0, 0xcb, 0xa3, 0x51, 0x11, 0x86, 0x8f, 0x1c, 0x3a, 0x7c, 0xdf,
	0xa5, 0xc1, 0xc0, 0xef, 0xf8, 0x34, 0xf8, 0xe4, 0x7e, 0x70, 0xbd, 0x91, 0x6b, 0x19, 0x35, 0xd2,
	0x65, 0xb4, 0xe3, 0x53, 0xc7, 0x02, 0xe8, 0x06, 0x3e, 0x3e, 0x25, 0x9e, 0xeb, 0xd2, 0xee, 0x9e,
	0x9d, 0xd5, 0xba, 0x28, 0x63, 0x1e, 0xa3, 0x8e, 0xd5, 0xa8, 0x11, 0x46, 0xfb, 0xde, 0x90, 0x3a,
	0x96, 0xf9, 0x6e, 0xb4, 0xda, 0x10, 0x63, 0xbd, 0x21, 0xc6, 0x6e, 0x43, 0xc0, 0xb7, 0x92, 0x80,
	0x9f, 0x25, 0x01, 0xbf, 0x4b, 0x02, 0x56, 0x25, 0x01, 0x7f, 0x4a, 0x02, 0xfe, 0x96, 0xc4, 0xd8,
	0x95, 0x04, 0x7c, 0xdf, 0x12, 0x63, 0xb5, 0x25, 0xc6, 0x7a, 0x4b, 0x8c, 0xcf, 0x4f, 0x79, 0x11,
	0x73, 0x65, 0x87, 0x62, 0xfe, 0xba, 0x7a, 0xa4, 0x57, 0xfa, 0x2b, 0xfc, 0x0f, 0xa2, 0x2c, 0x1f,
	0x8f, 0xcf, 0x75, 0xe6, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x41, 0x62, 0x33, 0x46,
	0x02, 0x00, 0x00,
}

func (x DeviceState) String() string {
	s, ok := DeviceState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeviceStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceStatusMsg)
	if !ok {
		that2, ok := that.(DeviceStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.ConnectorHashHex != that1.ConnectorHashHex {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DeviceStatusListMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceStatusListMsg)
	if !ok {
		that2, ok := that.(DeviceStatusListMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceOperationResultMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperationResultMsg)
	if !ok {
		that2, ok := that.(DeviceOperationResultMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !bytes.Equal(this.Data[i], that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aranyagopb.DeviceStatusMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "ConnectorHashHex: "+fmt.Sprintf("%#v", this.ConnectorHashHex)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceStatusListMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceStatusListMsg{")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceOperationResultMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceOperationResultMsg{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeviceStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgDevice(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintMsgDevice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectorHashHex) > 0 {
		i -= len(m.ConnectorHashHex)
		copy(dAtA[i:], m.ConnectorHashHex)
		i = encodeVarintMsgDevice(dAtA, i, uint64(len(m.ConnectorHashHex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintMsgDevice(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceStatusListMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceStatusListMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceStatusListMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceOperationResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperationResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperationResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintMsgDevice(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDevice(uint64(m.Kind))
	}
	l = len(m.ConnectorHashHex)
	if l > 0 {
		n += 1 + l + sovMsgDevice(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMsgDevice(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgDevice(uint64(l))
	}
	return n
}

func (m *DeviceStatusListMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovMsgDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceOperationResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovMsgDevice(uint64(l))
		}
	}
	return n
}

func sovMsgDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgDevice(x uint64) (n int) {
	return sovMsgDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceStatusMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`ConnectorHashHex:` + fmt.Sprintf("%v", this.ConnectorHashHex) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceStatusListMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*DeviceStatusMsg{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(f.String(), "DeviceStatusMsg", "DeviceStatusMsg", 1) + ","
	}
	repeatedStringForDevices += "}"
	s := strings.Join([]string{`&DeviceStatusListMsg{`,
		`Devices:` + repeatedStringForDevices + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceOperationResultMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceOperationResultMsg{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectorHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= DeviceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceStatusListMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceStatusListMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceStatusListMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &DeviceStatusMsg{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceOperationResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperationResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperationResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgDevice = fmt.Errorf("proto: unexpected end of group")
)
