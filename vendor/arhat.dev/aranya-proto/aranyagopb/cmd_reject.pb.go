// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_reject.proto

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RejectCmd_Reason int32

const (
	_INVALID_REJECTION_REASON        RejectCmd_Reason = 0
	REJECTION_ALREADY_CONNECTED      RejectCmd_Reason = 1
	REJECTION_POD_STATUS_SYNC_ERROR  RejectCmd_Reason = 2
	REJECTION_NODE_STATUS_SYNC_ERROR RejectCmd_Reason = 3
	REJECTION_NETWORK_UPDATE_FAILURE RejectCmd_Reason = 4
	REJECTION_CREDENTIAL_FAILURE     RejectCmd_Reason = 5
	REJECTION_INTERNAL_SERVER_ERROR  RejectCmd_Reason = 6
	REJECTION_INVALID_PROTO          RejectCmd_Reason = 7
)

var RejectCmd_Reason_name = map[int32]string{
	0: "_INVALID_REJECTION_REASON",
	1: "REJECTION_ALREADY_CONNECTED",
	2: "REJECTION_POD_STATUS_SYNC_ERROR",
	3: "REJECTION_NODE_STATUS_SYNC_ERROR",
	4: "REJECTION_NETWORK_UPDATE_FAILURE",
	5: "REJECTION_CREDENTIAL_FAILURE",
	6: "REJECTION_INTERNAL_SERVER_ERROR",
	7: "REJECTION_INVALID_PROTO",
}

var RejectCmd_Reason_value = map[string]int32{
	"_INVALID_REJECTION_REASON":        0,
	"REJECTION_ALREADY_CONNECTED":      1,
	"REJECTION_POD_STATUS_SYNC_ERROR":  2,
	"REJECTION_NODE_STATUS_SYNC_ERROR": 3,
	"REJECTION_NETWORK_UPDATE_FAILURE": 4,
	"REJECTION_CREDENTIAL_FAILURE":     5,
	"REJECTION_INTERNAL_SERVER_ERROR":  6,
	"REJECTION_INVALID_PROTO":          7,
}

func (RejectCmd_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_049290b3e4a66817, []int{0, 0}
}

type RejectCmd struct {
	Reason  RejectCmd_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=aranya.RejectCmd_Reason" json:"reason,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RejectCmd) Reset()      { *m = RejectCmd{} }
func (*RejectCmd) ProtoMessage() {}
func (*RejectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_049290b3e4a66817, []int{0}
}
func (m *RejectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RejectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectCmd.Merge(m, src)
}
func (m *RejectCmd) XXX_Size() int {
	return m.Size()
}
func (m *RejectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RejectCmd proto.InternalMessageInfo

func (m *RejectCmd) GetReason() RejectCmd_Reason {
	if m != nil {
		return m.Reason
	}
	return _INVALID_REJECTION_REASON
}

func (m *RejectCmd) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("aranya.RejectCmd_Reason", RejectCmd_Reason_name, RejectCmd_Reason_value)
	proto.RegisterType((*RejectCmd)(nil), "aranya.RejectCmd")
}

func init() { proto.RegisterFile("cmd_reject.proto", fileDescriptor_049290b3e4a66817) }

var fileDescriptor_049290b3e4a66817 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x06, 0xe0, 0x38, 0x40, 0xae, 0xae, 0x07, 0x14, 0x79, 0x21, 0xa8, 0xe0, 0x86, 0xc2, 0xd0,
	0x85, 0x80, 0xe0, 0x09, 0x4c, 0x72, 0x90, 0x02, 0x91, 0x5d, 0x9d, 0xb8, 0xad, 0xca, 0x62, 0xa5,
	0x6d, 0x54, 0x84, 0xd4, 0xa6, 0x4a, 0x2b, 0x24, 0x36, 0x1e, 0x81, 0x17, 0x60, 0xe7, 0x51, 0x18,
	0x3b, 0x76, 0xa4, 0xe9, 0xc2, 0xd8, 0x8d, 0x15, 0x29, 0x29, 0x0d, 0xa0, 0x3b, 0x9e, 0xf3, 0x7f,
	0x92, 0xad, 0xf3, 0x53, 0x77, 0xb6, 0x9c, 0x9b, 0x32, 0xff, 0x90, 0xcf, 0xb6, 0xc1, 0xba, 0x2c,
	0xb6, 0x05, 0x73, 0xb2, 0x32, 0x5b, 0x7d, 0xca, 0x7a, 0xbf, 0x6c, 0x7a, 0x8d, 0x75, 0x10, 0x2e,
	0xe7, 0xec, 0x39, 0x75, 0xca, 0x3c, 0xdb, 0x14, 0x2b, 0x8f, 0xf8, 0xa4, 0x7f, 0xf7, 0x85, 0x17,
	0x34, 0x2c, 0xb8, 0x90, 0x00, 0xeb, 0x1c, 0xcf, 0x8e, 0x79, 0xf4, 0x6a, 0x99, 0x6f, 0x36, 0xd9,
	0x22, 0xf7, 0x6c, 0x9f, 0xf4, 0xaf, 0xf1, 0xcf, 0xd8, 0xfb, 0x6a, 0x53, 0xa7, 0xc1, 0xec, 0x21,
	0xbd, 0x6f, 0x62, 0x39, 0x12, 0x49, 0x1c, 0x19, 0x84, 0x37, 0x10, 0xea, 0x58, 0x49, 0x83, 0x20,
	0x52, 0x25, 0x5d, 0x8b, 0x75, 0x69, 0xa7, 0xdd, 0x8a, 0x04, 0x41, 0x44, 0x13, 0x13, 0x2a, 0x29,
	0x21, 0xd4, 0x10, 0xb9, 0x84, 0x3d, 0xa6, 0xdd, 0x16, 0x0c, 0x54, 0x64, 0x52, 0x2d, 0xf4, 0x30,
	0x35, 0xe9, 0x44, 0x86, 0x06, 0x10, 0x15, 0xba, 0x36, 0x7b, 0x42, 0xfd, 0x16, 0x49, 0x15, 0xc1,
	0x0d, 0xea, 0xd6, 0x7f, 0x0a, 0xf4, 0x58, 0xe1, 0x5b, 0x33, 0x1c, 0x44, 0x42, 0x83, 0x79, 0x2d,
	0xe2, 0x64, 0x88, 0xe0, 0xde, 0x66, 0x3e, 0x7d, 0xd0, 0xaa, 0x10, 0x21, 0x02, 0xa9, 0x63, 0x91,
	0x5c, 0xc4, 0x9d, 0x7f, 0xbf, 0x14, 0x4b, 0x0d, 0x28, 0x45, 0x62, 0x52, 0xc0, 0x11, 0xe0, 0xf9,
	0x31, 0x87, 0x75, 0xe8, 0xbd, 0xbf, 0x51, 0x73, 0x80, 0x01, 0x2a, 0xad, 0xdc, 0xab, 0x57, 0xe3,
	0xdd, 0x81, 0x5b, 0xfb, 0x03, 0xb7, 0x4e, 0x07, 0x4e, 0x3e, 0x57, 0x9c, 0x7c, 0xab, 0x38, 0xf9,
	0x5e, 0x71, 0xb2, 0xab, 0x38, 0xf9, 0x51, 0x71, 0xf2, 0xb3, 0xe2, 0xd6, 0xa9, 0xe2, 0xe4, 0xcb,
	0x91, 0x5b, 0xbb, 0x23, 0xb7, 0xf6, 0x47, 0x6e, 0xbd, 0x7b, 0x94, 0x95, 0xef, 0xb3, 0x6d, 0x30,
	0xcf, 0x3f, 0x3e, 0x6b, 0xaa, 0x79, 0x5a, 0xf7, 0x79, 0x1e, 0x16, 0xc5, 0x7a, 0x3a, 0x75, 0xea,
	0xcd, 0xcb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x96, 0xb5, 0xf8, 0xf5, 0x01, 0x00, 0x00,
}

func (x RejectCmd_Reason) String() string {
	s, ok := RejectCmd_Reason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RejectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RejectCmd)
	if !ok {
		that2, ok := that.(RejectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *RejectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.RejectCmd{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdReject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RejectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RejectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCmdReject(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reason != 0 {
		i = encodeVarintCmdReject(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdReject(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdReject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RejectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovCmdReject(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCmdReject(uint64(l))
	}
	return n
}

func sovCmdReject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdReject(x uint64) (n int) {
	return sovCmdReject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RejectCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RejectCmd{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdReject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RejectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdReject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= RejectCmd_Reason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdReject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdReject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdReject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdReject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdReject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdReject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdReject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdReject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdReject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdReject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdReject = fmt.Errorf("proto: unexpected end of group")
)
