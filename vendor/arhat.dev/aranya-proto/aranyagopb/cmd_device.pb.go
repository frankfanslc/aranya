// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_device.proto

// +build !nodev

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceMetrics_UploadMethod int32

const (
	UPLOAD_WITH_NODE_METRICS       DeviceMetrics_UploadMethod = 0
	UPLOAD_WITH_ARHAT_CONNECTIVITY DeviceMetrics_UploadMethod = 1
	UPLOAD_WITH_STANDALONE_CLIENT  DeviceMetrics_UploadMethod = 2
)

var DeviceMetrics_UploadMethod_name = map[int32]string{
	0: "UPLOAD_WITH_NODE_METRICS",
	1: "UPLOAD_WITH_ARHAT_CONNECTIVITY",
	2: "UPLOAD_WITH_STANDALONE_CLIENT",
}

var DeviceMetrics_UploadMethod_value = map[string]int32{
	"UPLOAD_WITH_NODE_METRICS":       0,
	"UPLOAD_WITH_ARHAT_CONNECTIVITY": 1,
	"UPLOAD_WITH_STANDALONE_CLIENT":  2,
}

func (DeviceMetrics_UploadMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1, 0}
}

type DeviceConnectivity_Mode int32

const (
	DEVICE_CONNECTIVITY_MODE_CLIENT DeviceConnectivity_Mode = 0
	DEVICE_CONNECTIVITY_MODE_SERVER DeviceConnectivity_Mode = 1
)

var DeviceConnectivity_Mode_name = map[int32]string{
	0: "DEVICE_CONNECTIVITY_MODE_CLIENT",
	1: "DEVICE_CONNECTIVITY_MODE_SERVER",
}

var DeviceConnectivity_Mode_value = map[string]int32{
	"DEVICE_CONNECTIVITY_MODE_CLIENT": 0,
	"DEVICE_CONNECTIVITY_MODE_SERVER": 1,
}

func (DeviceConnectivity_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{3, 0}
}

type DeviceOperation struct {
	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransportParams map[string]string `protobuf:"bytes,2,rep,name=transport_params,json=transportParams,proto3" json:"transport_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceOperation) Reset()      { *m = DeviceOperation{} }
func (*DeviceOperation) ProtoMessage() {}
func (*DeviceOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{0}
}
func (m *DeviceOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperation.Merge(m, src)
}
func (m *DeviceOperation) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperation proto.InternalMessageInfo

func (m *DeviceOperation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceOperation) GetTransportParams() map[string]string {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

type DeviceMetrics struct {
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TransportParams map[string]string          `protobuf:"bytes,2,rep,name=transport_params,json=transportParams,proto3" json:"transport_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UploadMethod    DeviceMetrics_UploadMethod `protobuf:"varint,3,opt,name=upload_method,json=uploadMethod,proto3,enum=aranya.DeviceMetrics_UploadMethod" json:"upload_method,omitempty"`
	UploadParams    map[string]string          `protobuf:"bytes,4,rep,name=upload_params,json=uploadParams,proto3" json:"upload_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceMetrics) Reset()      { *m = DeviceMetrics{} }
func (*DeviceMetrics) ProtoMessage() {}
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1}
}
func (m *DeviceMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetrics.Merge(m, src)
}
func (m *DeviceMetrics) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetrics proto.InternalMessageInfo

func (m *DeviceMetrics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceMetrics) GetTransportParams() map[string]string {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

func (m *DeviceMetrics) GetUploadMethod() DeviceMetrics_UploadMethod {
	if m != nil {
		return m.UploadMethod
	}
	return UPLOAD_WITH_NODE_METRICS
}

func (m *DeviceMetrics) GetUploadParams() map[string]string {
	if m != nil {
		return m.UploadParams
	}
	return nil
}

type DeviceConnectivityTLSConfig struct {
	CaCert []byte `protobuf:"bytes,1,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Cert   []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key    []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeviceConnectivityTLSConfig) Reset()      { *m = DeviceConnectivityTLSConfig{} }
func (*DeviceConnectivityTLSConfig) ProtoMessage() {}
func (*DeviceConnectivityTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{2}
}
func (m *DeviceConnectivityTLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnectivityTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnectivityTLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnectivityTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnectivityTLSConfig.Merge(m, src)
}
func (m *DeviceConnectivityTLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnectivityTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnectivityTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnectivityTLSConfig proto.InternalMessageInfo

func (m *DeviceConnectivityTLSConfig) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *DeviceConnectivityTLSConfig) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *DeviceConnectivityTLSConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeviceConnectivity struct {
	Transport string                       `protobuf:"bytes,1,opt,name=transport,proto3" json:"transport,omitempty"`
	Mode      DeviceConnectivity_Mode      `protobuf:"varint,2,opt,name=mode,proto3,enum=aranya.DeviceConnectivity_Mode" json:"mode,omitempty"`
	Target    string                       `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Params    map[string]string            `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tls       *DeviceConnectivityTLSConfig `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (m *DeviceConnectivity) Reset()      { *m = DeviceConnectivity{} }
func (*DeviceConnectivity) ProtoMessage() {}
func (*DeviceConnectivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{3}
}
func (m *DeviceConnectivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnectivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnectivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnectivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnectivity.Merge(m, src)
}
func (m *DeviceConnectivity) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnectivity) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnectivity.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnectivity proto.InternalMessageInfo

func (m *DeviceConnectivity) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *DeviceConnectivity) GetMode() DeviceConnectivity_Mode {
	if m != nil {
		return m.Mode
	}
	return DEVICE_CONNECTIVITY_MODE_CLIENT
}

func (m *DeviceConnectivity) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DeviceConnectivity) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *DeviceConnectivity) GetTls() *DeviceConnectivityTLSConfig {
	if m != nil {
		return m.Tls
	}
	return nil
}

type DeviceEnsureCmd struct {
	DeviceId           string              `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceConnectivity *DeviceConnectivity `protobuf:"bytes,2,opt,name=device_connectivity,json=deviceConnectivity,proto3" json:"device_connectivity,omitempty"`
	UploadConnectivity *DeviceConnectivity `protobuf:"bytes,3,opt,name=upload_connectivity,json=uploadConnectivity,proto3" json:"upload_connectivity,omitempty"`
	DeviceOperations   []*DeviceOperation  `protobuf:"bytes,4,rep,name=device_operations,json=deviceOperations,proto3" json:"device_operations,omitempty"`
	DeviceMetrics      []*DeviceMetrics    `protobuf:"bytes,5,rep,name=device_metrics,json=deviceMetrics,proto3" json:"device_metrics,omitempty"`
}

func (m *DeviceEnsureCmd) Reset()      { *m = DeviceEnsureCmd{} }
func (*DeviceEnsureCmd) ProtoMessage() {}
func (*DeviceEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{4}
}
func (m *DeviceEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceEnsureCmd.Merge(m, src)
}
func (m *DeviceEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceEnsureCmd proto.InternalMessageInfo

func (m *DeviceEnsureCmd) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceEnsureCmd) GetDeviceConnectivity() *DeviceConnectivity {
	if m != nil {
		return m.DeviceConnectivity
	}
	return nil
}

func (m *DeviceEnsureCmd) GetUploadConnectivity() *DeviceConnectivity {
	if m != nil {
		return m.UploadConnectivity
	}
	return nil
}

func (m *DeviceEnsureCmd) GetDeviceOperations() []*DeviceOperation {
	if m != nil {
		return m.DeviceOperations
	}
	return nil
}

func (m *DeviceEnsureCmd) GetDeviceMetrics() []*DeviceMetrics {
	if m != nil {
		return m.DeviceMetrics
	}
	return nil
}

type DeviceListCmd struct {
}

func (m *DeviceListCmd) Reset()      { *m = DeviceListCmd{} }
func (*DeviceListCmd) ProtoMessage() {}
func (*DeviceListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{5}
}
func (m *DeviceListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceListCmd.Merge(m, src)
}
func (m *DeviceListCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceListCmd proto.InternalMessageInfo

type DeviceDeleteCmd struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *DeviceDeleteCmd) Reset()      { *m = DeviceDeleteCmd{} }
func (*DeviceDeleteCmd) ProtoMessage() {}
func (*DeviceDeleteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{6}
}
func (m *DeviceDeleteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceDeleteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceDeleteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceDeleteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceDeleteCmd.Merge(m, src)
}
func (m *DeviceDeleteCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceDeleteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceDeleteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceDeleteCmd proto.InternalMessageInfo

func (m *DeviceDeleteCmd) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.DeviceMetrics_UploadMethod", DeviceMetrics_UploadMethod_name, DeviceMetrics_UploadMethod_value)
	proto.RegisterEnum("aranya.DeviceConnectivity_Mode", DeviceConnectivity_Mode_name, DeviceConnectivity_Mode_value)
	proto.RegisterType((*DeviceOperation)(nil), "aranya.DeviceOperation")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceOperation.TransportParamsEntry")
	proto.RegisterType((*DeviceMetrics)(nil), "aranya.DeviceMetrics")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetrics.TransportParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetrics.UploadParamsEntry")
	proto.RegisterType((*DeviceConnectivityTLSConfig)(nil), "aranya.DeviceConnectivityTLSConfig")
	proto.RegisterType((*DeviceConnectivity)(nil), "aranya.DeviceConnectivity")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceConnectivity.ParamsEntry")
	proto.RegisterType((*DeviceEnsureCmd)(nil), "aranya.DeviceEnsureCmd")
	proto.RegisterType((*DeviceListCmd)(nil), "aranya.DeviceListCmd")
	proto.RegisterType((*DeviceDeleteCmd)(nil), "aranya.DeviceDeleteCmd")
}

func init() { proto.RegisterFile("cmd_device.proto", fileDescriptor_9e38e886ce453fd3) }

var fileDescriptor_9e38e886ce453fd3 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xf3, 0x44,
	0x10, 0xf6, 0xda, 0x69, 0x20, 0x93, 0x36, 0xf5, 0xbb, 0xef, 0x0b, 0xb5, 0xd2, 0xd6, 0x4d, 0x5d,
	0x09, 0x22, 0x04, 0x01, 0xa5, 0x42, 0x02, 0x84, 0x40, 0xa9, 0x63, 0xd1, 0xa8, 0xf9, 0xa8, 0x1c,
	0xb7, 0x15, 0x08, 0xc9, 0x72, 0xed, 0xa5, 0xb5, 0x88, 0xed, 0xc8, 0xde, 0x44, 0xca, 0x0d, 0x89,
	0x23, 0x17, 0x7e, 0x06, 0xbf, 0x82, 0x33, 0x07, 0x0e, 0x3d, 0xf6, 0x48, 0xd3, 0x0b, 0xc7, 0xfe,
	0x04, 0x94, 0xb5, 0x1d, 0x6c, 0xda, 0x94, 0x0f, 0x71, 0xdb, 0x79, 0xfc, 0xec, 0xb3, 0x33, 0xcf,
	0x4c, 0x26, 0x20, 0xda, 0x9e, 0x63, 0x3a, 0x64, 0xea, 0xda, 0xa4, 0x31, 0x0e, 0x03, 0x1a, 0xe0,
	0xa2, 0x15, 0x5a, 0xfe, 0xcc, 0x52, 0x7e, 0x46, 0xb0, 0xd9, 0x66, 0x1f, 0x06, 0x63, 0x12, 0x5a,
	0xd4, 0x0d, 0x7c, 0x5c, 0x01, 0xde, 0x75, 0x24, 0x54, 0x43, 0xf5, 0x92, 0xce, 0xbb, 0x0e, 0xbe,
	0x00, 0x91, 0x86, 0x96, 0x1f, 0x8d, 0x83, 0x90, 0x9a, 0x63, 0x2b, 0xb4, 0xbc, 0x48, 0xe2, 0x6b,
	0x42, 0xbd, 0xdc, 0x7c, 0xb7, 0x11, 0xcb, 0x34, 0xfe, 0x22, 0xd1, 0x30, 0x52, 0xfe, 0x29, 0xa3,
	0x6b, 0x3e, 0x0d, 0x67, 0xfa, 0x26, 0xcd, 0xa3, 0xd5, 0x23, 0x78, 0xf5, 0x14, 0x11, 0x8b, 0x20,
	0x7c, 0x4b, 0x66, 0x49, 0x06, 0x8b, 0x23, 0x7e, 0x05, 0x6b, 0x53, 0x6b, 0x34, 0x21, 0x12, 0xcf,
	0xb0, 0x38, 0xf8, 0x84, 0xff, 0x08, 0x29, 0x3f, 0x14, 0x60, 0x23, 0x7e, 0xbd, 0x47, 0x68, 0xe8,
	0xda, 0x11, 0xc6, 0x50, 0xf0, 0x2d, 0x8f, 0x24, 0xd7, 0xd9, 0x19, 0x9f, 0xad, 0x2c, 0xe1, 0x9d,
	0x7c, 0x09, 0x89, 0xc8, 0x3f, 0x2b, 0x00, 0x7f, 0x01, 0x1b, 0x93, 0xf1, 0x28, 0xb0, 0x1c, 0xd3,
	0x23, 0xf4, 0x3a, 0x70, 0x24, 0xa1, 0x86, 0xea, 0x95, 0xa6, 0xf2, 0xb4, 0xe6, 0x19, 0xa3, 0xf6,
	0x18, 0x53, 0x5f, 0x9f, 0x64, 0x22, 0xdc, 0x5d, 0x0a, 0x25, 0xc9, 0x15, 0x58, 0x72, 0x6f, 0x3f,
	0x27, 0x94, 0xcd, 0x2c, 0x51, 0xfb, 0xff, 0x7c, 0xad, 0x7e, 0x0e, 0x2f, 0x1e, 0x3d, 0xf3, 0xaf,
	0x1a, 0x13, 0xc1, 0x7a, 0xb6, 0x60, 0xbc, 0x03, 0xd2, 0xd9, 0x69, 0x77, 0xd0, 0x6a, 0x9b, 0x17,
	0x1d, 0xe3, 0xd8, 0xec, 0x0f, 0xda, 0x9a, 0xd9, 0xd3, 0x0c, 0xbd, 0xa3, 0x0e, 0x45, 0x0e, 0x2b,
	0x20, 0x67, 0xbf, 0xb6, 0xf4, 0xe3, 0x96, 0x61, 0xaa, 0x83, 0x7e, 0x5f, 0x53, 0x8d, 0xce, 0x79,
	0xc7, 0xf8, 0x52, 0x44, 0x78, 0x1f, 0x76, 0xb3, 0x9c, 0xa1, 0xd1, 0xea, 0xb7, 0x5b, 0xdd, 0x41,
	0x5f, 0x33, 0xd5, 0x6e, 0x47, 0xeb, 0x1b, 0x22, 0xaf, 0x7c, 0x0d, 0xdb, 0xb1, 0x55, 0x6a, 0xe0,
	0xfb, 0xc4, 0xa6, 0xee, 0xd4, 0xa5, 0x33, 0xa3, 0x3b, 0x54, 0x03, 0xff, 0x1b, 0xf7, 0x0a, 0x6f,
	0xc1, 0x6b, 0xb6, 0x65, 0xda, 0x24, 0xa4, 0xac, 0x86, 0x75, 0xbd, 0x68, 0x5b, 0x2a, 0x09, 0xe9,
	0x62, 0x66, 0x18, 0xca, 0x33, 0x94, 0x9d, 0xd3, 0x62, 0x05, 0x06, 0x2d, 0x8e, 0xca, 0xf7, 0x02,
	0xe0, 0xc7, 0xf2, 0x78, 0x07, 0x4a, 0xcb, 0xc1, 0x48, 0xbc, 0xf9, 0x13, 0xc0, 0x87, 0x50, 0xf0,
	0x02, 0x27, 0x36, 0xa8, 0xd2, 0xdc, 0xcb, 0x77, 0x34, 0xab, 0xd3, 0xe8, 0x05, 0x0e, 0xd1, 0x19,
	0x19, 0xbf, 0x09, 0x45, 0x6a, 0x85, 0x57, 0x84, 0xb2, 0xe7, 0x4b, 0x7a, 0x12, 0xe1, 0xcf, 0xa0,
	0x98, 0x1b, 0x90, 0xb7, 0x9e, 0x91, 0xcb, 0xce, 0x47, 0x72, 0x0b, 0x7f, 0x08, 0x02, 0x1d, 0x45,
	0xd2, 0x5a, 0x0d, 0xd5, 0xcb, 0xcd, 0x83, 0xd5, 0x97, 0x97, 0x96, 0xe9, 0x0b, 0x7e, 0xf5, 0x63,
	0x28, 0xff, 0xd7, 0x31, 0x38, 0x85, 0xc2, 0xa2, 0x2e, 0x7c, 0x00, 0x7b, 0x6d, 0xed, 0xbc, 0xa3,
	0x6a, 0xb9, 0xae, 0x9a, 0xbd, 0xc5, 0x18, 0x24, 0xed, 0xe3, 0x9e, 0x25, 0x0d, 0x35, 0xfd, 0x5c,
	0xd3, 0x45, 0xa4, 0xfc, 0xca, 0xa7, 0x2b, 0x4b, 0xf3, 0xa3, 0x49, 0x48, 0x54, 0xcf, 0xc1, 0xdb,
	0x50, 0x8a, 0xd7, 0x9b, 0xb9, 0xdc, 0x5c, 0xaf, 0xc7, 0x40, 0xc7, 0xc1, 0x27, 0xf0, 0x32, 0xf9,
	0x68, 0x67, 0x4a, 0x64, 0xa9, 0x96, 0x9b, 0xd5, 0xd5, 0x26, 0xe8, 0xd8, 0x79, 0xdc, 0xec, 0x13,
	0x78, 0x99, 0xfc, 0x52, 0x73, 0x62, 0xc2, 0xdf, 0x8b, 0xc5, 0xd7, 0x72, 0x62, 0x6d, 0x78, 0x91,
	0x64, 0x16, 0xa4, 0xab, 0x33, 0xed, 0xec, 0xd6, 0x8a, 0xd5, 0xaa, 0x8b, 0x4e, 0x1e, 0x88, 0xf0,
	0xa7, 0x50, 0x49, 0x54, 0xbc, 0x78, 0x41, 0x48, 0x6b, 0x4c, 0xe2, 0x8d, 0x27, 0xb7, 0x87, 0xbe,
	0xe1, 0x64, 0x43, 0x65, 0x33, 0xdd, 0x9f, 0x5d, 0x37, 0xa2, 0xaa, 0xe7, 0x28, 0x1f, 0xa4, 0xf6,
	0xb6, 0xc9, 0x88, 0x50, 0x66, 0xef, 0x2e, 0xc0, 0xd2, 0xde, 0x48, 0x42, 0x35, 0x61, 0x31, 0xe2,
	0xa9, 0xbf, 0xd1, 0xd1, 0xc5, 0xcd, 0x9d, 0xcc, 0xdd, 0xde, 0xc9, 0xdc, 0xc3, 0x9d, 0x8c, 0xbe,
	0x9b, 0xcb, 0xe8, 0xa7, 0xb9, 0x8c, 0x7e, 0x99, 0xcb, 0xe8, 0x66, 0x2e, 0xa3, 0xdf, 0xe6, 0x32,
	0xfa, 0x7d, 0x2e, 0x73, 0x0f, 0x73, 0x19, 0xfd, 0x78, 0x2f, 0x73, 0x37, 0xf7, 0x32, 0x77, 0x7b,
	0x2f, 0x73, 0x5f, 0xed, 0x5b, 0xe1, 0xb5, 0x45, 0x1b, 0x0e, 0x99, 0xbe, 0x1f, 0xe7, 0xf9, 0x1e,
	0xfb, 0x6b, 0x4a, 0x82, 0xab, 0x60, 0x7c, 0x79, 0x59, 0x64, 0xc8, 0xe1, 0x1f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x92, 0x92, 0x3e, 0x26, 0xc0, 0x06, 0x00, 0x00,
}

func (x DeviceMetrics_UploadMethod) String() string {
	s, ok := DeviceMetrics_UploadMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceConnectivity_Mode) String() string {
	s, ok := DeviceConnectivity_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeviceOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperation)
	if !ok {
		that2, ok := that.(DeviceOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.TransportParams) != len(that1.TransportParams) {
		return false
	}
	for i := range this.TransportParams {
		if this.TransportParams[i] != that1.TransportParams[i] {
			return false
		}
	}
	return true
}
func (this *DeviceMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetrics)
	if !ok {
		that2, ok := that.(DeviceMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.TransportParams) != len(that1.TransportParams) {
		return false
	}
	for i := range this.TransportParams {
		if this.TransportParams[i] != that1.TransportParams[i] {
			return false
		}
	}
	if this.UploadMethod != that1.UploadMethod {
		return false
	}
	if len(this.UploadParams) != len(that1.UploadParams) {
		return false
	}
	for i := range this.UploadParams {
		if this.UploadParams[i] != that1.UploadParams[i] {
			return false
		}
	}
	return true
}
func (this *DeviceConnectivityTLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnectivityTLSConfig)
	if !ok {
		that2, ok := that.(DeviceConnectivityTLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.CaCert, that1.CaCert) {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *DeviceConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnectivity)
	if !ok {
		that2, ok := that.(DeviceConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Transport != that1.Transport {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *DeviceEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceEnsureCmd)
	if !ok {
		that2, ok := that.(DeviceEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.DeviceConnectivity.Equal(that1.DeviceConnectivity) {
		return false
	}
	if !this.UploadConnectivity.Equal(that1.UploadConnectivity) {
		return false
	}
	if len(this.DeviceOperations) != len(that1.DeviceOperations) {
		return false
	}
	for i := range this.DeviceOperations {
		if !this.DeviceOperations[i].Equal(that1.DeviceOperations[i]) {
			return false
		}
	}
	if len(this.DeviceMetrics) != len(that1.DeviceMetrics) {
		return false
	}
	for i := range this.DeviceMetrics {
		if !this.DeviceMetrics[i].Equal(that1.DeviceMetrics[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceListCmd)
	if !ok {
		that2, ok := that.(DeviceListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeviceDeleteCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceDeleteCmd)
	if !ok {
		that2, ok := that.(DeviceDeleteCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceIds) != len(that1.DeviceIds) {
		return false
	}
	for i := range this.DeviceIds {
		if this.DeviceIds[i] != that1.DeviceIds[i] {
			return false
		}
	}
	return true
}
func (this *DeviceOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.DeviceOperation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%#v: %#v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	if this.TransportParams != nil {
		s = append(s, "TransportParams: "+mapStringForTransportParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetrics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aranyagopb.DeviceMetrics{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%#v: %#v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	if this.TransportParams != nil {
		s = append(s, "TransportParams: "+mapStringForTransportParams+",\n")
	}
	s = append(s, "UploadMethod: "+fmt.Sprintf("%#v", this.UploadMethod)+",\n")
	keysForUploadParams := make([]string, 0, len(this.UploadParams))
	for k, _ := range this.UploadParams {
		keysForUploadParams = append(keysForUploadParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUploadParams)
	mapStringForUploadParams := "map[string]string{"
	for _, k := range keysForUploadParams {
		mapStringForUploadParams += fmt.Sprintf("%#v: %#v,", k, this.UploadParams[k])
	}
	mapStringForUploadParams += "}"
	if this.UploadParams != nil {
		s = append(s, "UploadParams: "+mapStringForUploadParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnectivityTLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.DeviceConnectivityTLSConfig{")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.DeviceConnectivity{")
	s = append(s, "Transport: "+fmt.Sprintf("%#v", this.Transport)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.DeviceEnsureCmd{")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.DeviceConnectivity != nil {
		s = append(s, "DeviceConnectivity: "+fmt.Sprintf("%#v", this.DeviceConnectivity)+",\n")
	}
	if this.UploadConnectivity != nil {
		s = append(s, "UploadConnectivity: "+fmt.Sprintf("%#v", this.UploadConnectivity)+",\n")
	}
	if this.DeviceOperations != nil {
		s = append(s, "DeviceOperations: "+fmt.Sprintf("%#v", this.DeviceOperations)+",\n")
	}
	if this.DeviceMetrics != nil {
		s = append(s, "DeviceMetrics: "+fmt.Sprintf("%#v", this.DeviceMetrics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.DeviceListCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceDeleteCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceDeleteCmd{")
	s = append(s, "DeviceIds: "+fmt.Sprintf("%#v", this.DeviceIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeviceOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransportParams) > 0 {
		for k := range m.TransportParams {
			v := m.TransportParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UploadParams) > 0 {
		for k := range m.UploadParams {
			v := m.UploadParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UploadMethod != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.UploadMethod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransportParams) > 0 {
		for k := range m.TransportParams {
			v := m.TransportParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnectivityTLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnectivityTLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnectivityTLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnectivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mode != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceMetrics) > 0 {
		for iNdEx := len(m.DeviceMetrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeviceMetrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DeviceOperations) > 0 {
		for iNdEx := len(m.DeviceOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeviceOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UploadConnectivity != nil {
		{
			size, err := m.UploadConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceConnectivity != nil {
		{
			size, err := m.DeviceConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeviceDeleteCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceDeleteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceDeleteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.TransportParams) > 0 {
		for k, v := range m.TransportParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.TransportParams) > 0 {
		for k, v := range m.TransportParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	if m.UploadMethod != 0 {
		n += 1 + sovCmdDevice(uint64(m.UploadMethod))
	}
	if len(m.UploadParams) > 0 {
		for k, v := range m.UploadParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceConnectivityTLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transport)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovCmdDevice(uint64(m.Mode))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.DeviceConnectivity != nil {
		l = m.DeviceConnectivity.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.UploadConnectivity != nil {
		l = m.UploadConnectivity.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.DeviceOperations) > 0 {
		for _, e := range m.DeviceOperations {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	if len(m.DeviceMetrics) > 0 {
		for _, e := range m.DeviceMetrics {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeviceDeleteCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func sovCmdDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdDevice(x uint64) (n int) {
	return sovCmdDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceOperation) String() string {
	if this == nil {
		return "nil"
	}
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%v: %v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	s := strings.Join([]string{`&DeviceOperation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TransportParams:` + mapStringForTransportParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetrics) String() string {
	if this == nil {
		return "nil"
	}
	keysForTransportParams := make([]string, 0, len(this.TransportParams))
	for k, _ := range this.TransportParams {
		keysForTransportParams = append(keysForTransportParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransportParams)
	mapStringForTransportParams := "map[string]string{"
	for _, k := range keysForTransportParams {
		mapStringForTransportParams += fmt.Sprintf("%v: %v,", k, this.TransportParams[k])
	}
	mapStringForTransportParams += "}"
	keysForUploadParams := make([]string, 0, len(this.UploadParams))
	for k, _ := range this.UploadParams {
		keysForUploadParams = append(keysForUploadParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUploadParams)
	mapStringForUploadParams := "map[string]string{"
	for _, k := range keysForUploadParams {
		mapStringForUploadParams += fmt.Sprintf("%v: %v,", k, this.UploadParams[k])
	}
	mapStringForUploadParams += "}"
	s := strings.Join([]string{`&DeviceMetrics{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TransportParams:` + mapStringForTransportParams + `,`,
		`UploadMethod:` + fmt.Sprintf("%v", this.UploadMethod) + `,`,
		`UploadParams:` + mapStringForUploadParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnectivityTLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceConnectivityTLSConfig{`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceConnectivity{`,
		`Transport:` + fmt.Sprintf("%v", this.Transport) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Tls:` + strings.Replace(this.Tls.String(), "DeviceConnectivityTLSConfig", "DeviceConnectivityTLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeviceOperations := "[]*DeviceOperation{"
	for _, f := range this.DeviceOperations {
		repeatedStringForDeviceOperations += strings.Replace(f.String(), "DeviceOperation", "DeviceOperation", 1) + ","
	}
	repeatedStringForDeviceOperations += "}"
	repeatedStringForDeviceMetrics := "[]*DeviceMetrics{"
	for _, f := range this.DeviceMetrics {
		repeatedStringForDeviceMetrics += strings.Replace(f.String(), "DeviceMetrics", "DeviceMetrics", 1) + ","
	}
	repeatedStringForDeviceMetrics += "}"
	s := strings.Join([]string{`&DeviceEnsureCmd{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`DeviceConnectivity:` + strings.Replace(this.DeviceConnectivity.String(), "DeviceConnectivity", "DeviceConnectivity", 1) + `,`,
		`UploadConnectivity:` + strings.Replace(this.UploadConnectivity.String(), "DeviceConnectivity", "DeviceConnectivity", 1) + `,`,
		`DeviceOperations:` + repeatedStringForDeviceOperations + `,`,
		`DeviceMetrics:` + repeatedStringForDeviceMetrics + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceListCmd{`,
		`}`,
	}, "")
	return s
}
func (this *DeviceDeleteCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceDeleteCmd{`,
		`DeviceIds:` + fmt.Sprintf("%v", this.DeviceIds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransportParams == nil {
				m.TransportParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransportParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransportParams == nil {
				m.TransportParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransportParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadMethod", wireType)
			}
			m.UploadMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadMethod |= DeviceMetrics_UploadMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadParams == nil {
				m.UploadParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UploadParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnectivityTLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnectivityTLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnectivityTLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnectivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnectivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnectivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= DeviceConnectivity_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &DeviceConnectivityTLSConfig{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceConnectivity == nil {
				m.DeviceConnectivity = &DeviceConnectivity{}
			}
			if err := m.DeviceConnectivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadConnectivity == nil {
				m.UploadConnectivity = &DeviceConnectivity{}
			}
			if err := m.UploadConnectivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceOperations = append(m.DeviceOperations, &DeviceOperation{})
			if err := m.DeviceOperations[len(m.DeviceOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceMetrics = append(m.DeviceMetrics, &DeviceMetrics{})
			if err := m.DeviceMetrics[len(m.DeviceMetrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceDeleteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceDeleteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceDeleteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdDevice = fmt.Errorf("proto: unexpected end of group")
)
