// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_device.proto

// +build !nodev

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceMetric_ReportMethod int32

const (
	// Report device metrics when collecting node metrics
	REPORT_WITH_NODE_METRICS DeviceMetric_ReportMethod = 0
	// Report device metrics along with arhat client
	REPORT_WITH_ARHAT_CONNECTIVITY DeviceMetric_ReportMethod = 1
	// Create a standalone client for metrics uploading
	REPORT_WITH_STANDALONE_CLIENT DeviceMetric_ReportMethod = 2
)

var DeviceMetric_ReportMethod_name = map[int32]string{
	0: "REPORT_WITH_NODE_METRICS",
	1: "REPORT_WITH_ARHAT_CONNECTIVITY",
	2: "REPORT_WITH_STANDALONE_CLIENT",
}

var DeviceMetric_ReportMethod_value = map[string]int32{
	"REPORT_WITH_NODE_METRICS":       0,
	"REPORT_WITH_ARHAT_CONNECTIVITY": 1,
	"REPORT_WITH_STANDALONE_CLIENT":  2,
}

func (DeviceMetric_ReportMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1, 0}
}

type DeviceMetric_ValueType int32

const (
	METRICS_VALUE_TYPE_UNTYPED DeviceMetric_ValueType = 0
	METRICS_VALUE_TYPE_COUNTER DeviceMetric_ValueType = 1
	METRICS_VALUE_TYPE_GAUGE   DeviceMetric_ValueType = 2
)

var DeviceMetric_ValueType_name = map[int32]string{
	0: "METRICS_VALUE_TYPE_UNTYPED",
	1: "METRICS_VALUE_TYPE_COUNTER",
	2: "METRICS_VALUE_TYPE_GAUGE",
}

var DeviceMetric_ValueType_value = map[string]int32{
	"METRICS_VALUE_TYPE_UNTYPED": 0,
	"METRICS_VALUE_TYPE_COUNTER": 1,
	"METRICS_VALUE_TYPE_GAUGE":   2,
}

func (DeviceMetric_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1, 1}
}

type DeviceOperation struct {
	// (required) identifier of this operation
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// (optional) params usd for device connectivity when executing this
	// operation
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceOperation) Reset()      { *m = DeviceOperation{} }
func (*DeviceOperation) ProtoMessage() {}
func (*DeviceOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{0}
}
func (m *DeviceOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperation.Merge(m, src)
}
func (m *DeviceOperation) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperation proto.InternalMessageInfo

func (m *DeviceOperation) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *DeviceOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type DeviceMetric struct {
	// Name of this metric
	Name         string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReportMethod DeviceMetric_ReportMethod `protobuf:"varint,2,opt,name=report_method,json=reportMethod,proto3,enum=aranya.DeviceMetric_ReportMethod" json:"report_method,omitempty"`
	ValueType    DeviceMetric_ValueType    `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=aranya.DeviceMetric_ValueType" json:"value_type,omitempty"`
	// (required) params for device connector to retrieve metrics
	DeviceParams map[string]string `protobuf:"bytes,4,rep,name=device_params,json=deviceParams,proto3" json:"device_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Hex encoded hash of the metrics reporter
	ReporterName string `protobuf:"bytes,5,opt,name=reporter_name,json=reporterName,proto3" json:"reporter_name,omitempty"`
	// (optional) params for metrics_reporter to upload metrics
	ReporterParams map[string]string `protobuf:"bytes,6,rep,name=reporter_params,json=reporterParams,proto3" json:"reporter_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceMetric) Reset()      { *m = DeviceMetric{} }
func (*DeviceMetric) ProtoMessage() {}
func (*DeviceMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{1}
}
func (m *DeviceMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetric.Merge(m, src)
}
func (m *DeviceMetric) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetric.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetric proto.InternalMessageInfo

func (m *DeviceMetric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceMetric) GetReportMethod() DeviceMetric_ReportMethod {
	if m != nil {
		return m.ReportMethod
	}
	return REPORT_WITH_NODE_METRICS
}

func (m *DeviceMetric) GetValueType() DeviceMetric_ValueType {
	if m != nil {
		return m.ValueType
	}
	return METRICS_VALUE_TYPE_UNTYPED
}

func (m *DeviceMetric) GetDeviceParams() map[string]string {
	if m != nil {
		return m.DeviceParams
	}
	return nil
}

func (m *DeviceMetric) GetReporterName() string {
	if m != nil {
		return m.ReporterName
	}
	return ""
}

func (m *DeviceMetric) GetReporterParams() map[string]string {
	if m != nil {
		return m.ReporterParams
	}
	return nil
}

type DeviceEnsureCmd struct {
	Kind DeviceType `protobuf:"varint,1,opt,name=kind,proto3,enum=aranya.DeviceType" json:"kind,omitempty"`
	// (required) User defined device name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (required) Connector defines how to connect to the device, operations operate
	// upon this connector
	Connector *Connectivity `protobuf:"bytes,3,opt,name=connector,proto3" json:"connector,omitempty"`
	// (optional) User defined device operations
	Operations []*DeviceOperation `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
	// (optional) User defined device metrics
	Metrics []*DeviceMetric `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *DeviceEnsureCmd) Reset()      { *m = DeviceEnsureCmd{} }
func (*DeviceEnsureCmd) ProtoMessage() {}
func (*DeviceEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{2}
}
func (m *DeviceEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceEnsureCmd.Merge(m, src)
}
func (m *DeviceEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceEnsureCmd proto.InternalMessageInfo

func (m *DeviceEnsureCmd) GetKind() DeviceType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_DEVICE_TYPE
}

func (m *DeviceEnsureCmd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceEnsureCmd) GetConnector() *Connectivity {
	if m != nil {
		return m.Connector
	}
	return nil
}

func (m *DeviceEnsureCmd) GetOperations() []*DeviceOperation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *DeviceEnsureCmd) GetMetrics() []*DeviceMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type DeviceListCmd struct {
	DeviceNames []string `protobuf:"bytes,1,rep,name=device_names,json=deviceNames,proto3" json:"device_names,omitempty"`
}

func (m *DeviceListCmd) Reset()      { *m = DeviceListCmd{} }
func (*DeviceListCmd) ProtoMessage() {}
func (*DeviceListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{3}
}
func (m *DeviceListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceListCmd.Merge(m, src)
}
func (m *DeviceListCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceListCmd proto.InternalMessageInfo

func (m *DeviceListCmd) GetDeviceNames() []string {
	if m != nil {
		return m.DeviceNames
	}
	return nil
}

type DeviceDeleteCmd struct {
	// delete normal devices or metrics reporters
	DeviceNames []string `protobuf:"bytes,1,rep,name=device_names,json=deviceNames,proto3" json:"device_names,omitempty"`
}

func (m *DeviceDeleteCmd) Reset()      { *m = DeviceDeleteCmd{} }
func (*DeviceDeleteCmd) ProtoMessage() {}
func (*DeviceDeleteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{4}
}
func (m *DeviceDeleteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceDeleteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceDeleteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceDeleteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceDeleteCmd.Merge(m, src)
}
func (m *DeviceDeleteCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceDeleteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceDeleteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceDeleteCmd proto.InternalMessageInfo

func (m *DeviceDeleteCmd) GetDeviceNames() []string {
	if m != nil {
		return m.DeviceNames
	}
	return nil
}

type DeviceOperateCmd struct {
	// (required) device id of a normal device
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// (required) identifier of this operation
	OperationId string `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// (optional) extra data for this operation
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DeviceOperateCmd) Reset()      { *m = DeviceOperateCmd{} }
func (*DeviceOperateCmd) ProtoMessage() {}
func (*DeviceOperateCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{5}
}
func (m *DeviceOperateCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperateCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperateCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperateCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperateCmd.Merge(m, src)
}
func (m *DeviceOperateCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperateCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperateCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperateCmd proto.InternalMessageInfo

func (m *DeviceOperateCmd) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DeviceOperateCmd) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *DeviceOperateCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeviceMetricsCollectCmd struct {
	DeviceNames []string `protobuf:"bytes,2,rep,name=device_names,json=deviceNames,proto3" json:"device_names,omitempty"`
}

func (m *DeviceMetricsCollectCmd) Reset()      { *m = DeviceMetricsCollectCmd{} }
func (*DeviceMetricsCollectCmd) ProtoMessage() {}
func (*DeviceMetricsCollectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e38e886ce453fd3, []int{6}
}
func (m *DeviceMetricsCollectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetricsCollectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetricsCollectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetricsCollectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetricsCollectCmd.Merge(m, src)
}
func (m *DeviceMetricsCollectCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetricsCollectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetricsCollectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetricsCollectCmd proto.InternalMessageInfo

func (m *DeviceMetricsCollectCmd) GetDeviceNames() []string {
	if m != nil {
		return m.DeviceNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.DeviceMetric_ReportMethod", DeviceMetric_ReportMethod_name, DeviceMetric_ReportMethod_value)
	proto.RegisterEnum("aranya.DeviceMetric_ValueType", DeviceMetric_ValueType_name, DeviceMetric_ValueType_value)
	proto.RegisterType((*DeviceOperation)(nil), "aranya.DeviceOperation")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceOperation.ParamsEntry")
	proto.RegisterType((*DeviceMetric)(nil), "aranya.DeviceMetric")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetric.DeviceParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "aranya.DeviceMetric.ReporterParamsEntry")
	proto.RegisterType((*DeviceEnsureCmd)(nil), "aranya.DeviceEnsureCmd")
	proto.RegisterType((*DeviceListCmd)(nil), "aranya.DeviceListCmd")
	proto.RegisterType((*DeviceDeleteCmd)(nil), "aranya.DeviceDeleteCmd")
	proto.RegisterType((*DeviceOperateCmd)(nil), "aranya.DeviceOperateCmd")
	proto.RegisterType((*DeviceMetricsCollectCmd)(nil), "aranya.DeviceMetricsCollectCmd")
}

func init() { proto.RegisterFile("cmd_device.proto", fileDescriptor_9e38e886ce453fd3) }

var fileDescriptor_9e38e886ce453fd3 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0xb6, 0x9d, 0x8f, 0x57, 0x99, 0x04, 0xf0, 0xbb, 0x2f, 0x12, 0x51, 0xf4, 0x76, 0x4b, 0x8c,
	0x84, 0xb8, 0x34, 0x95, 0xd2, 0x4a, 0xfd, 0x56, 0x95, 0x3a, 0x2e, 0x44, 0x0d, 0x0e, 0x35, 0x0e,
	0x88, 0x5e, 0x2c, 0x13, 0xaf, 0x8a, 0x4b, 0x62, 0x47, 0x6b, 0x13, 0x29, 0xb7, 0xfe, 0x84, 0xfe,
	0x8c, 0x1e, 0xfa, 0x43, 0x7a, 0x44, 0x3d, 0x71, 0x2c, 0xe1, 0x52, 0xf5, 0xc4, 0x4f, 0xa8, 0xbc,
	0xb6, 0xc3, 0xd2, 0x84, 0xaa, 0x9c, 0xec, 0x7d, 0xf6, 0x99, 0x99, 0x9d, 0x99, 0x67, 0x06, 0xe4,
	0xde, 0xc0, 0xb1, 0x1c, 0x32, 0x72, 0x7b, 0xa4, 0x36, 0xa4, 0x7e, 0xe8, 0xa3, 0xbc, 0x4d, 0x6d,
	0x6f, 0x6c, 0x57, 0x4a, 0x3c, 0x5a, 0x41, 0x3d, 0xdf, 0xf3, 0x48, 0x2f, 0x74, 0x47, 0x6e, 0x38,
	0x8e, 0x31, 0xe5, 0x8b, 0x08, 0x4b, 0x4d, 0x46, 0xea, 0x0c, 0x09, 0xb5, 0x43, 0xd7, 0xf7, 0x50,
	0x15, 0x4a, 0x7e, 0x7a, 0xb0, 0x5c, 0xa7, 0x2c, 0xae, 0x8a, 0x1b, 0x05, 0xa3, 0x38, 0xc5, 0x5a,
	0x0e, 0x7a, 0x06, 0xf9, 0xa1, 0x4d, 0xed, 0x41, 0x50, 0x96, 0x56, 0x33, 0x1b, 0xc5, 0xfa, 0x5a,
	0x2d, 0x8e, 0x58, 0xfb, 0xcd, 0x57, 0x6d, 0x87, 0xb1, 0x34, 0x2f, 0xa4, 0x63, 0x23, 0x31, 0xa9,
	0x3c, 0x81, 0x22, 0x07, 0x23, 0x19, 0x32, 0xc7, 0x64, 0x9c, 0x44, 0x89, 0x7e, 0xd1, 0x32, 0xe4,
	0x46, 0x76, 0xff, 0x84, 0x94, 0x25, 0x86, 0xc5, 0x87, 0xa7, 0xd2, 0x63, 0x51, 0xf9, 0x96, 0x83,
	0x52, 0x1c, 0x62, 0x9b, 0x84, 0xd4, 0xed, 0x21, 0x04, 0x59, 0xcf, 0x1e, 0x90, 0xc4, 0x9a, 0xfd,
	0xa3, 0xd7, 0xb0, 0x40, 0xc9, 0xd0, 0xa7, 0xa1, 0x35, 0x20, 0xe1, 0x91, 0xef, 0x30, 0x37, 0x8b,
	0xf5, 0xea, 0xf5, 0x37, 0xc6, 0x0e, 0x6a, 0x06, 0x63, 0x6e, 0x33, 0xa2, 0x51, 0xa2, 0xdc, 0x09,
	0xbd, 0x00, 0x60, 0x91, 0xad, 0x70, 0x3c, 0x24, 0xe5, 0x0c, 0x73, 0x82, 0xe7, 0x3a, 0xd9, 0x8b,
	0x68, 0xe6, 0x78, 0x48, 0x8c, 0xc2, 0x28, 0xfd, 0x45, 0x6f, 0x60, 0x21, 0x2e, 0xbf, 0x95, 0x94,
	0x2a, 0xcb, 0x4a, 0xb5, 0x3e, 0xd7, 0x43, 0x7c, 0xe0, 0xab, 0x95, 0xf4, 0x2e, 0x86, 0xd0, 0x5a,
	0x9a, 0x13, 0xa1, 0x16, 0x4b, 0x38, 0xc7, 0x12, 0x2e, 0xa5, 0xa0, 0x1e, 0x25, 0xfe, 0x16, 0x96,
	0xa6, 0xa4, 0x24, 0x66, 0x9e, 0xc5, 0xdc, 0xf8, 0x43, 0xea, 0x84, 0xf2, 0x51, 0x17, 0xe9, 0x35,
	0xb0, 0xf2, 0x12, 0xfe, 0x9d, 0x79, 0xda, 0x6d, 0x3a, 0x56, 0x69, 0xc0, 0x7f, 0x73, 0xe2, 0xdc,
	0xaa, 0xe9, 0x01, 0x94, 0xf8, 0x2e, 0xa1, 0xff, 0xa1, 0x6c, 0x68, 0x3b, 0x1d, 0xc3, 0xb4, 0xf6,
	0x5b, 0xe6, 0x96, 0xa5, 0x77, 0x9a, 0x9a, 0xb5, 0xad, 0x99, 0x46, 0x4b, 0xdd, 0x95, 0x05, 0xa4,
	0x00, 0xe6, 0x6f, 0x1b, 0xc6, 0x56, 0xc3, 0xb4, 0xd4, 0x8e, 0xae, 0x6b, 0xaa, 0xd9, 0xda, 0x6b,
	0x99, 0x07, 0xb2, 0x88, 0xaa, 0x70, 0x87, 0xe7, 0xec, 0x9a, 0x0d, 0xbd, 0xd9, 0x68, 0x77, 0x74,
	0xcd, 0x52, 0xdb, 0x2d, 0x4d, 0x37, 0x65, 0x49, 0x71, 0xa1, 0x30, 0xed, 0x2a, 0xc2, 0x50, 0x49,
	0x02, 0x58, 0x7b, 0x8d, 0x76, 0x57, 0xb3, 0xcc, 0x83, 0x1d, 0xcd, 0xea, 0xea, 0xd1, 0xa7, 0x29,
	0x0b, 0x37, 0xdc, 0xab, 0x9d, 0xae, 0x6e, 0x6a, 0x86, 0x2c, 0x46, 0x2f, 0x9e, 0x73, 0xbf, 0xd9,
	0xe8, 0x6e, 0x6a, 0xb2, 0xa4, 0xfc, 0x9c, 0xce, 0xa0, 0xe6, 0x05, 0x27, 0x94, 0xa8, 0x03, 0x07,
	0xad, 0x43, 0xf6, 0xd8, 0xf5, 0xe2, 0xd9, 0x5b, 0xac, 0xa3, 0xeb, 0xfd, 0x63, 0x4a, 0x63, 0xf7,
	0x53, 0xfd, 0x4b, 0x9c, 0xfe, 0xeb, 0x50, 0x48, 0x26, 0xdd, 0xa7, 0x4c, 0xb6, 0xc5, 0xfa, 0x72,
	0xea, 0x40, 0xe5, 0x56, 0x80, 0x71, 0x45, 0x43, 0x8f, 0x00, 0xa6, 0xf3, 0x9d, 0x2a, 0x75, 0xe5,
	0x86, 0xa1, 0x36, 0x38, 0x2a, 0xaa, 0xc1, 0x3f, 0x03, 0x26, 0xa7, 0xa0, 0x9c, 0x63, 0x56, 0xcb,
	0xf3, 0xb4, 0x66, 0xa4, 0x24, 0xa5, 0x0e, 0x0b, 0xf1, 0x45, 0xdb, 0x0d, 0xc2, 0x28, 0xd3, 0x2a,
	0x24, 0x4a, 0x67, 0xba, 0x0e, 0xca, 0xe2, 0x6a, 0x26, 0xda, 0x36, 0x31, 0x16, 0xc9, 0x3a, 0x50,
	0x1e, 0xa6, 0xf5, 0x69, 0x92, 0x3e, 0x09, 0xc9, 0x5f, 0x5a, 0x7d, 0x00, 0x99, 0x7f, 0x38, 0x33,
	0xbb, 0x0b, 0x45, 0xce, 0x2c, 0x91, 0x1f, 0x5c, 0x59, 0xcd, 0xec, 0x3e, 0x69, 0x76, 0xf7, 0x21,
	0xc8, 0x3a, 0x76, 0x68, 0xb3, 0xca, 0x96, 0x0c, 0xf6, 0xaf, 0x3c, 0x87, 0x15, 0x3e, 0xdd, 0x40,
	0xf5, 0xfb, 0x7d, 0xd2, 0x9b, 0x9b, 0x9f, 0x34, 0xf3, 0xd2, 0x57, 0xfb, 0xa7, 0xe7, 0x58, 0x38,
	0x3b, 0xc7, 0xc2, 0xe5, 0x39, 0x16, 0x3f, 0x4e, 0xb0, 0xf8, 0x79, 0x82, 0xc5, 0xaf, 0x13, 0x2c,
	0x9e, 0x4e, 0xb0, 0xf8, 0x7d, 0x82, 0xc5, 0x1f, 0x13, 0x2c, 0x5c, 0x4e, 0xb0, 0xf8, 0xe9, 0x02,
	0x0b, 0xa7, 0x17, 0x58, 0x38, 0xbb, 0xc0, 0xc2, 0xbb, 0xaa, 0x4d, 0x8f, 0xec, 0xb0, 0xe6, 0x90,
	0xd1, 0xfd, 0xb8, 0xe2, 0xf7, 0xd8, 0x4a, 0x4f, 0x0e, 0xef, 0xfd, 0xe1, 0xe1, 0x61, 0x9e, 0x21,
	0x0f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xb0, 0xf3, 0x6d, 0x22, 0x06, 0x00, 0x00,
}

func (x DeviceMetric_ReportMethod) String() string {
	s, ok := DeviceMetric_ReportMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceMetric_ValueType) String() string {
	s, ok := DeviceMetric_ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeviceOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperation)
	if !ok {
		that2, ok := that.(DeviceOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperationId != that1.OperationId {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	return true
}
func (this *DeviceMetric) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetric)
	if !ok {
		that2, ok := that.(DeviceMetric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ReportMethod != that1.ReportMethod {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if len(this.DeviceParams) != len(that1.DeviceParams) {
		return false
	}
	for i := range this.DeviceParams {
		if this.DeviceParams[i] != that1.DeviceParams[i] {
			return false
		}
	}
	if this.ReporterName != that1.ReporterName {
		return false
	}
	if len(this.ReporterParams) != len(that1.ReporterParams) {
		return false
	}
	for i := range this.ReporterParams {
		if this.ReporterParams[i] != that1.ReporterParams[i] {
			return false
		}
	}
	return true
}
func (this *DeviceEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceEnsureCmd)
	if !ok {
		that2, ok := that.(DeviceEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Connector.Equal(that1.Connector) {
		return false
	}
	if len(this.Operations) != len(that1.Operations) {
		return false
	}
	for i := range this.Operations {
		if !this.Operations[i].Equal(that1.Operations[i]) {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceListCmd)
	if !ok {
		that2, ok := that.(DeviceListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceNames) != len(that1.DeviceNames) {
		return false
	}
	for i := range this.DeviceNames {
		if this.DeviceNames[i] != that1.DeviceNames[i] {
			return false
		}
	}
	return true
}
func (this *DeviceDeleteCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceDeleteCmd)
	if !ok {
		that2, ok := that.(DeviceDeleteCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceNames) != len(that1.DeviceNames) {
		return false
	}
	for i := range this.DeviceNames {
		if this.DeviceNames[i] != that1.DeviceNames[i] {
			return false
		}
	}
	return true
}
func (this *DeviceOperateCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperateCmd)
	if !ok {
		that2, ok := that.(DeviceOperateCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceName != that1.DeviceName {
		return false
	}
	if this.OperationId != that1.OperationId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *DeviceMetricsCollectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetricsCollectCmd)
	if !ok {
		that2, ok := that.(DeviceMetricsCollectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceNames) != len(that1.DeviceNames) {
		return false
	}
	for i := range this.DeviceNames {
		if this.DeviceNames[i] != that1.DeviceNames[i] {
			return false
		}
	}
	return true
}
func (this *DeviceOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.DeviceOperation{")
	s = append(s, "OperationId: "+fmt.Sprintf("%#v", this.OperationId)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetric) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aranyagopb.DeviceMetric{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ReportMethod: "+fmt.Sprintf("%#v", this.ReportMethod)+",\n")
	s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	keysForDeviceParams := make([]string, 0, len(this.DeviceParams))
	for k, _ := range this.DeviceParams {
		keysForDeviceParams = append(keysForDeviceParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeviceParams)
	mapStringForDeviceParams := "map[string]string{"
	for _, k := range keysForDeviceParams {
		mapStringForDeviceParams += fmt.Sprintf("%#v: %#v,", k, this.DeviceParams[k])
	}
	mapStringForDeviceParams += "}"
	if this.DeviceParams != nil {
		s = append(s, "DeviceParams: "+mapStringForDeviceParams+",\n")
	}
	s = append(s, "ReporterName: "+fmt.Sprintf("%#v", this.ReporterName)+",\n")
	keysForReporterParams := make([]string, 0, len(this.ReporterParams))
	for k, _ := range this.ReporterParams {
		keysForReporterParams = append(keysForReporterParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReporterParams)
	mapStringForReporterParams := "map[string]string{"
	for _, k := range keysForReporterParams {
		mapStringForReporterParams += fmt.Sprintf("%#v: %#v,", k, this.ReporterParams[k])
	}
	mapStringForReporterParams += "}"
	if this.ReporterParams != nil {
		s = append(s, "ReporterParams: "+mapStringForReporterParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.DeviceEnsureCmd{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Connector != nil {
		s = append(s, "Connector: "+fmt.Sprintf("%#v", this.Connector)+",\n")
	}
	if this.Operations != nil {
		s = append(s, "Operations: "+fmt.Sprintf("%#v", this.Operations)+",\n")
	}
	if this.Metrics != nil {
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceListCmd{")
	s = append(s, "DeviceNames: "+fmt.Sprintf("%#v", this.DeviceNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceDeleteCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceDeleteCmd{")
	s = append(s, "DeviceNames: "+fmt.Sprintf("%#v", this.DeviceNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceOperateCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.DeviceOperateCmd{")
	s = append(s, "DeviceName: "+fmt.Sprintf("%#v", this.DeviceName)+",\n")
	s = append(s, "OperationId: "+fmt.Sprintf("%#v", this.OperationId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetricsCollectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.DeviceMetricsCollectCmd{")
	s = append(s, "DeviceNames: "+fmt.Sprintf("%#v", this.DeviceNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeviceOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReporterParams) > 0 {
		for k := range m.ReporterParams {
			v := m.ReporterParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ReporterName) > 0 {
		i -= len(m.ReporterName)
		copy(dAtA[i:], m.ReporterName)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.ReporterName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceParams) > 0 {
		for k := range m.DeviceParams {
			v := m.DeviceParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ValueType != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReportMethod != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.ReportMethod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmdDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Connector != nil {
		{
			size, err := m.Connector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintCmdDevice(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for iNdEx := len(m.DeviceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceNames[iNdEx])
			copy(dAtA[i:], m.DeviceNames[iNdEx])
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceDeleteCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceDeleteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceDeleteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for iNdEx := len(m.DeviceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceNames[iNdEx])
			copy(dAtA[i:], m.DeviceNames[iNdEx])
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceOperateCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperateCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperateCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetricsCollectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetricsCollectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetricsCollectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for iNdEx := len(m.DeviceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceNames[iNdEx])
			copy(dAtA[i:], m.DeviceNames[iNdEx])
			i = encodeVarintCmdDevice(dAtA, i, uint64(len(m.DeviceNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.ReportMethod != 0 {
		n += 1 + sovCmdDevice(uint64(m.ReportMethod))
	}
	if m.ValueType != 0 {
		n += 1 + sovCmdDevice(uint64(m.ValueType))
	}
	if len(m.DeviceParams) > 0 {
		for k, v := range m.DeviceParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	l = len(m.ReporterName)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.ReporterParams) > 0 {
		for k, v := range m.ReporterParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdDevice(uint64(len(k))) + 1 + len(v) + sovCmdDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovCmdDevice(uint64(m.Kind))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if m.Connector != nil {
		l = m.Connector.Size()
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for _, s := range m.DeviceNames {
			l = len(s)
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceDeleteCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for _, s := range m.DeviceNames {
			l = len(s)
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceOperateCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdDevice(uint64(l))
	}
	return n
}

func (m *DeviceMetricsCollectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceNames) > 0 {
		for _, s := range m.DeviceNames {
			l = len(s)
			n += 1 + l + sovCmdDevice(uint64(l))
		}
	}
	return n
}

func sovCmdDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdDevice(x uint64) (n int) {
	return sovCmdDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceOperation) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceOperation{`,
		`OperationId:` + fmt.Sprintf("%v", this.OperationId) + `,`,
		`Params:` + mapStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetric) String() string {
	if this == nil {
		return "nil"
	}
	keysForDeviceParams := make([]string, 0, len(this.DeviceParams))
	for k, _ := range this.DeviceParams {
		keysForDeviceParams = append(keysForDeviceParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeviceParams)
	mapStringForDeviceParams := "map[string]string{"
	for _, k := range keysForDeviceParams {
		mapStringForDeviceParams += fmt.Sprintf("%v: %v,", k, this.DeviceParams[k])
	}
	mapStringForDeviceParams += "}"
	keysForReporterParams := make([]string, 0, len(this.ReporterParams))
	for k, _ := range this.ReporterParams {
		keysForReporterParams = append(keysForReporterParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReporterParams)
	mapStringForReporterParams := "map[string]string{"
	for _, k := range keysForReporterParams {
		mapStringForReporterParams += fmt.Sprintf("%v: %v,", k, this.ReporterParams[k])
	}
	mapStringForReporterParams += "}"
	s := strings.Join([]string{`&DeviceMetric{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ReportMethod:` + fmt.Sprintf("%v", this.ReportMethod) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`DeviceParams:` + mapStringForDeviceParams + `,`,
		`ReporterName:` + fmt.Sprintf("%v", this.ReporterName) + `,`,
		`ReporterParams:` + mapStringForReporterParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOperations := "[]*DeviceOperation{"
	for _, f := range this.Operations {
		repeatedStringForOperations += strings.Replace(f.String(), "DeviceOperation", "DeviceOperation", 1) + ","
	}
	repeatedStringForOperations += "}"
	repeatedStringForMetrics := "[]*DeviceMetric{"
	for _, f := range this.Metrics {
		repeatedStringForMetrics += strings.Replace(f.String(), "DeviceMetric", "DeviceMetric", 1) + ","
	}
	repeatedStringForMetrics += "}"
	s := strings.Join([]string{`&DeviceEnsureCmd{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Connector:` + strings.Replace(fmt.Sprintf("%v", this.Connector), "Connectivity", "Connectivity", 1) + `,`,
		`Operations:` + repeatedStringForOperations + `,`,
		`Metrics:` + repeatedStringForMetrics + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceListCmd{`,
		`DeviceNames:` + fmt.Sprintf("%v", this.DeviceNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceDeleteCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceDeleteCmd{`,
		`DeviceNames:` + fmt.Sprintf("%v", this.DeviceNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceOperateCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceOperateCmd{`,
		`DeviceName:` + fmt.Sprintf("%v", this.DeviceName) + `,`,
		`OperationId:` + fmt.Sprintf("%v", this.OperationId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetricsCollectCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceMetricsCollectCmd{`,
		`DeviceNames:` + fmt.Sprintf("%v", this.DeviceNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMethod", wireType)
			}
			m.ReportMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportMethod |= DeviceMetric_ReportMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= DeviceMetric_ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceParams == nil {
				m.DeviceParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DeviceParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReporterParams == nil {
				m.ReporterParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReporterParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connector == nil {
				m.Connector = &Connectivity{}
			}
			if err := m.Connector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &DeviceOperation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &DeviceMetric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceNames = append(m.DeviceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceDeleteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceDeleteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceDeleteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceNames = append(m.DeviceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceOperateCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperateCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperateCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetricsCollectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetricsCollectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetricsCollectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceNames = append(m.DeviceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdDevice = fmt.Errorf("proto: unexpected end of group")
)
