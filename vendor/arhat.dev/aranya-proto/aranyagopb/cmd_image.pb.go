// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_image.proto

// +build !rt_none

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImagePullPolicy int32

const (
	IMAGE_PULL_ALWAYS         ImagePullPolicy = 0
	IMAGE_PULL_IF_NOT_PRESENT ImagePullPolicy = 1
	IMAGE_PULL_NEVER          ImagePullPolicy = 2
)

var ImagePullPolicy_name = map[int32]string{
	0: "IMAGE_PULL_ALWAYS",
	1: "IMAGE_PULL_IF_NOT_PRESENT",
	2: "IMAGE_PULL_NEVER",
}

var ImagePullPolicy_value = map[string]int32{
	"IMAGE_PULL_ALWAYS":         0,
	"IMAGE_PULL_IF_NOT_PRESENT": 1,
	"IMAGE_PULL_NEVER":          2,
}

func (ImagePullPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77110c70c5d5af8f, []int{0}
}

type ImageAuthConfig struct {
	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Auth          string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	ServerAddress string `protobuf:"bytes,4,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// IdentityToken is used to authenticate the user and get
	// an access token for the registry.
	IdentityToken string `protobuf:"bytes,5,opt,name=identity_token,json=identityToken,proto3" json:"identity_token,omitempty"`
	// RegistryToken is a bearer token to be sent to a registry
	RegistryToken string `protobuf:"bytes,6,opt,name=registry_token,json=registryToken,proto3" json:"registry_token,omitempty"`
	Email         string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *ImageAuthConfig) Reset()      { *m = ImageAuthConfig{} }
func (*ImageAuthConfig) ProtoMessage() {}
func (*ImageAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_77110c70c5d5af8f, []int{0}
}
func (m *ImageAuthConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageAuthConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageAuthConfig.Merge(m, src)
}
func (m *ImageAuthConfig) XXX_Size() int {
	return m.Size()
}
func (m *ImageAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ImageAuthConfig proto.InternalMessageInfo

func (m *ImageAuthConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ImageAuthConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ImageAuthConfig) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *ImageAuthConfig) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *ImageAuthConfig) GetIdentityToken() string {
	if m != nil {
		return m.IdentityToken
	}
	return ""
}

func (m *ImageAuthConfig) GetRegistryToken() string {
	if m != nil {
		return m.RegistryToken
	}
	return ""
}

func (m *ImageAuthConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ImagePullSpec struct {
	// image pull secrets
	AuthConfig *ImageAuthConfig `protobuf:"bytes,1,opt,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty"`
	// pull policy
	PullPolicy ImagePullPolicy `protobuf:"varint,2,opt,name=pull_policy,json=pullPolicy,proto3,enum=aranya.ImagePullPolicy" json:"pull_policy,omitempty"`
}

func (m *ImagePullSpec) Reset()      { *m = ImagePullSpec{} }
func (*ImagePullSpec) ProtoMessage() {}
func (*ImagePullSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77110c70c5d5af8f, []int{1}
}
func (m *ImagePullSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePullSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImagePullSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImagePullSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePullSpec.Merge(m, src)
}
func (m *ImagePullSpec) XXX_Size() int {
	return m.Size()
}
func (m *ImagePullSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePullSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePullSpec proto.InternalMessageInfo

func (m *ImagePullSpec) GetAuthConfig() *ImageAuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *ImagePullSpec) GetPullPolicy() ImagePullPolicy {
	if m != nil {
		return m.PullPolicy
	}
	return IMAGE_PULL_ALWAYS
}

type ImageEnsureCmd struct {
	// key: image name
	// value: pull config
	Images map[string]*ImagePullSpec `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ImageEnsureCmd) Reset()      { *m = ImageEnsureCmd{} }
func (*ImageEnsureCmd) ProtoMessage() {}
func (*ImageEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_77110c70c5d5af8f, []int{2}
}
func (m *ImageEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageEnsureCmd.Merge(m, src)
}
func (m *ImageEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *ImageEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ImageEnsureCmd proto.InternalMessageInfo

func (m *ImageEnsureCmd) GetImages() map[string]*ImagePullSpec {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.ImagePullPolicy", ImagePullPolicy_name, ImagePullPolicy_value)
	proto.RegisterType((*ImageAuthConfig)(nil), "aranya.ImageAuthConfig")
	proto.RegisterType((*ImagePullSpec)(nil), "aranya.ImagePullSpec")
	proto.RegisterType((*ImageEnsureCmd)(nil), "aranya.ImageEnsureCmd")
	proto.RegisterMapType((map[string]*ImagePullSpec)(nil), "aranya.ImageEnsureCmd.ImagesEntry")
}

func init() { proto.RegisterFile("cmd_image.proto", fileDescriptor_77110c70c5d5af8f) }

var fileDescriptor_77110c70c5d5af8f = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x49, 0x13, 0x60, 0xac, 0xa6, 0x61, 0xd5, 0x0a, 0x53, 0x89, 0x55, 0x89, 0x84,
	0x54, 0x81, 0x08, 0x52, 0xb8, 0x44, 0xbd, 0x99, 0xca, 0xa0, 0x48, 0x21, 0x58, 0x4e, 0xa0, 0x02,
	0x09, 0x59, 0xdb, 0x78, 0x49, 0xac, 0xfa, 0x9f, 0x76, 0xed, 0x20, 0xdf, 0x90, 0x78, 0x01, 0x9e,
	0x80, 0x33, 0x8f, 0xc2, 0x31, 0xc7, 0x1e, 0x89, 0x73, 0xe9, 0xb1, 0x8f, 0x80, 0xbc, 0x9b, 0xa4,
	0xa1, 0xdc, 0x66, 0x7e, 0xdf, 0xb7, 0xf6, 0xcc, 0xb7, 0x0b, 0x7b, 0xe3, 0xd0, 0x73, 0xfd, 0x90,
	0x4e, 0x58, 0x3b, 0xe1, 0x71, 0x1a, 0xe3, 0x3a, 0xe5, 0x34, 0xca, 0x69, 0xeb, 0x0a, 0xc1, 0x5e,
	0xaf, 0xe4, 0x66, 0x96, 0x4e, 0x4f, 0xe3, 0xe8, 0x8b, 0x3f, 0xc1, 0x87, 0x70, 0x37, 0x13, 0x8c,
	0x47, 0x34, 0x64, 0x06, 0x3a, 0x42, 0xc7, 0xf7, 0x9c, 0x4d, 0x5f, 0x6a, 0x09, 0x15, 0xe2, 0x6b,
	0xcc, 0x3d, 0xa3, 0xa2, 0xb4, 0x75, 0x8f, 0x31, 0xec, 0xd0, 0x2c, 0x9d, 0x1a, 0x55, 0xc9, 0x65,
	0x8d, 0x9f, 0x40, 0x43, 0x30, 0x3e, 0x63, 0xdc, 0xa5, 0x9e, 0xc7, 0x99, 0x10, 0xc6, 0x8e, 0x54,
	0x77, 0x15, 0x35, 0x15, 0x2c, 0x6d, 0xbe, 0xc7, 0xa2, 0xd4, 0x4f, 0x73, 0x37, 0x8d, 0x2f, 0x58,
	0x64, 0xd4, 0x94, 0x6d, 0x4d, 0x47, 0x25, 0x2c, 0x6d, 0x9c, 0x4d, 0x7c, 0x91, 0xf2, 0xb5, 0xad,
	0xae, 0x6c, 0x6b, 0xaa, 0x6c, 0xfb, 0x50, 0x63, 0x21, 0xf5, 0x03, 0xe3, 0x8e, 0x54, 0x55, 0xd3,
	0xfa, 0x8e, 0x60, 0x57, 0xae, 0x6a, 0x67, 0x41, 0x30, 0x4c, 0xd8, 0x18, 0x77, 0x41, 0x2f, 0x87,
	0x74, 0xc7, 0x72, 0x6f, 0xb9, 0xab, 0xde, 0x79, 0xd0, 0x56, 0xd1, 0xb4, 0x6f, 0xc5, 0xe2, 0x00,
	0xbd, 0x89, 0xa8, 0x0b, 0x7a, 0x92, 0x05, 0x81, 0x9b, 0xc4, 0x81, 0x3f, 0xce, 0x65, 0x12, 0x8d,
	0x5b, 0x27, 0xcb, 0xbf, 0xd8, 0x52, 0x76, 0x20, 0xd9, 0xd4, 0xad, 0x9f, 0x08, 0x1a, 0x52, 0xb7,
	0x22, 0x91, 0x71, 0x76, 0x1a, 0x7a, 0xf8, 0x04, 0xea, 0xf2, 0x6a, 0x84, 0x81, 0x8e, 0xaa, 0xc7,
	0x7a, 0xa7, 0xf5, 0xcf, 0x77, 0x36, 0x3e, 0xd5, 0x0a, 0x2b, 0x4a, 0x79, 0xee, 0xac, 0x4e, 0x1c,
	0xda, 0xa0, 0x6f, 0x61, 0xdc, 0x84, 0xea, 0x05, 0xcb, 0x57, 0xb7, 0x56, 0x96, 0xf8, 0x19, 0xd4,
	0x66, 0x34, 0xc8, 0x98, 0x9c, 0x51, 0xef, 0x1c, 0xfc, 0x37, 0x63, 0x99, 0x84, 0xa3, 0x3c, 0x27,
	0x95, 0x2e, 0x7a, 0xfa, 0x79, 0xf5, 0x20, 0x6e, 0xe6, 0xc7, 0x07, 0x70, 0xbf, 0xf7, 0xd6, 0x7c,
	0x63, 0xb9, 0xf6, 0xfb, 0x7e, 0xdf, 0x35, 0xfb, 0x67, 0xe6, 0xc7, 0x61, 0x53, 0xc3, 0x8f, 0xe0,
	0xe1, 0x16, 0xee, 0xbd, 0x76, 0x07, 0xef, 0x46, 0xae, 0xed, 0x58, 0x43, 0x6b, 0x30, 0x6a, 0x22,
	0xbc, 0x0f, 0xcd, 0x2d, 0x79, 0x60, 0x7d, 0xb0, 0x9c, 0x66, 0xe5, 0xd5, 0xd9, 0x7c, 0x41, 0xb4,
	0xcb, 0x05, 0xd1, 0xae, 0x17, 0x04, 0x7d, 0x2b, 0x08, 0xfa, 0x55, 0x10, 0xf4, 0xbb, 0x20, 0x68,
	0x5e, 0x10, 0xf4, 0xa7, 0x20, 0xe8, 0xaa, 0x20, 0xda, 0x75, 0x41, 0xd0, 0x8f, 0x25, 0xd1, 0xe6,
	0x4b, 0xa2, 0x5d, 0x2e, 0x89, 0xf6, 0xe9, 0x31, 0xe5, 0x53, 0x9a, 0xb6, 0x3d, 0x36, 0x7b, 0xa1,
	0xe6, 0x7f, 0x2e, 0x9f, 0xf1, 0xaa, 0x99, 0xc4, 0xc9, 0xf9, 0x79, 0x5d, 0x92, 0x97, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x8b, 0x19, 0xf2, 0xe0, 0xeb, 0x02, 0x00, 0x00,
}

func (x ImagePullPolicy) String() string {
	s, ok := ImagePullPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ImageAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageAuthConfig)
	if !ok {
		that2, ok := that.(ImageAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Auth != that1.Auth {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.IdentityToken != that1.IdentityToken {
		return false
	}
	if this.RegistryToken != that1.RegistryToken {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *ImagePullSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImagePullSpec)
	if !ok {
		that2, ok := that.(ImagePullSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if this.PullPolicy != that1.PullPolicy {
		return false
	}
	return true
}
func (this *ImageEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageEnsureCmd)
	if !ok {
		that2, ok := that.(ImageEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	return true
}
func (this *ImageAuthConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&aranyagopb.ImageAuthConfig{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Auth: "+fmt.Sprintf("%#v", this.Auth)+",\n")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "IdentityToken: "+fmt.Sprintf("%#v", this.IdentityToken)+",\n")
	s = append(s, "RegistryToken: "+fmt.Sprintf("%#v", this.RegistryToken)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImagePullSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.ImagePullSpec{")
	if this.AuthConfig != nil {
		s = append(s, "AuthConfig: "+fmt.Sprintf("%#v", this.AuthConfig)+",\n")
	}
	s = append(s, "PullPolicy: "+fmt.Sprintf("%#v", this.PullPolicy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.ImageEnsureCmd{")
	keysForImages := make([]string, 0, len(this.Images))
	for k, _ := range this.Images {
		keysForImages = append(keysForImages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForImages)
	mapStringForImages := "map[string]*ImagePullSpec{"
	for _, k := range keysForImages {
		mapStringForImages += fmt.Sprintf("%#v: %#v,", k, this.Images[k])
	}
	mapStringForImages += "}"
	if this.Images != nil {
		s = append(s, "Images: "+mapStringForImages+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdImage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageAuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageAuthConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageAuthConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RegistryToken) > 0 {
		i -= len(m.RegistryToken)
		copy(dAtA[i:], m.RegistryToken)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.RegistryToken)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IdentityToken) > 0 {
		i -= len(m.IdentityToken)
		copy(dAtA[i:], m.IdentityToken)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.IdentityToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerAddress) > 0 {
		i -= len(m.ServerAddress)
		copy(dAtA[i:], m.ServerAddress)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.ServerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Auth) > 0 {
		i -= len(m.Auth)
		copy(dAtA[i:], m.Auth)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.Auth)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCmdImage(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImagePullSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePullSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePullSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PullPolicy != 0 {
		i = encodeVarintCmdImage(dAtA, i, uint64(m.PullPolicy))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthConfig != nil {
		{
			size, err := m.AuthConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdImage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for k := range m.Images {
			v := m.Images[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCmdImage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdImage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdImage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdImage(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdImage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageAuthConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.IdentityToken)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.RegistryToken)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCmdImage(uint64(l))
	}
	return n
}

func (m *ImagePullSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthConfig != nil {
		l = m.AuthConfig.Size()
		n += 1 + l + sovCmdImage(uint64(l))
	}
	if m.PullPolicy != 0 {
		n += 1 + sovCmdImage(uint64(m.PullPolicy))
	}
	return n
}

func (m *ImageEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for k, v := range m.Images {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCmdImage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCmdImage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCmdImage(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCmdImage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdImage(x uint64) (n int) {
	return sovCmdImage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageAuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageAuthConfig{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Auth:` + fmt.Sprintf("%v", this.Auth) + `,`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`IdentityToken:` + fmt.Sprintf("%v", this.IdentityToken) + `,`,
		`RegistryToken:` + fmt.Sprintf("%v", this.RegistryToken) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePullSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePullSpec{`,
		`AuthConfig:` + strings.Replace(this.AuthConfig.String(), "ImageAuthConfig", "ImageAuthConfig", 1) + `,`,
		`PullPolicy:` + fmt.Sprintf("%v", this.PullPolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForImages := make([]string, 0, len(this.Images))
	for k, _ := range this.Images {
		keysForImages = append(keysForImages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForImages)
	mapStringForImages := "map[string]*ImagePullSpec{"
	for _, k := range keysForImages {
		mapStringForImages += fmt.Sprintf("%v: %v,", k, this.Images[k])
	}
	mapStringForImages += "}"
	s := strings.Join([]string{`&ImageEnsureCmd{`,
		`Images:` + mapStringForImages + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdImage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageAuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageAuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageAuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePullSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePullSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePullSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthConfig == nil {
				m.AuthConfig = &ImageAuthConfig{}
			}
			if err := m.AuthConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullPolicy", wireType)
			}
			m.PullPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullPolicy |= ImagePullPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Images == nil {
				m.Images = make(map[string]*ImagePullSpec)
			}
			var mapkey string
			var mapvalue *ImagePullSpec
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdImage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdImage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdImage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdImage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdImage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCmdImage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCmdImage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ImagePullSpec{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdImage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdImage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Images[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdImage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdImage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdImage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdImage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdImage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdImage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdImage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdImage = fmt.Errorf("proto: unexpected end of group")
)
