// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc/edgedevice.proto

package rpcpb

import (
	aranyagopb "arhat.dev/aranya-proto/aranyagopb"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc/edgedevice.proto", fileDescriptor_1f864b79f78bad4e) }

var fileDescriptor_1f864b79f78bad4e = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x2a, 0x48, 0xd6,
	0x4f, 0x4d, 0x49, 0x4f, 0x4d, 0x49, 0x2d, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x94, 0xe2, 0x06, 0x73, 0x21, 0x82, 0x46, 0x46,
	0x5c, 0x5c, 0xae, 0x29, 0xe9, 0xa9, 0x2e, 0x60, 0x85, 0x42, 0x2a, 0x5c, 0x2c, 0xc1, 0x95, 0x79,
	0xc9, 0x42, 0xdc, 0x7a, 0x10, 0xb5, 0x7a, 0xbe, 0xc5, 0xe9, 0x52, 0x70, 0x8e, 0x73, 0x6e, 0x8a,
	0x06, 0xa3, 0x01, 0xa3, 0x53, 0xec, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78,
	0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xf5, 0xc4,
	0xa2, 0x8c, 0xc4, 0x12, 0xbd, 0x94, 0xd4, 0x32, 0x7d, 0x88, 0x79, 0xba, 0x60, 0x17, 0x40, 0x39,
	0xe9, 0xf9, 0x05, 0x49, 0xfa, 0x45, 0x05, 0xc9, 0x05, 0x49, 0x49, 0x6c, 0x60, 0x71, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x37, 0xa3, 0x4b, 0xc6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EdgeDeviceClient is the client API for EdgeDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeDeviceClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (EdgeDevice_SyncClient, error)
}

type edgeDeviceClient struct {
	cc *grpc.ClientConn
}

func NewEdgeDeviceClient(cc *grpc.ClientConn) EdgeDeviceClient {
	return &edgeDeviceClient{cc}
}

func (c *edgeDeviceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (EdgeDevice_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EdgeDevice_serviceDesc.Streams[0], "/aranya.EdgeDevice/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeDeviceSyncClient{stream}
	return x, nil
}

type EdgeDevice_SyncClient interface {
	Send(*aranyagopb.Msg) error
	Recv() (*aranyagopb.Cmd, error)
	grpc.ClientStream
}

type edgeDeviceSyncClient struct {
	grpc.ClientStream
}

func (x *edgeDeviceSyncClient) Send(m *aranyagopb.Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edgeDeviceSyncClient) Recv() (*aranyagopb.Cmd, error) {
	m := new(aranyagopb.Cmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeDeviceServer is the server API for EdgeDevice service.
type EdgeDeviceServer interface {
	Sync(EdgeDevice_SyncServer) error
}

// UnimplementedEdgeDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeDeviceServer struct {
}

func (*UnimplementedEdgeDeviceServer) Sync(srv EdgeDevice_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterEdgeDeviceServer(s *grpc.Server, srv EdgeDeviceServer) {
	s.RegisterService(&_EdgeDevice_serviceDesc, srv)
}

func _EdgeDevice_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdgeDeviceServer).Sync(&edgeDeviceSyncServer{stream})
}

type EdgeDevice_SyncServer interface {
	Send(*aranyagopb.Cmd) error
	Recv() (*aranyagopb.Msg, error)
	grpc.ServerStream
}

type edgeDeviceSyncServer struct {
	grpc.ServerStream
}

func (x *edgeDeviceSyncServer) Send(m *aranyagopb.Cmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edgeDeviceSyncServer) Recv() (*aranyagopb.Msg, error) {
	m := new(aranyagopb.Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EdgeDevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aranya.EdgeDevice",
	HandlerType: (*EdgeDeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _EdgeDevice_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/edgedevice.proto",
}
