// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_network_container.proto

// +build !rt_none

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContainerNetworkListCmd struct {
}

func (m *ContainerNetworkListCmd) Reset()      { *m = ContainerNetworkListCmd{} }
func (*ContainerNetworkListCmd) ProtoMessage() {}
func (*ContainerNetworkListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2752a55ecae06ad0, []int{0}
}
func (m *ContainerNetworkListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerNetworkListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerNetworkListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerNetworkListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNetworkListCmd.Merge(m, src)
}
func (m *ContainerNetworkListCmd) XXX_Size() int {
	return m.Size()
}
func (m *ContainerNetworkListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNetworkListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNetworkListCmd proto.InternalMessageInfo

type ContainerNetworkEnsureCmd struct {
	Ipv4Cidr string `protobuf:"bytes,2,opt,name=ipv4_cidr,json=ipv4Cidr,proto3" json:"ipv4_cidr,omitempty"`
	Ipv6Cidr string `protobuf:"bytes,3,opt,name=ipv6_cidr,json=ipv6Cidr,proto3" json:"ipv6_cidr,omitempty"`
}

func (m *ContainerNetworkEnsureCmd) Reset()      { *m = ContainerNetworkEnsureCmd{} }
func (*ContainerNetworkEnsureCmd) ProtoMessage() {}
func (*ContainerNetworkEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2752a55ecae06ad0, []int{1}
}
func (m *ContainerNetworkEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerNetworkEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerNetworkEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerNetworkEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNetworkEnsureCmd.Merge(m, src)
}
func (m *ContainerNetworkEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *ContainerNetworkEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNetworkEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNetworkEnsureCmd proto.InternalMessageInfo

func (m *ContainerNetworkEnsureCmd) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *ContainerNetworkEnsureCmd) GetIpv6Cidr() string {
	if m != nil {
		return m.Ipv6Cidr
	}
	return ""
}

func init() {
	proto.RegisterType((*ContainerNetworkListCmd)(nil), "aranya.ContainerNetworkListCmd")
	proto.RegisterType((*ContainerNetworkEnsureCmd)(nil), "aranya.ContainerNetworkEnsureCmd")
}

func init() { proto.RegisterFile("cmd_network_container.proto", fileDescriptor_2752a55ecae06ad0) }

var fileDescriptor_2752a55ecae06ad0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0x4d, 0x89,
	0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x8e, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0x54,
	0x92, 0xe4, 0x12, 0x77, 0x86, 0x49, 0xf9, 0x41, 0xd4, 0xfa, 0x64, 0x16, 0x97, 0x38, 0xe7, 0xa6,
	0x28, 0x85, 0x72, 0x49, 0xa2, 0x4b, 0xb9, 0xe6, 0x15, 0x97, 0x16, 0xa5, 0x3a, 0xe7, 0xa6, 0x08,
	0x49, 0x73, 0x71, 0x66, 0x16, 0x94, 0x99, 0xc4, 0x27, 0x67, 0xa6, 0x14, 0x49, 0x30, 0x29, 0x30,
	0x6a, 0x70, 0x06, 0x71, 0x80, 0x04, 0x9c, 0x33, 0x53, 0x8a, 0xa0, 0x92, 0x66, 0x10, 0x49, 0x66,
	0xb8, 0xa4, 0x19, 0x48, 0xd2, 0x29, 0xfc, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e,
	0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72,
	0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x62,
	0x62, 0x51, 0x46, 0x62, 0x89, 0x5e, 0x4a, 0x6a, 0x99, 0x3e, 0xc4, 0xe5, 0xba, 0x60, 0x7f, 0x40,
	0x39, 0xe9, 0xf9, 0x05, 0x49, 0x49, 0x6c, 0x60, 0x11, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x0c, 0x29, 0xd9, 0xf8, 0x00, 0x00, 0x00,
}

func (this *ContainerNetworkListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerNetworkListCmd)
	if !ok {
		that2, ok := that.(ContainerNetworkListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ContainerNetworkEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerNetworkEnsureCmd)
	if !ok {
		that2, ok := that.(ContainerNetworkEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4Cidr != that1.Ipv4Cidr {
		return false
	}
	if this.Ipv6Cidr != that1.Ipv6Cidr {
		return false
	}
	return true
}
func (this *ContainerNetworkListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.ContainerNetworkListCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerNetworkEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.ContainerNetworkEnsureCmd{")
	s = append(s, "Ipv4Cidr: "+fmt.Sprintf("%#v", this.Ipv4Cidr)+",\n")
	s = append(s, "Ipv6Cidr: "+fmt.Sprintf("%#v", this.Ipv6Cidr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdNetworkContainer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerNetworkListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerNetworkListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerNetworkListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContainerNetworkEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerNetworkEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerNetworkEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6Cidr) > 0 {
		i -= len(m.Ipv6Cidr)
		copy(dAtA[i:], m.Ipv6Cidr)
		i = encodeVarintCmdNetworkContainer(dAtA, i, uint64(len(m.Ipv6Cidr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCmdNetworkContainer(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdNetworkContainer(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdNetworkContainer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerNetworkListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContainerNetworkEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCmdNetworkContainer(uint64(l))
	}
	l = len(m.Ipv6Cidr)
	if l > 0 {
		n += 1 + l + sovCmdNetworkContainer(uint64(l))
	}
	return n
}

func sovCmdNetworkContainer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdNetworkContainer(x uint64) (n int) {
	return sovCmdNetworkContainer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerNetworkListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerNetworkListCmd{`,
		`}`,
	}, "")
	return s
}
func (this *ContainerNetworkEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerNetworkEnsureCmd{`,
		`Ipv4Cidr:` + fmt.Sprintf("%v", this.Ipv4Cidr) + `,`,
		`Ipv6Cidr:` + fmt.Sprintf("%v", this.Ipv6Cidr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdNetworkContainer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerNetworkListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdNetworkContainer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerNetworkListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerNetworkListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCmdNetworkContainer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerNetworkEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdNetworkContainer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerNetworkEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerNetworkEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdNetworkContainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdNetworkContainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdNetworkContainer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdNetworkContainer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdNetworkContainer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdNetworkContainer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdNetworkContainer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdNetworkContainer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdNetworkContainer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdNetworkContainer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdNetworkContainer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdNetworkContainer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdNetworkContainer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdNetworkContainer = fmt.Errorf("proto: unexpected end of group")
)
