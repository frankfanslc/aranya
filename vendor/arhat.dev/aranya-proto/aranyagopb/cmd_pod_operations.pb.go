// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_pod_operations.proto

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PodOperationCmd_Action int32

const (
	_INVALID_POD_OPERATION_ACTION PodOperationCmd_Action = 0
	// Execute commands in existing container
	EXEC_IN_CONTAINER PodOperationCmd_Action = 1
	// Attach to existing container
	ATTACH_TO_CONTAINER PodOperationCmd_Action = 2
	// Get container/node log
	RETRIEVE_CONTAINER_LOG PodOperationCmd_Action = 3
	// Port forward in pod
	PORT_FORWARD_TO_CONTAINER PodOperationCmd_Action = 4
	// user input or application data to
	// usually this action happens in Exec, Attach, PortForward session
	WRITE_TO_CONTAINER PodOperationCmd_Action = 5
	// user tty resize
	// usually this action happens in Exec, Attach session when tty is enabled
	RESIZE_CONTAINER_TTY PodOperationCmd_Action = 6
)

var PodOperationCmd_Action_name = map[int32]string{
	0: "_INVALID_POD_OPERATION_ACTION",
	1: "EXEC_IN_CONTAINER",
	2: "ATTACH_TO_CONTAINER",
	3: "RETRIEVE_CONTAINER_LOG",
	4: "PORT_FORWARD_TO_CONTAINER",
	5: "WRITE_TO_CONTAINER",
	6: "RESIZE_CONTAINER_TTY",
}

var PodOperationCmd_Action_value = map[string]int32{
	"_INVALID_POD_OPERATION_ACTION": 0,
	"EXEC_IN_CONTAINER":             1,
	"ATTACH_TO_CONTAINER":           2,
	"RETRIEVE_CONTAINER_LOG":        3,
	"PORT_FORWARD_TO_CONTAINER":     4,
	"WRITE_TO_CONTAINER":            5,
	"RESIZE_CONTAINER_TTY":          6,
}

func (PodOperationCmd_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{0, 0}
}

type PodOperationCmd struct {
	// action type
	Action PodOperationCmd_Action `protobuf:"varint,1,opt,name=action,proto3,enum=aranya.PodOperationCmd_Action" json:"action,omitempty"`
	// Types that are valid to be assigned to Options:
	//	*PodOperationCmd_LogOptions
	//	*PodOperationCmd_ExecOptions
	//	*PodOperationCmd_PortForwardOptions
	//	*PodOperationCmd_InputOptions
	//	*PodOperationCmd_ResizeOptions
	Options isPodOperationCmd_Options `protobuf_oneof:"options"`
}

func (m *PodOperationCmd) Reset()      { *m = PodOperationCmd{} }
func (*PodOperationCmd) ProtoMessage() {}
func (*PodOperationCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{0}
}
func (m *PodOperationCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodOperationCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodOperationCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodOperationCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodOperationCmd.Merge(m, src)
}
func (m *PodOperationCmd) XXX_Size() int {
	return m.Size()
}
func (m *PodOperationCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PodOperationCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PodOperationCmd proto.InternalMessageInfo

type isPodOperationCmd_Options interface {
	isPodOperationCmd_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PodOperationCmd_LogOptions struct {
	LogOptions *LogOptions `protobuf:"bytes,2,opt,name=log_options,json=logOptions,proto3,oneof" json:"log_options,omitempty"`
}
type PodOperationCmd_ExecOptions struct {
	ExecOptions *ExecOptions `protobuf:"bytes,3,opt,name=exec_options,json=execOptions,proto3,oneof" json:"exec_options,omitempty"`
}
type PodOperationCmd_PortForwardOptions struct {
	PortForwardOptions *PortForwardOptions `protobuf:"bytes,4,opt,name=port_forward_options,json=portForwardOptions,proto3,oneof" json:"port_forward_options,omitempty"`
}
type PodOperationCmd_InputOptions struct {
	InputOptions *InputOptions `protobuf:"bytes,5,opt,name=input_options,json=inputOptions,proto3,oneof" json:"input_options,omitempty"`
}
type PodOperationCmd_ResizeOptions struct {
	ResizeOptions *TtyResizeOptions `protobuf:"bytes,6,opt,name=resize_options,json=resizeOptions,proto3,oneof" json:"resize_options,omitempty"`
}

func (*PodOperationCmd_LogOptions) isPodOperationCmd_Options()         {}
func (*PodOperationCmd_ExecOptions) isPodOperationCmd_Options()        {}
func (*PodOperationCmd_PortForwardOptions) isPodOperationCmd_Options() {}
func (*PodOperationCmd_InputOptions) isPodOperationCmd_Options()       {}
func (*PodOperationCmd_ResizeOptions) isPodOperationCmd_Options()      {}

func (m *PodOperationCmd) GetOptions() isPodOperationCmd_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *PodOperationCmd) GetAction() PodOperationCmd_Action {
	if m != nil {
		return m.Action
	}
	return _INVALID_POD_OPERATION_ACTION
}

func (m *PodOperationCmd) GetLogOptions() *LogOptions {
	if x, ok := m.GetOptions().(*PodOperationCmd_LogOptions); ok {
		return x.LogOptions
	}
	return nil
}

func (m *PodOperationCmd) GetExecOptions() *ExecOptions {
	if x, ok := m.GetOptions().(*PodOperationCmd_ExecOptions); ok {
		return x.ExecOptions
	}
	return nil
}

func (m *PodOperationCmd) GetPortForwardOptions() *PortForwardOptions {
	if x, ok := m.GetOptions().(*PodOperationCmd_PortForwardOptions); ok {
		return x.PortForwardOptions
	}
	return nil
}

func (m *PodOperationCmd) GetInputOptions() *InputOptions {
	if x, ok := m.GetOptions().(*PodOperationCmd_InputOptions); ok {
		return x.InputOptions
	}
	return nil
}

func (m *PodOperationCmd) GetResizeOptions() *TtyResizeOptions {
	if x, ok := m.GetOptions().(*PodOperationCmd_ResizeOptions); ok {
		return x.ResizeOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PodOperationCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PodOperationCmd_LogOptions)(nil),
		(*PodOperationCmd_ExecOptions)(nil),
		(*PodOperationCmd_PortForwardOptions)(nil),
		(*PodOperationCmd_InputOptions)(nil),
		(*PodOperationCmd_ResizeOptions)(nil),
	}
}

type LogOptions struct {
	PodUid     string `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container  string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Follow     bool   `protobuf:"varint,3,opt,name=follow,proto3" json:"follow,omitempty"`
	Timestamp  bool   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Since      string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	TailLines  int64  `protobuf:"varint,6,opt,name=tail_lines,json=tailLines,proto3" json:"tail_lines,omitempty"`
	BytesLimit int64  `protobuf:"varint,7,opt,name=bytes_limit,json=bytesLimit,proto3" json:"bytes_limit,omitempty"`
	Previous   bool   `protobuf:"varint,8,opt,name=previous,proto3" json:"previous,omitempty"`
	// host log path
	Path string `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *LogOptions) Reset()      { *m = LogOptions{} }
func (*LogOptions) ProtoMessage() {}
func (*LogOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{1}
}
func (m *LogOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogOptions.Merge(m, src)
}
func (m *LogOptions) XXX_Size() int {
	return m.Size()
}
func (m *LogOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogOptions proto.InternalMessageInfo

func (m *LogOptions) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *LogOptions) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *LogOptions) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *LogOptions) GetTimestamp() bool {
	if m != nil {
		return m.Timestamp
	}
	return false
}

func (m *LogOptions) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *LogOptions) GetTailLines() int64 {
	if m != nil {
		return m.TailLines
	}
	return 0
}

func (m *LogOptions) GetBytesLimit() int64 {
	if m != nil {
		return m.BytesLimit
	}
	return 0
}

func (m *LogOptions) GetPrevious() bool {
	if m != nil {
		return m.Previous
	}
	return false
}

func (m *LogOptions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ExecOptions struct {
	PodUid    string            `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container string            `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Command   []string          `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	Stdin     bool              `protobuf:"varint,4,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout    bool              `protobuf:"varint,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr    bool              `protobuf:"varint,6,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Tty       bool              `protobuf:"varint,7,opt,name=tty,proto3" json:"tty,omitempty"`
	Envs      map[string]string `protobuf:"bytes,8,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExecOptions) Reset()      { *m = ExecOptions{} }
func (*ExecOptions) ProtoMessage() {}
func (*ExecOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{2}
}
func (m *ExecOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecOptions.Merge(m, src)
}
func (m *ExecOptions) XXX_Size() int {
	return m.Size()
}
func (m *ExecOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecOptions proto.InternalMessageInfo

func (m *ExecOptions) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ExecOptions) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ExecOptions) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ExecOptions) GetStdin() bool {
	if m != nil {
		return m.Stdin
	}
	return false
}

func (m *ExecOptions) GetStdout() bool {
	if m != nil {
		return m.Stdout
	}
	return false
}

func (m *ExecOptions) GetStderr() bool {
	if m != nil {
		return m.Stderr
	}
	return false
}

func (m *ExecOptions) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *ExecOptions) GetEnvs() map[string]string {
	if m != nil {
		return m.Envs
	}
	return nil
}

type PortForwardOptions struct {
	PodUid   string `protobuf:"bytes,1,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortForwardOptions) Reset()      { *m = PortForwardOptions{} }
func (*PortForwardOptions) ProtoMessage() {}
func (*PortForwardOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{3}
}
func (m *PortForwardOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortForwardOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortForwardOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortForwardOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortForwardOptions.Merge(m, src)
}
func (m *PortForwardOptions) XXX_Size() int {
	return m.Size()
}
func (m *PortForwardOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PortForwardOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PortForwardOptions proto.InternalMessageInfo

func (m *PortForwardOptions) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *PortForwardOptions) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortForwardOptions) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type InputOptions struct {
	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Completed bool   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// sequence in stream
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *InputOptions) Reset()      { *m = InputOptions{} }
func (*InputOptions) ProtoMessage() {}
func (*InputOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{4}
}
func (m *InputOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputOptions.Merge(m, src)
}
func (m *InputOptions) XXX_Size() int {
	return m.Size()
}
func (m *InputOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InputOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InputOptions proto.InternalMessageInfo

func (m *InputOptions) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InputOptions) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *InputOptions) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type TtyResizeOptions struct {
	Cols uint32 `protobuf:"varint,1,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows uint32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (m *TtyResizeOptions) Reset()      { *m = TtyResizeOptions{} }
func (*TtyResizeOptions) ProtoMessage() {}
func (*TtyResizeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b287dcff62252e31, []int{5}
}
func (m *TtyResizeOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TtyResizeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TtyResizeOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TtyResizeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtyResizeOptions.Merge(m, src)
}
func (m *TtyResizeOptions) XXX_Size() int {
	return m.Size()
}
func (m *TtyResizeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TtyResizeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TtyResizeOptions proto.InternalMessageInfo

func (m *TtyResizeOptions) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *TtyResizeOptions) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func init() {
	proto.RegisterEnum("aranya.PodOperationCmd_Action", PodOperationCmd_Action_name, PodOperationCmd_Action_value)
	proto.RegisterType((*PodOperationCmd)(nil), "aranya.PodOperationCmd")
	proto.RegisterType((*LogOptions)(nil), "aranya.LogOptions")
	proto.RegisterType((*ExecOptions)(nil), "aranya.ExecOptions")
	proto.RegisterMapType((map[string]string)(nil), "aranya.ExecOptions.EnvsEntry")
	proto.RegisterType((*PortForwardOptions)(nil), "aranya.PortForwardOptions")
	proto.RegisterType((*InputOptions)(nil), "aranya.InputOptions")
	proto.RegisterType((*TtyResizeOptions)(nil), "aranya.TtyResizeOptions")
}

func init() { proto.RegisterFile("cmd_pod_operations.proto", fileDescriptor_b287dcff62252e31) }

var fileDescriptor_b287dcff62252e31 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xb7, 0x62, 0xc7, 0xb1, 0x9e, 0x93, 0x62, 0xb6, 0x21, 0x15, 0x19, 0x22, 0x52, 0x9f, 0x72,
	0xc1, 0x0c, 0x61, 0x80, 0x4e, 0x39, 0xa9, 0x8e, 0x4a, 0x35, 0xe3, 0xb1, 0x32, 0x8b, 0x68, 0xa0,
	0x33, 0x8c, 0x66, 0x23, 0x6d, 0x53, 0x0d, 0xb2, 0x56, 0xac, 0xd6, 0x4e, 0xcd, 0x89, 0x8f, 0xc0,
	0x67, 0xe0, 0xc4, 0x47, 0xe9, 0x31, 0xc7, 0x1e, 0x1b, 0xe7, 0xc2, 0xb1, 0xdf, 0x00, 0x66, 0x9f,
	0x64, 0xcb, 0x6d, 0xe1, 0xd2, 0x93, 0xdf, 0xef, 0xb7, 0xef, 0xf7, 0x5b, 0xbd, 0x3f, 0x6b, 0xb0,
	0xa2, 0x49, 0x1c, 0xe6, 0x22, 0x0e, 0x45, 0xce, 0x25, 0x53, 0x89, 0xc8, 0x8a, 0x41, 0x2e, 0x85,
	0x12, 0xa4, 0xcd, 0x24, 0xcb, 0xe6, 0xac, 0xff, 0xaa, 0x05, 0x1f, 0x9c, 0x8a, 0xd8, 0x5f, 0x9e,
	0x0f, 0x27, 0x31, 0xf9, 0x1a, 0xda, 0x2c, 0xd2, 0xc0, 0x32, 0x0e, 0x8d, 0xa3, 0x5b, 0xc7, 0xf6,
	0xa0, 0x4c, 0x1e, 0xbc, 0x95, 0x38, 0x70, 0x30, 0x8b, 0x56, 0xd9, 0xe4, 0x2b, 0xe8, 0xa6, 0xe2,
	0x22, 0x14, 0x39, 0x5e, 0x64, 0x6d, 0x1c, 0x1a, 0x47, 0xdd, 0x63, 0xb2, 0x14, 0x8f, 0xc4, 0x85,
	0x5f, 0x9e, 0x3c, 0x6a, 0x50, 0x48, 0x57, 0x88, 0xdc, 0x83, 0x6d, 0xfe, 0x9c, 0x47, 0x2b, 0x5d,
	0x13, 0x75, 0xb7, 0x97, 0x3a, 0xf7, 0x39, 0x8f, 0x6a, 0x61, 0x97, 0xd7, 0x90, 0x8c, 0x61, 0x37,
	0x17, 0x52, 0x85, 0x4f, 0x85, 0xbc, 0x64, 0x32, 0x5e, 0x39, 0xb4, 0xd0, 0x61, 0xbf, 0xfe, 0x6c,
	0xa9, 0x1e, 0x96, 0x29, 0xb5, 0x11, 0xc9, 0xdf, 0x61, 0xc9, 0xb7, 0xb0, 0x93, 0x64, 0xf9, 0x54,
	0xad, 0x8c, 0x36, 0xd1, 0x68, 0x77, 0x69, 0xe4, 0xe9, 0xc3, 0xda, 0x62, 0x3b, 0x59, 0xc3, 0xc4,
	0x81, 0x5b, 0x92, 0x17, 0xc9, 0x6f, 0x7c, 0xa5, 0x6e, 0xa3, 0xda, 0x5a, 0xaa, 0x03, 0x35, 0xa7,
	0x98, 0x50, 0x3b, 0xec, 0xc8, 0x75, 0xa2, 0xff, 0xc2, 0x80, 0x76, 0xd9, 0x53, 0x72, 0x17, 0x0e,
	0x42, 0x6f, 0xfc, 0xd8, 0x19, 0x79, 0x27, 0xe1, 0xa9, 0x7f, 0x12, 0xfa, 0xa7, 0x2e, 0x75, 0x02,
	0xcf, 0x1f, 0x87, 0xce, 0x50, 0xff, 0xf4, 0x1a, 0xe4, 0x23, 0xf8, 0xd0, 0xfd, 0xd1, 0x1d, 0x86,
	0xde, 0x38, 0x1c, 0xfa, 0xe3, 0xc0, 0xf1, 0xc6, 0x2e, 0xed, 0x19, 0xe4, 0x0e, 0xdc, 0x76, 0x82,
	0xc0, 0x19, 0x3e, 0x0a, 0x03, 0x7f, 0xed, 0x60, 0x83, 0xec, 0xc3, 0x1e, 0x75, 0x03, 0xea, 0xb9,
	0x8f, 0xdd, 0x9a, 0x0f, 0x47, 0xfe, 0x77, 0xbd, 0x26, 0x39, 0x80, 0x8f, 0x4f, 0x7d, 0x1a, 0x84,
	0x0f, 0x7d, 0x7a, 0xe6, 0xd0, 0x93, 0x37, 0xa5, 0x2d, 0xb2, 0x07, 0xe4, 0x8c, 0x7a, 0x81, 0xfb,
	0x26, 0xbf, 0x49, 0x2c, 0xd8, 0xa5, 0xee, 0xf7, 0xde, 0x93, 0x75, 0xc3, 0x20, 0xf8, 0xa9, 0xd7,
	0x7e, 0x60, 0xc2, 0x56, 0xd5, 0x86, 0xfe, 0x3f, 0x06, 0x40, 0x3d, 0x7c, 0x72, 0x07, 0xb6, 0xf4,
	0x46, 0x4e, 0x93, 0x18, 0xd7, 0xcb, 0xa4, 0xed, 0x5c, 0xc4, 0x3f, 0x24, 0x31, 0xf9, 0x04, 0xcc,
	0x48, 0x64, 0x8a, 0x25, 0x19, 0x97, 0xb8, 0x3c, 0x26, 0xad, 0x09, 0xb2, 0x07, 0xed, 0xa7, 0x22,
	0x4d, 0xc5, 0x25, 0xee, 0x47, 0x87, 0x56, 0x48, 0xab, 0x54, 0x32, 0xe1, 0x85, 0x62, 0x93, 0x1c,
	0x07, 0xdf, 0xa1, 0x35, 0x41, 0x76, 0x61, 0xb3, 0x48, 0xb2, 0x88, 0xe3, 0x24, 0x4d, 0x5a, 0x02,
	0x72, 0x00, 0xa0, 0x58, 0x92, 0x86, 0x69, 0x92, 0xf1, 0x72, 0x4c, 0x4d, 0x6a, 0x6a, 0x66, 0xa4,
	0x09, 0xf2, 0x29, 0x74, 0xcf, 0xe7, 0x8a, 0x17, 0x61, 0x9a, 0x4c, 0x12, 0x65, 0x6d, 0xe1, 0x39,
	0x20, 0x35, 0xd2, 0x0c, 0xd9, 0x87, 0x4e, 0x2e, 0xf9, 0x2c, 0x11, 0xd3, 0xc2, 0xea, 0xe0, 0x95,
	0x2b, 0x4c, 0x08, 0xb4, 0x72, 0xa6, 0x9e, 0x59, 0x26, 0x5e, 0x88, 0x71, 0xff, 0xcf, 0x0d, 0xe8,
	0xae, 0xad, 0xf1, 0xfb, 0xb6, 0xc0, 0x82, 0xad, 0x48, 0x4c, 0x26, 0x2c, 0x8b, 0xad, 0xe6, 0x61,
	0xf3, 0xc8, 0xa4, 0x4b, 0x88, 0x65, 0xaa, 0x38, 0xc9, 0xaa, 0x06, 0x94, 0x40, 0xb7, 0xac, 0x50,
	0xb1, 0x98, 0x2a, 0xac, 0xbe, 0x43, 0x2b, 0x54, 0xf1, 0x5c, 0x4a, 0x2c, 0xbd, 0xe4, 0xb9, 0x94,
	0xa4, 0x07, 0x4d, 0xa5, 0xe6, 0x58, 0x6f, 0x87, 0xea, 0x90, 0x7c, 0x01, 0x2d, 0x9e, 0xcd, 0x74,
	0x91, 0xcd, 0xa3, 0xee, 0xf1, 0xc1, 0x7f, 0x3c, 0xc9, 0x81, 0x9b, 0xcd, 0x0a, 0x37, 0x53, 0x72,
	0x4e, 0x31, 0x75, 0xff, 0x1b, 0x30, 0x57, 0x94, 0x76, 0xfc, 0x85, 0xcf, 0xab, 0x22, 0x75, 0xa8,
	0xbf, 0x74, 0xc6, 0xd2, 0x29, 0xaf, 0xaa, 0x2b, 0xc1, 0xfd, 0x8d, 0x7b, 0x46, 0xff, 0x67, 0x20,
	0xef, 0x3e, 0xd4, 0xff, 0x6f, 0x95, 0xee, 0xb3, 0x90, 0x0a, 0x7d, 0x36, 0x29, 0xc6, 0xe5, 0x5c,
	0x84, 0x12, 0x91, 0x48, 0x71, 0x4b, 0x4c, 0xba, 0xc2, 0x7d, 0x0a, 0xdb, 0xeb, 0xcf, 0x57, 0xeb,
	0x63, 0xa6, 0x18, 0xba, 0x6e, 0x53, 0x8c, 0xcb, 0xf6, 0x4f, 0xf2, 0x94, 0x2b, 0x1e, 0xa3, 0x71,
	0x87, 0xd6, 0x84, 0x2e, 0xa6, 0xe0, 0xbf, 0xa2, 0x71, 0x8b, 0xea, 0xb0, 0x7f, 0x1f, 0x7a, 0x6f,
	0x3f, 0x6a, 0xed, 0x1b, 0x89, 0xb4, 0x40, 0xdf, 0x1d, 0x8a, 0xb1, 0xe6, 0xa4, 0xb8, 0x2c, 0xff,
	0x11, 0x77, 0x28, 0xc6, 0x0f, 0xce, 0xae, 0xae, 0xed, 0xc6, 0xcb, 0x6b, 0xbb, 0xf1, 0xfa, 0xda,
	0x36, 0x7e, 0x5f, 0xd8, 0xc6, 0x5f, 0x0b, 0xdb, 0x78, 0xb1, 0xb0, 0x8d, 0xab, 0x85, 0x6d, 0xbc,
	0x5a, 0xd8, 0xc6, 0xdf, 0x0b, 0xbb, 0xf1, 0x7a, 0x61, 0x1b, 0x7f, 0xdc, 0xd8, 0x8d, 0xab, 0x1b,
	0xbb, 0xf1, 0xf2, 0xc6, 0x6e, 0x3c, 0xb9, 0xcb, 0xe4, 0x33, 0xa6, 0x06, 0x31, 0x9f, 0x7d, 0x5e,
	0xce, 0xe2, 0x33, 0x2c, 0xb0, 0x02, 0x17, 0x22, 0x3f, 0x3f, 0x6f, 0x23, 0xf3, 0xe5, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x67, 0xdd, 0x03, 0x13, 0xfc, 0x05, 0x00, 0x00,
}

func (x PodOperationCmd_Action) String() string {
	s, ok := PodOperationCmd_Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PodOperationCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd)
	if !ok {
		that2, ok := that.(PodOperationCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PodOperationCmd_LogOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd_LogOptions)
	if !ok {
		that2, ok := that.(PodOperationCmd_LogOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogOptions.Equal(that1.LogOptions) {
		return false
	}
	return true
}
func (this *PodOperationCmd_ExecOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd_ExecOptions)
	if !ok {
		that2, ok := that.(PodOperationCmd_ExecOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecOptions.Equal(that1.ExecOptions) {
		return false
	}
	return true
}
func (this *PodOperationCmd_PortForwardOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd_PortForwardOptions)
	if !ok {
		that2, ok := that.(PodOperationCmd_PortForwardOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PortForwardOptions.Equal(that1.PortForwardOptions) {
		return false
	}
	return true
}
func (this *PodOperationCmd_InputOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd_InputOptions)
	if !ok {
		that2, ok := that.(PodOperationCmd_InputOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InputOptions.Equal(that1.InputOptions) {
		return false
	}
	return true
}
func (this *PodOperationCmd_ResizeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodOperationCmd_ResizeOptions)
	if !ok {
		that2, ok := that.(PodOperationCmd_ResizeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResizeOptions.Equal(that1.ResizeOptions) {
		return false
	}
	return true
}
func (this *LogOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogOptions)
	if !ok {
		that2, ok := that.(LogOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	if this.Follow != that1.Follow {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	if this.TailLines != that1.TailLines {
		return false
	}
	if this.BytesLimit != that1.BytesLimit {
		return false
	}
	if this.Previous != that1.Previous {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *ExecOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecOptions)
	if !ok {
		that2, ok := that.(ExecOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	if len(this.Command) != len(that1.Command) {
		return false
	}
	for i := range this.Command {
		if this.Command[i] != that1.Command[i] {
			return false
		}
	}
	if this.Stdin != that1.Stdin {
		return false
	}
	if this.Stdout != that1.Stdout {
		return false
	}
	if this.Stderr != that1.Stderr {
		return false
	}
	if this.Tty != that1.Tty {
		return false
	}
	if len(this.Envs) != len(that1.Envs) {
		return false
	}
	for i := range this.Envs {
		if this.Envs[i] != that1.Envs[i] {
			return false
		}
	}
	return true
}
func (this *PortForwardOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortForwardOptions)
	if !ok {
		that2, ok := that.(PortForwardOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodUid != that1.PodUid {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *InputOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputOptions)
	if !ok {
		that2, ok := that.(InputOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *TtyResizeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TtyResizeOptions)
	if !ok {
		that2, ok := that.(TtyResizeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	return true
}
func (this *PodOperationCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aranyagopb.PodOperationCmd{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodOperationCmd_LogOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aranyagopb.PodOperationCmd_LogOptions{` +
		`LogOptions:` + fmt.Sprintf("%#v", this.LogOptions) + `}`}, ", ")
	return s
}
func (this *PodOperationCmd_ExecOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aranyagopb.PodOperationCmd_ExecOptions{` +
		`ExecOptions:` + fmt.Sprintf("%#v", this.ExecOptions) + `}`}, ", ")
	return s
}
func (this *PodOperationCmd_PortForwardOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aranyagopb.PodOperationCmd_PortForwardOptions{` +
		`PortForwardOptions:` + fmt.Sprintf("%#v", this.PortForwardOptions) + `}`}, ", ")
	return s
}
func (this *PodOperationCmd_InputOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aranyagopb.PodOperationCmd_InputOptions{` +
		`InputOptions:` + fmt.Sprintf("%#v", this.InputOptions) + `}`}, ", ")
	return s
}
func (this *PodOperationCmd_ResizeOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aranyagopb.PodOperationCmd_ResizeOptions{` +
		`ResizeOptions:` + fmt.Sprintf("%#v", this.ResizeOptions) + `}`}, ", ")
	return s
}
func (this *LogOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aranyagopb.LogOptions{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "Follow: "+fmt.Sprintf("%#v", this.Follow)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "TailLines: "+fmt.Sprintf("%#v", this.TailLines)+",\n")
	s = append(s, "BytesLimit: "+fmt.Sprintf("%#v", this.BytesLimit)+",\n")
	s = append(s, "Previous: "+fmt.Sprintf("%#v", this.Previous)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&aranyagopb.ExecOptions{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Stdin: "+fmt.Sprintf("%#v", this.Stdin)+",\n")
	s = append(s, "Stdout: "+fmt.Sprintf("%#v", this.Stdout)+",\n")
	s = append(s, "Stderr: "+fmt.Sprintf("%#v", this.Stderr)+",\n")
	s = append(s, "Tty: "+fmt.Sprintf("%#v", this.Tty)+",\n")
	keysForEnvs := make([]string, 0, len(this.Envs))
	for k, _ := range this.Envs {
		keysForEnvs = append(keysForEnvs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvs)
	mapStringForEnvs := "map[string]string{"
	for _, k := range keysForEnvs {
		mapStringForEnvs += fmt.Sprintf("%#v: %#v,", k, this.Envs[k])
	}
	mapStringForEnvs += "}"
	if this.Envs != nil {
		s = append(s, "Envs: "+mapStringForEnvs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortForwardOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.PortForwardOptions{")
	s = append(s, "PodUid: "+fmt.Sprintf("%#v", this.PodUid)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InputOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.InputOptions{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TtyResizeOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.TtyResizeOptions{")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdPodOperations(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PodOperationCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodOperationCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodOperationCmd_LogOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd_LogOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogOptions != nil {
		{
			size, err := m.LogOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PodOperationCmd_ExecOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd_ExecOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecOptions != nil {
		{
			size, err := m.ExecOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PodOperationCmd_PortForwardOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd_PortForwardOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PortForwardOptions != nil {
		{
			size, err := m.PortForwardOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PodOperationCmd_InputOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd_InputOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InputOptions != nil {
		{
			size, err := m.InputOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PodOperationCmd_ResizeOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOperationCmd_ResizeOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResizeOptions != nil {
		{
			size, err := m.ResizeOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *LogOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Previous {
		i--
		if m.Previous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.BytesLimit != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.BytesLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.TailLines != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.TailLines))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Since) > 0 {
		i -= len(m.Since)
		copy(dAtA[i:], m.Since)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Since)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp {
		i--
		if m.Timestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Follow {
		i--
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Envs) > 0 {
		for k := range m.Envs {
			v := m.Envs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Tty {
		i--
		if m.Tty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Stderr {
		i--
		if m.Stderr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Stdout {
		i--
		if m.Stdout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Stdin {
		i--
		if m.Stdin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PortForwardOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortForwardOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortForwardOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InputOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TtyResizeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TtyResizeOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TtyResizeOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rows != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x10
	}
	if m.Cols != 0 {
		i = encodeVarintCmdPodOperations(dAtA, i, uint64(m.Cols))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdPodOperations(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdPodOperations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PodOperationCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.Action))
	}
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *PodOperationCmd_LogOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogOptions != nil {
		l = m.LogOptions.Size()
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}
func (m *PodOperationCmd_ExecOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecOptions != nil {
		l = m.ExecOptions.Size()
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}
func (m *PodOperationCmd_PortForwardOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortForwardOptions != nil {
		l = m.PortForwardOptions.Size()
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}
func (m *PodOperationCmd_InputOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InputOptions != nil {
		l = m.InputOptions.Size()
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}
func (m *PodOperationCmd_ResizeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResizeOptions != nil {
		l = m.ResizeOptions.Size()
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}
func (m *LogOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	if m.Follow {
		n += 2
	}
	if m.Timestamp {
		n += 2
	}
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	if m.TailLines != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.TailLines))
	}
	if m.BytesLimit != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.BytesLimit))
	}
	if m.Previous {
		n += 2
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}

func (m *ExecOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovCmdPodOperations(uint64(l))
		}
	}
	if m.Stdin {
		n += 2
	}
	if m.Stdout {
		n += 2
	}
	if m.Stderr {
		n += 2
	}
	if m.Tty {
		n += 2
	}
	if len(m.Envs) > 0 {
		for k, v := range m.Envs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCmdPodOperations(uint64(len(k))) + 1 + len(v) + sovCmdPodOperations(uint64(len(v)))
			n += mapEntrySize + 1 + sovCmdPodOperations(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PortForwardOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	return n
}

func (m *InputOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdPodOperations(uint64(l))
	}
	if m.Completed {
		n += 2
	}
	if m.Seq != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.Seq))
	}
	return n
}

func (m *TtyResizeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cols != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.Cols))
	}
	if m.Rows != 0 {
		n += 1 + sovCmdPodOperations(uint64(m.Rows))
	}
	return n
}

func sovCmdPodOperations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdPodOperations(x uint64) (n int) {
	return sovCmdPodOperations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PodOperationCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOperationCmd_LogOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd_LogOptions{`,
		`LogOptions:` + strings.Replace(fmt.Sprintf("%v", this.LogOptions), "LogOptions", "LogOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOperationCmd_ExecOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd_ExecOptions{`,
		`ExecOptions:` + strings.Replace(fmt.Sprintf("%v", this.ExecOptions), "ExecOptions", "ExecOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOperationCmd_PortForwardOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd_PortForwardOptions{`,
		`PortForwardOptions:` + strings.Replace(fmt.Sprintf("%v", this.PortForwardOptions), "PortForwardOptions", "PortForwardOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOperationCmd_InputOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd_InputOptions{`,
		`InputOptions:` + strings.Replace(fmt.Sprintf("%v", this.InputOptions), "InputOptions", "InputOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOperationCmd_ResizeOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOperationCmd_ResizeOptions{`,
		`ResizeOptions:` + strings.Replace(fmt.Sprintf("%v", this.ResizeOptions), "TtyResizeOptions", "TtyResizeOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogOptions{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Follow:` + fmt.Sprintf("%v", this.Follow) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`TailLines:` + fmt.Sprintf("%v", this.TailLines) + `,`,
		`BytesLimit:` + fmt.Sprintf("%v", this.BytesLimit) + `,`,
		`Previous:` + fmt.Sprintf("%v", this.Previous) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForEnvs := make([]string, 0, len(this.Envs))
	for k, _ := range this.Envs {
		keysForEnvs = append(keysForEnvs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvs)
	mapStringForEnvs := "map[string]string{"
	for _, k := range keysForEnvs {
		mapStringForEnvs += fmt.Sprintf("%v: %v,", k, this.Envs[k])
	}
	mapStringForEnvs += "}"
	s := strings.Join([]string{`&ExecOptions{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Stdin:` + fmt.Sprintf("%v", this.Stdin) + `,`,
		`Stdout:` + fmt.Sprintf("%v", this.Stdout) + `,`,
		`Stderr:` + fmt.Sprintf("%v", this.Stderr) + `,`,
		`Tty:` + fmt.Sprintf("%v", this.Tty) + `,`,
		`Envs:` + mapStringForEnvs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortForwardOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortForwardOptions{`,
		`PodUid:` + fmt.Sprintf("%v", this.PodUid) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InputOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputOptions{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TtyResizeOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TtyResizeOptions{`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdPodOperations(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PodOperationCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodOperationCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodOperationCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= PodOperationCmd_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodOperationCmd_LogOptions{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodOperationCmd_ExecOptions{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortForwardOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortForwardOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodOperationCmd_PortForwardOptions{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InputOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodOperationCmd_InputOptions{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TtyResizeOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodOperationCmd_ResizeOptions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailLines", wireType)
			}
			m.TailLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TailLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesLimit", wireType)
			}
			m.BytesLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Previous = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stdin = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stdout = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stderr = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tty = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envs == nil {
				m.Envs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCmdPodOperations
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPodOperations
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCmdPodOperations
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCmdPodOperations
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCmdPodOperations
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCmdPodOperations
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCmdPodOperations
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCmdPodOperations
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Envs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortForwardOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortForwardOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortForwardOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TtyResizeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TtyResizeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TtyResizeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdPodOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdPodOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdPodOperations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdPodOperations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdPodOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdPodOperations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdPodOperations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdPodOperations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdPodOperations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdPodOperations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdPodOperations = fmt.Errorf("proto: unexpected end of group")
)
