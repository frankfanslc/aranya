// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runtime/msg_image.proto

package runtimepb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageStatusMsg struct {
	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// size of the image in bytes
	Size_ uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Refs  []string `protobuf:"bytes,3,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (m *ImageStatusMsg) Reset()      { *m = ImageStatusMsg{} }
func (*ImageStatusMsg) ProtoMessage() {}
func (*ImageStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c319658a988768ad, []int{0}
}
func (m *ImageStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStatusMsg.Merge(m, src)
}
func (m *ImageStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *ImageStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStatusMsg proto.InternalMessageInfo

func (m *ImageStatusMsg) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *ImageStatusMsg) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ImageStatusMsg) GetRefs() []string {
	if m != nil {
		return m.Refs
	}
	return nil
}

type ImageStatusListMsg struct {
	Images []*ImageStatusMsg `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (m *ImageStatusListMsg) Reset()      { *m = ImageStatusListMsg{} }
func (*ImageStatusListMsg) ProtoMessage() {}
func (*ImageStatusListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c319658a988768ad, []int{1}
}
func (m *ImageStatusListMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageStatusListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageStatusListMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageStatusListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStatusListMsg.Merge(m, src)
}
func (m *ImageStatusListMsg) XXX_Size() int {
	return m.Size()
}
func (m *ImageStatusListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStatusListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStatusListMsg proto.InternalMessageInfo

func (m *ImageStatusListMsg) GetImages() []*ImageStatusMsg {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageStatusMsg)(nil), "runtime.ImageStatusMsg")
	proto.RegisterType((*ImageStatusListMsg)(nil), "runtime.ImageStatusListMsg")
}

func init() { proto.RegisterFile("runtime/msg_image.proto", fileDescriptor_c319658a988768ad) }

var fileDescriptor_c319658a988768ad = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2a, 0xcd, 0x2b,
	0xc9, 0xcc, 0x4d, 0xd5, 0xcf, 0x2d, 0x4e, 0x8f, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x4a, 0x28, 0x05, 0x70, 0xf1, 0x79, 0x82, 0xc4, 0x83, 0x4b,
	0x12, 0x4b, 0x4a, 0x8b, 0x7d, 0x8b, 0xd3, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x33, 0x12, 0x8d, 0x4c,
	0xcd, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x21, 0x2e, 0x96, 0xe2, 0xcc,
	0xaa, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x30, 0x1b, 0x24, 0x56, 0x94, 0x9a, 0x56,
	0x2c, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x19, 0x04, 0x66, 0x2b, 0xb9, 0x72, 0x09, 0x21, 0x99, 0xe8,
	0x93, 0x59, 0x5c, 0x02, 0x32, 0x55, 0x9f, 0x8b, 0x0d, 0x6c, 0x7f, 0xb1, 0x04, 0xa3, 0x02, 0xb3,
	0x06, 0xb7, 0x91, 0xb8, 0x1e, 0xd4, 0x05, 0x7a, 0xa8, 0xd6, 0x07, 0x41, 0x95, 0x39, 0x25, 0x5e,
	0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18,
	0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f,
	0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4e, 0x2c, 0xca, 0x48, 0x2c, 0xd1, 0x4b, 0x49,
	0x2d, 0xd3, 0x4f, 0x2c, 0x4a, 0xcc, 0xab, 0x4c, 0xd4, 0x05, 0xfb, 0x17, 0xca, 0x49, 0xcf, 0x2f,
	0x48, 0xd2, 0x87, 0xda, 0x5b, 0x90, 0x94, 0xc4, 0x06, 0x96, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0xb3, 0x91, 0x06, 0x26, 0x01, 0x00, 0x00,
}

func (this *ImageStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageStatusMsg)
	if !ok {
		that2, ok := that.(ImageStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sha256 != that1.Sha256 {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if this.Refs[i] != that1.Refs[i] {
			return false
		}
	}
	return true
}
func (this *ImageStatusListMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageStatusListMsg)
	if !ok {
		that2, ok := that.(ImageStatusListMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	return true
}
func (this *ImageStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&runtimepb.ImageStatusMsg{")
	s = append(s, "Sha256: "+fmt.Sprintf("%#v", this.Sha256)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Refs: "+fmt.Sprintf("%#v", this.Refs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageStatusListMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&runtimepb.ImageStatusListMsg{")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgImage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Refs[iNdEx])
			copy(dAtA[i:], m.Refs[iNdEx])
			i = encodeVarintMsgImage(dAtA, i, uint64(len(m.Refs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintMsgImage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintMsgImage(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageStatusListMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageStatusListMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageStatusListMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgImage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgImage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgImage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovMsgImage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovMsgImage(uint64(m.Size_))
	}
	if len(m.Refs) > 0 {
		for _, s := range m.Refs {
			l = len(s)
			n += 1 + l + sovMsgImage(uint64(l))
		}
	}
	return n
}

func (m *ImageStatusListMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovMsgImage(uint64(l))
		}
	}
	return n
}

func sovMsgImage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgImage(x uint64) (n int) {
	return sovMsgImage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageStatusMsg{`,
		`Sha256:` + fmt.Sprintf("%v", this.Sha256) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Refs:` + fmt.Sprintf("%v", this.Refs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageStatusListMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*ImageStatusMsg{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(f.String(), "ImageStatusMsg", "ImageStatusMsg", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ImageStatusListMsg{`,
		`Images:` + repeatedStringForImages + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgImage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageStatusListMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageStatusListMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageStatusListMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &ImageStatusMsg{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgImage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgImage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgImage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgImage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgImage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgImage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgImage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgImage = fmt.Errorf("proto: unexpected end of group")
)
