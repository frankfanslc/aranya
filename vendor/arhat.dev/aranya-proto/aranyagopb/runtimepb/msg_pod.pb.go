// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runtime/msg_pod.proto

package runtimepb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PodState int32

const (
	POD_STATE_UNKNOWN   PodState = 0
	POD_STATE_PENDING   PodState = 1
	POD_STATE_RUNNING   PodState = 2
	POD_STATE_SUCCEEDED PodState = 3
	POD_STATE_FAILED    PodState = 4
)

var PodState_name = map[int32]string{
	0: "POD_STATE_UNKNOWN",
	1: "POD_STATE_PENDING",
	2: "POD_STATE_RUNNING",
	3: "POD_STATE_SUCCEEDED",
	4: "POD_STATE_FAILED",
}

var PodState_value = map[string]int32{
	"POD_STATE_UNKNOWN":   0,
	"POD_STATE_PENDING":   1,
	"POD_STATE_RUNNING":   2,
	"POD_STATE_SUCCEEDED": 3,
	"POD_STATE_FAILED":    4,
}

func (PodState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_adfbd62dea7e14fc, []int{0}
}

type ContainerStatus struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageId     string `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// time values in rfc3339nano format
	CreatedAt    string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt    string `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt   string `protobuf:"bytes,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ExitCode     int32  `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	RestartCount int32  `protobuf:"varint,8,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	Reason       string `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
	Message      string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ContainerStatus) Reset()      { *m = ContainerStatus{} }
func (*ContainerStatus) ProtoMessage() {}
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfbd62dea7e14fc, []int{0}
}
func (m *ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatus.Merge(m, src)
}
func (m *ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatus proto.InternalMessageInfo

func (m *ContainerStatus) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerStatus) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ContainerStatus) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ContainerStatus) GetStartedAt() string {
	if m != nil {
		return m.StartedAt
	}
	return ""
}

func (m *ContainerStatus) GetFinishedAt() string {
	if m != nil {
		return m.FinishedAt
	}
	return ""
}

func (m *ContainerStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ContainerStatus) GetRestartCount() int32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PodStatusMsg struct {
	// metadata
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// pod network status, protobuf bytes of abbot proto
	Network []byte `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// status
	Containers map[string]*ContainerStatus `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodStatusMsg) Reset()      { *m = PodStatusMsg{} }
func (*PodStatusMsg) ProtoMessage() {}
func (*PodStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfbd62dea7e14fc, []int{1}
}
func (m *PodStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusMsg.Merge(m, src)
}
func (m *PodStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusMsg proto.InternalMessageInfo

func (m *PodStatusMsg) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PodStatusMsg) GetNetwork() []byte {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *PodStatusMsg) GetContainers() map[string]*ContainerStatus {
	if m != nil {
		return m.Containers
	}
	return nil
}

type PodStatusListMsg struct {
	Pods []*PodStatusMsg `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (m *PodStatusListMsg) Reset()      { *m = PodStatusListMsg{} }
func (*PodStatusListMsg) ProtoMessage() {}
func (*PodStatusListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfbd62dea7e14fc, []int{2}
}
func (m *PodStatusListMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusListMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusListMsg.Merge(m, src)
}
func (m *PodStatusListMsg) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusListMsg proto.InternalMessageInfo

func (m *PodStatusListMsg) GetPods() []*PodStatusMsg {
	if m != nil {
		return m.Pods
	}
	return nil
}

func init() {
	proto.RegisterEnum("runtime.PodState", PodState_name, PodState_value)
	proto.RegisterType((*ContainerStatus)(nil), "runtime.ContainerStatus")
	proto.RegisterType((*PodStatusMsg)(nil), "runtime.PodStatusMsg")
	proto.RegisterMapType((map[string]*ContainerStatus)(nil), "runtime.PodStatusMsg.ContainersEntry")
	proto.RegisterType((*PodStatusListMsg)(nil), "runtime.PodStatusListMsg")
}

func init() { proto.RegisterFile("runtime/msg_pod.proto", fileDescriptor_adfbd62dea7e14fc) }

var fileDescriptor_adfbd62dea7e14fc = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x41, 0x8f, 0xd2, 0x4c,
	0x18, 0xc7, 0x3b, 0xb0, 0xbb, 0xc0, 0x03, 0x6f, 0xde, 0x3a, 0x8a, 0x56, 0x8d, 0x23, 0x62, 0x4c,
	0x50, 0x63, 0x49, 0xd6, 0x8b, 0x31, 0xf1, 0x80, 0x50, 0x0d, 0x71, 0xed, 0x92, 0xb2, 0x64, 0x13,
	0x2f, 0xcd, 0x40, 0x47, 0xb6, 0x41, 0x3a, 0xa4, 0x33, 0xac, 0x72, 0x31, 0x7e, 0x04, 0x3f, 0x83,
	0x27, 0x3f, 0x8a, 0x47, 0x8e, 0x1b, 0x4f, 0x52, 0x2e, 0x1e, 0xf7, 0x23, 0x98, 0x4e, 0x4b, 0x97,
	0x35, 0xde, 0x78, 0x7e, 0xbf, 0x99, 0xe1, 0xff, 0x3c, 0x4f, 0x0a, 0xd5, 0x70, 0x1e, 0x48, 0x7f,
	0xca, 0x9a, 0x53, 0x31, 0x76, 0x67, 0xdc, 0x33, 0x67, 0x21, 0x97, 0x1c, 0x17, 0x52, 0x5c, 0xff,
	0x96, 0x83, 0xff, 0xdb, 0x3c, 0x90, 0xd4, 0x0f, 0x58, 0xd8, 0x97, 0x54, 0xce, 0x05, 0xbe, 0x07,
	0x95, 0xd1, 0x06, 0xb9, 0xbe, 0x67, 0xa0, 0x1a, 0x6a, 0x94, 0x9c, 0x72, 0xc6, 0xba, 0x1e, 0xbe,
	0x09, 0x45, 0x7f, 0x4a, 0xc7, 0x2c, 0xd6, 0x39, 0xa5, 0x0b, 0xaa, 0xee, 0x7a, 0xf8, 0x0e, 0xc0,
	0x28, 0x64, 0x54, 0x32, 0xcf, 0xa5, 0xd2, 0xd8, 0x51, 0xb2, 0x94, 0x92, 0x96, 0x8c, 0xb5, 0x90,
	0x34, 0x4c, 0xf5, 0x6e, 0xa2, 0x53, 0xd2, 0x92, 0xf8, 0x2e, 0x94, 0xdf, 0xfb, 0x81, 0x2f, 0x4e,
	0x12, 0xbf, 0xa7, 0x3c, 0x6c, 0x50, 0x4b, 0xe2, 0xdb, 0x50, 0x62, 0x9f, 0x7c, 0xe9, 0x8e, 0xb8,
	0xc7, 0x8c, 0x42, 0x0d, 0x35, 0x76, 0x9d, 0x62, 0x0c, 0xda, 0xdc, 0x63, 0xf8, 0x3e, 0xfc, 0x17,
	0x32, 0xf5, 0x98, 0x3b, 0xe2, 0xf3, 0x40, 0x1a, 0x45, 0x75, 0xa0, 0x92, 0xc2, 0x76, 0xcc, 0xf0,
	0x75, 0xd8, 0x0b, 0x19, 0x15, 0x3c, 0x30, 0xca, 0xea, 0xf5, 0xb4, 0xc2, 0x06, 0x14, 0xa6, 0x4c,
	0x08, 0x3a, 0x66, 0x46, 0x25, 0x69, 0x29, 0x2d, 0xeb, 0x3f, 0x11, 0x54, 0x7a, 0xdc, 0x4b, 0xc6,
	0xf3, 0x56, 0x8c, 0xb1, 0x0e, 0xf9, 0x79, 0x36, 0x98, 0xf8, 0x67, 0x7c, 0x39, 0x60, 0xf2, 0x23,
	0x0f, 0x27, 0x6a, 0x1e, 0x15, 0x67, 0x53, 0x62, 0x0b, 0x20, 0x9b, 0x9c, 0x30, 0xf2, 0xb5, 0x7c,
	0xa3, 0xbc, 0xff, 0xc0, 0x4c, 0xe7, 0x6f, 0x6e, 0x3f, 0x6b, 0x66, 0x8b, 0x10, 0x56, 0x20, 0xc3,
	0x85, 0xb3, 0x75, 0xf1, 0xd6, 0xf1, 0xd6, 0x9e, 0x12, 0x1d, 0xa7, 0x98, 0xb0, 0xc5, 0x26, 0xc5,
	0x84, 0x2d, 0xb0, 0x09, 0xbb, 0xa7, 0xf4, 0xc3, 0x9c, 0xa9, 0x0c, 0xe5, 0x7d, 0x23, 0xfb, 0x9b,
	0xbf, 0x56, 0xec, 0x24, 0xc7, 0x9e, 0xe7, 0x9e, 0xa1, 0xfa, 0x0b, 0xd0, 0xb3, 0x10, 0x07, 0xbe,
	0x90, 0x71, 0x7f, 0x0f, 0x61, 0x67, 0xc6, 0x3d, 0x61, 0x20, 0x95, 0xb6, 0xfa, 0xcf, 0xb4, 0x8e,
	0x3a, 0xf2, 0xe8, 0x33, 0x14, 0x53, 0xca, 0x70, 0x15, 0xae, 0xf4, 0x0e, 0x3b, 0x6e, 0xff, 0xa8,
	0x75, 0x64, 0xb9, 0x03, 0xfb, 0x8d, 0x7d, 0x78, 0x6c, 0xeb, 0xda, 0x65, 0xdc, 0xb3, 0xec, 0x4e,
	0xd7, 0x7e, 0xad, 0xa3, 0xcb, 0xd8, 0x19, 0xd8, 0x76, 0x8c, 0x73, 0xf8, 0x06, 0x5c, 0xbd, 0xc0,
	0xfd, 0x41, 0xbb, 0x6d, 0x59, 0x1d, 0xab, 0xa3, 0xe7, 0xf1, 0x35, 0xd0, 0x2f, 0xc4, 0xab, 0x56,
	0xf7, 0xc0, 0xea, 0xe8, 0x3b, 0x2f, 0xe9, 0x72, 0x45, 0xb4, 0xb3, 0x15, 0xd1, 0xce, 0x57, 0x04,
	0x7d, 0x89, 0x08, 0xfa, 0x1e, 0x11, 0xf4, 0x23, 0x22, 0x68, 0x19, 0x11, 0xf4, 0x2b, 0x22, 0xe8,
	0x77, 0x44, 0xb4, 0xf3, 0x88, 0xa0, 0xaf, 0x6b, 0xa2, 0x2d, 0xd7, 0x44, 0x3b, 0x5b, 0x13, 0xed,
	0xdd, 0x63, 0x1a, 0x9e, 0x50, 0x69, 0x7a, 0xec, 0xb4, 0x49, 0x43, 0x1a, 0x2c, 0xe8, 0x13, 0xf5,
	0x5d, 0xa4, 0xc5, 0x98, 0xcf, 0x86, 0xcd, 0xb4, 0xe7, 0xd9, 0x70, 0xb8, 0xa7, 0xdc, 0xd3, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0x29, 0xae, 0x8b, 0x4c, 0x03, 0x00, 0x00,
}

func (x PodState) String() string {
	s, ok := PodState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ContainerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerStatus)
	if !ok {
		that2, ok := that.(ContainerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainerId != that1.ContainerId {
		return false
	}
	if this.ImageId != that1.ImageId {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.StartedAt != that1.StartedAt {
		return false
	}
	if this.FinishedAt != that1.FinishedAt {
		return false
	}
	if this.ExitCode != that1.ExitCode {
		return false
	}
	if this.RestartCount != that1.RestartCount {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *PodStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatusMsg)
	if !ok {
		that2, ok := that.(PodStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !bytes.Equal(this.Network, that1.Network) {
		return false
	}
	if len(this.Containers) != len(that1.Containers) {
		return false
	}
	for i := range this.Containers {
		if !this.Containers[i].Equal(that1.Containers[i]) {
			return false
		}
	}
	return true
}
func (this *PodStatusListMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatusListMsg)
	if !ok {
		that2, ok := that.(PodStatusListMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pods) != len(that1.Pods) {
		return false
	}
	for i := range this.Pods {
		if !this.Pods[i].Equal(that1.Pods[i]) {
			return false
		}
	}
	return true
}
func (this *ContainerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&runtimepb.ContainerStatus{")
	s = append(s, "ContainerId: "+fmt.Sprintf("%#v", this.ContainerId)+",\n")
	s = append(s, "ImageId: "+fmt.Sprintf("%#v", this.ImageId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	s = append(s, "FinishedAt: "+fmt.Sprintf("%#v", this.FinishedAt)+",\n")
	s = append(s, "ExitCode: "+fmt.Sprintf("%#v", this.ExitCode)+",\n")
	s = append(s, "RestartCount: "+fmt.Sprintf("%#v", this.RestartCount)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&runtimepb.PodStatusMsg{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	keysForContainers := make([]string, 0, len(this.Containers))
	for k, _ := range this.Containers {
		keysForContainers = append(keysForContainers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainers)
	mapStringForContainers := "map[string]*ContainerStatus{"
	for _, k := range keysForContainers {
		mapStringForContainers += fmt.Sprintf("%#v: %#v,", k, this.Containers[k])
	}
	mapStringForContainers += "}"
	if this.Containers != nil {
		s = append(s, "Containers: "+mapStringForContainers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatusListMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&runtimepb.PodStatusListMsg{")
	if this.Pods != nil {
		s = append(s, "Pods: "+fmt.Sprintf("%#v", this.Pods)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgPod(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RestartCount != 0 {
		i = encodeVarintMsgPod(dAtA, i, uint64(m.RestartCount))
		i--
		dAtA[i] = 0x40
	}
	if m.ExitCode != 0 {
		i = encodeVarintMsgPod(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FinishedAt) > 0 {
		i -= len(m.FinishedAt)
		copy(dAtA[i:], m.FinishedAt)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.FinishedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartedAt) > 0 {
		i -= len(m.StartedAt)
		copy(dAtA[i:], m.StartedAt)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.StartedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for k := range m.Containers {
			v := m.Containers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMsgPod(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMsgPod(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMsgPod(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMsgPod(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatusListMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusListMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusListMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgPod(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgPod(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgPod(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.StartedAt)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.FinishedAt)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	if m.ExitCode != 0 {
		n += 1 + sovMsgPod(uint64(m.ExitCode))
	}
	if m.RestartCount != 0 {
		n += 1 + sovMsgPod(uint64(m.RestartCount))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	return n
}

func (m *PodStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovMsgPod(uint64(l))
	}
	if len(m.Containers) > 0 {
		for k, v := range m.Containers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsgPod(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMsgPod(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMsgPod(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PodStatusListMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovMsgPod(uint64(l))
		}
	}
	return n
}

func sovMsgPod(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgPod(x uint64) (n int) {
	return sovMsgPod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStatus{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`ImageId:` + fmt.Sprintf("%v", this.ImageId) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`StartedAt:` + fmt.Sprintf("%v", this.StartedAt) + `,`,
		`FinishedAt:` + fmt.Sprintf("%v", this.FinishedAt) + `,`,
		`ExitCode:` + fmt.Sprintf("%v", this.ExitCode) + `,`,
		`RestartCount:` + fmt.Sprintf("%v", this.RestartCount) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainers := make([]string, 0, len(this.Containers))
	for k, _ := range this.Containers {
		keysForContainers = append(keysForContainers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainers)
	mapStringForContainers := "map[string]*ContainerStatus{"
	for _, k := range keysForContainers {
		mapStringForContainers += fmt.Sprintf("%v: %v,", k, this.Containers[k])
	}
	mapStringForContainers += "}"
	s := strings.Join([]string{`&PodStatusMsg{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Containers:` + mapStringForContainers + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusListMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPods := "[]*PodStatusMsg{"
	for _, f := range this.Pods {
		repeatedStringForPods += strings.Replace(f.String(), "PodStatusMsg", "PodStatusMsg", 1) + ","
	}
	repeatedStringForPods += "}"
	s := strings.Join([]string{`&PodStatusListMsg{`,
		`Pods:` + repeatedStringForPods + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgPod(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgPod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			m.RestartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgPod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgPod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network[:0], dAtA[iNdEx:postIndex]...)
			if m.Network == nil {
				m.Network = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Containers == nil {
				m.Containers = make(map[string]*ContainerStatus)
			}
			var mapkey string
			var mapvalue *ContainerStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgPod
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgPod
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsgPod
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMsgPod
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgPod
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMsgPod
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMsgPod
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContainerStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsgPod(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsgPod
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Containers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgPod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusListMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgPod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusListMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusListMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgPod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgPod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &PodStatusMsg{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgPod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgPod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgPod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgPod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgPod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgPod
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgPod
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgPod
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgPod        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgPod          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgPod = fmt.Errorf("proto: unexpected end of group")
)
