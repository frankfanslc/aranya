// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credential.proto

package aranyagopb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialListCmd struct {
}

func (m *CredentialListCmd) Reset()      { *m = CredentialListCmd{} }
func (*CredentialListCmd) ProtoMessage() {}
func (*CredentialListCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1720e53dfb4809d1, []int{0}
}
func (m *CredentialListCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialListCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialListCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialListCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialListCmd.Merge(m, src)
}
func (m *CredentialListCmd) XXX_Size() int {
	return m.Size()
}
func (m *CredentialListCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialListCmd.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialListCmd proto.InternalMessageInfo

type CredentialEnsureCmd struct {
	SshPrivateKey []byte `protobuf:"bytes,1,opt,name=ssh_private_key,json=sshPrivateKey,proto3" json:"ssh_private_key,omitempty"`
}

func (m *CredentialEnsureCmd) Reset()      { *m = CredentialEnsureCmd{} }
func (*CredentialEnsureCmd) ProtoMessage() {}
func (*CredentialEnsureCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1720e53dfb4809d1, []int{1}
}
func (m *CredentialEnsureCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialEnsureCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialEnsureCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialEnsureCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialEnsureCmd.Merge(m, src)
}
func (m *CredentialEnsureCmd) XXX_Size() int {
	return m.Size()
}
func (m *CredentialEnsureCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialEnsureCmd.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialEnsureCmd proto.InternalMessageInfo

func (m *CredentialEnsureCmd) GetSshPrivateKey() []byte {
	if m != nil {
		return m.SshPrivateKey
	}
	return nil
}

type CredentialDeleteCmd struct {
}

func (m *CredentialDeleteCmd) Reset()      { *m = CredentialDeleteCmd{} }
func (*CredentialDeleteCmd) ProtoMessage() {}
func (*CredentialDeleteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1720e53dfb4809d1, []int{2}
}
func (m *CredentialDeleteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialDeleteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialDeleteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialDeleteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialDeleteCmd.Merge(m, src)
}
func (m *CredentialDeleteCmd) XXX_Size() int {
	return m.Size()
}
func (m *CredentialDeleteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialDeleteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialDeleteCmd proto.InternalMessageInfo

type CredentialStatusMsg struct {
	SshPrivateKeySha256Hex string `protobuf:"bytes,1,opt,name=ssh_private_key_sha256_hex,json=sshPrivateKeySha256Hex,proto3" json:"ssh_private_key_sha256_hex,omitempty"`
}

func (m *CredentialStatusMsg) Reset()      { *m = CredentialStatusMsg{} }
func (*CredentialStatusMsg) ProtoMessage() {}
func (*CredentialStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1720e53dfb4809d1, []int{3}
}
func (m *CredentialStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialStatusMsg.Merge(m, src)
}
func (m *CredentialStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *CredentialStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialStatusMsg proto.InternalMessageInfo

func (m *CredentialStatusMsg) GetSshPrivateKeySha256Hex() string {
	if m != nil {
		return m.SshPrivateKeySha256Hex
	}
	return ""
}

func init() {
	proto.RegisterType((*CredentialListCmd)(nil), "aranya.CredentialListCmd")
	proto.RegisterType((*CredentialEnsureCmd)(nil), "aranya.CredentialEnsureCmd")
	proto.RegisterType((*CredentialDeleteCmd)(nil), "aranya.CredentialDeleteCmd")
	proto.RegisterType((*CredentialStatusMsg)(nil), "aranya.CredentialStatusMsg")
}

func init() { proto.RegisterFile("credential.proto", fileDescriptor_1720e53dfb4809d1) }

var fileDescriptor_1720e53dfb4809d1 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2e, 0x4a, 0x4d,
	0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c,
	0x4a, 0xcc, 0xab, 0x4c, 0x54, 0x12, 0xe6, 0x12, 0x74, 0x86, 0xcb, 0xf9, 0x64, 0x16, 0x97, 0x38,
	0xe7, 0xa6, 0x28, 0xd9, 0x72, 0x09, 0x23, 0x04, 0x5d, 0xf3, 0x8a, 0x4b, 0x8b, 0x52, 0x9d, 0x73,
	0x53, 0x84, 0xd4, 0xb8, 0xf8, 0x8b, 0x8b, 0x33, 0xe2, 0x0b, 0x8a, 0x32, 0xcb, 0x12, 0x4b, 0x52,
	0xe3, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x78, 0x8b, 0x8b, 0x33, 0x02,
	0x20, 0xa2, 0xde, 0xa9, 0x95, 0x4a, 0xa2, 0xc8, 0xda, 0x5d, 0x52, 0x73, 0x52, 0x4b, 0x40, 0xda,
	0x95, 0x02, 0x91, 0x85, 0x83, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x7d, 0x8b, 0xd3, 0x85, 0xac, 0xb8,
	0xa4, 0xd0, 0x4c, 0x8d, 0x2f, 0xce, 0x48, 0x34, 0x32, 0x35, 0x8b, 0xcf, 0x48, 0xad, 0x00, 0x5b,
	0xc0, 0x19, 0x24, 0x86, 0x62, 0x41, 0x30, 0x58, 0xda, 0x23, 0xb5, 0xc2, 0x29, 0xfc, 0xc2, 0x43,
	0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2,
	0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8,
	0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7,
	0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x62, 0x62, 0x51, 0x46, 0x62, 0x89, 0x5e, 0x4a, 0x6a, 0x99,
	0x3e, 0x24, 0x14, 0x74, 0xc1, 0x61, 0x02, 0xe5, 0xa4, 0xe7, 0x17, 0x24, 0x25, 0xb1, 0x81, 0x45,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xa3, 0x00, 0x11, 0x39, 0x01, 0x00, 0x00,
}

func (this *CredentialListCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialListCmd)
	if !ok {
		that2, ok := that.(CredentialListCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CredentialEnsureCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialEnsureCmd)
	if !ok {
		that2, ok := that.(CredentialEnsureCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SshPrivateKey, that1.SshPrivateKey) {
		return false
	}
	return true
}
func (this *CredentialDeleteCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialDeleteCmd)
	if !ok {
		that2, ok := that.(CredentialDeleteCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CredentialStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialStatusMsg)
	if !ok {
		that2, ok := that.(CredentialStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SshPrivateKeySha256Hex != that1.SshPrivateKeySha256Hex {
		return false
	}
	return true
}
func (this *CredentialListCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.CredentialListCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialEnsureCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.CredentialEnsureCmd{")
	s = append(s, "SshPrivateKey: "+fmt.Sprintf("%#v", this.SshPrivateKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialDeleteCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aranyagopb.CredentialDeleteCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aranyagopb.CredentialStatusMsg{")
	s = append(s, "SshPrivateKeySha256Hex: "+fmt.Sprintf("%#v", this.SshPrivateKeySha256Hex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCredential(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CredentialListCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialListCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialListCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CredentialEnsureCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialEnsureCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialEnsureCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SshPrivateKey) > 0 {
		i -= len(m.SshPrivateKey)
		copy(dAtA[i:], m.SshPrivateKey)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.SshPrivateKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialDeleteCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialDeleteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialDeleteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CredentialStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SshPrivateKeySha256Hex) > 0 {
		i -= len(m.SshPrivateKeySha256Hex)
		copy(dAtA[i:], m.SshPrivateKeySha256Hex)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.SshPrivateKeySha256Hex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialListCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CredentialEnsureCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SshPrivateKey)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *CredentialDeleteCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CredentialStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SshPrivateKeySha256Hex)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func sovCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredential(x uint64) (n int) {
	return sovCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CredentialListCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialListCmd{`,
		`}`,
	}, "")
	return s
}
func (this *CredentialEnsureCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialEnsureCmd{`,
		`SshPrivateKey:` + fmt.Sprintf("%v", this.SshPrivateKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialDeleteCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialDeleteCmd{`,
		`}`,
	}, "")
	return s
}
func (this *CredentialStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialStatusMsg{`,
		`SshPrivateKeySha256Hex:` + fmt.Sprintf("%v", this.SshPrivateKeySha256Hex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCredential(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CredentialListCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialListCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialListCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialEnsureCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialEnsureCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialEnsureCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshPrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshPrivateKey = append(m.SshPrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SshPrivateKey == nil {
				m.SshPrivateKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialDeleteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialDeleteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialDeleteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshPrivateKeySha256Hex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshPrivateKeySha256Hex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredential = fmt.Errorf("proto: unexpected end of group")
)
