// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

// +build !nodev

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceType int32

const (
	// unknown type of device
	DEVICE_TYPE_UNSPECIFIED DeviceType = 0
	// a normal device for physical operations (e.g. sensor, cam)
	DEVICE_TYPE_NORMAL DeviceType = 1
	// a reporter device is used to report metrics
	DEVICE_TYPE_METRICS_REPORTER DeviceType = 2
)

var DeviceType_name = map[int32]string{
	0: "DEVICE_TYPE_UNSPECIFIED",
	1: "DEVICE_TYPE_NORMAL",
	2: "DEVICE_TYPE_METRICS_REPORTER",
}

var DeviceType_value = map[string]int32{
	"DEVICE_TYPE_UNSPECIFIED":      0,
	"DEVICE_TYPE_NORMAL":           1,
	"DEVICE_TYPE_METRICS_REPORTER": 2,
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

func init() {
	proto.RegisterEnum("aranya.DeviceType", DeviceType_name, DeviceType_value)
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x49, 0x2d, 0xcb,
	0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2c, 0x4a, 0xcc, 0xab, 0x4c,
	0xd4, 0x4a, 0xe6, 0xe2, 0x72, 0x01, 0x8b, 0x87, 0x54, 0x16, 0xa4, 0x0a, 0x49, 0x73, 0x89, 0xbb,
	0xb8, 0x86, 0x79, 0x3a, 0xbb, 0xc6, 0x87, 0x44, 0x06, 0xb8, 0xc6, 0x87, 0xfa, 0x05, 0x07, 0xb8,
	0x3a, 0x7b, 0xba, 0x79, 0xba, 0xba, 0x08, 0x30, 0x08, 0x89, 0x71, 0x09, 0x21, 0x4b, 0xfa, 0xf9,
	0x07, 0xf9, 0x3a, 0xfa, 0x08, 0x30, 0x0a, 0x29, 0x70, 0xc9, 0x20, 0x8b, 0xfb, 0xba, 0x86, 0x04,
	0x79, 0x3a, 0x07, 0xc7, 0x07, 0xb9, 0x06, 0xf8, 0x07, 0x85, 0xb8, 0x06, 0x09, 0x30, 0x39, 0x85,
	0x5f, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4,
	0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b,
	0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x52, 0x4c, 0x2c, 0xca, 0x48, 0x2c, 0xd1, 0x4b,
	0x49, 0x2d, 0xd3, 0x87, 0x38, 0x56, 0x17, 0xec, 0x74, 0x28, 0x27, 0x3d, 0xbf, 0x20, 0x29, 0x89,
	0x0d, 0x2c, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x26, 0x7b, 0x2a, 0x37, 0xdc, 0x00, 0x00,
	0x00,
}

func (x DeviceType) String() string {
	s, ok := DeviceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
